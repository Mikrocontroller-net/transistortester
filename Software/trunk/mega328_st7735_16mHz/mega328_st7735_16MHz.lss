
../Obj/mega328_st7735_16MHz/mega328_st7735_16MHz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00008113  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007d2c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c2  00800100  00800100  00007dc0  2**0
                  ALLOC
  3 .eeprom       00000353  00810000  00810000  00007dc0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .stab         00001668  00000000  00000000  00008114  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000350  00000000  00000000  0000977c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000012  00000000  00000000  00009acc  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00009ae0  2**2
                  CONTENTS, READONLY, OCTETS
  8 .debug_aranges 00000678  00000000  00000000  00009b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_info   0000cd2e  00000000  00000000  0000a198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002a67  00000000  00000000  00016ec6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line   00010cd6  00000000  00000000  0001992d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_frame  00000ccc  00000000  00000000  0002a604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_str    00001c3c  00000000  00000000  0002b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00008dd0  00000000  00000000  0002cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00035cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
       0:	3e c6       	rjmp	.+3196   	; 0xc7e <__ctors_end>
       2:	00 00       	nop
       4:	4e c6       	rjmp	.+3228   	; 0xca2 <__bad_interrupt>
       6:	00 00       	nop
       8:	4c c6       	rjmp	.+3224   	; 0xca2 <__bad_interrupt>
       a:	00 00       	nop
       c:	4a c6       	rjmp	.+3220   	; 0xca2 <__bad_interrupt>
       e:	00 00       	nop
      10:	48 c6       	rjmp	.+3216   	; 0xca2 <__bad_interrupt>
      12:	00 00       	nop
      14:	0c 94 62 35 	jmp	0x6ac4	; 0x6ac4 <__vector_5>
      18:	44 c6       	rjmp	.+3208   	; 0xca2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c 94 63 10 	jmp	0x20c6	; 0x20c6 <__vector_7>
      20:	40 c6       	rjmp	.+3200   	; 0xca2 <__bad_interrupt>
      22:	00 00       	nop
      24:	3e c6       	rjmp	.+3196   	; 0xca2 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 e0 28 	jmp	0x51c0	; 0x51c0 <__vector_10>
      2c:	0c 94 51 35 	jmp	0x6aa2	; 0x6aa2 <__vector_11>
      30:	0c 94 56 35 	jmp	0x6aac	; 0x6aac <__vector_12>
      34:	0c 94 bc 28 	jmp	0x5178	; 0x5178 <__vector_13>
      38:	34 c6       	rjmp	.+3176   	; 0xca2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	32 c6       	rjmp	.+3172   	; 0xca2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 30 35 	jmp	0x6a60	; 0x6a60 <__vector_16>
      44:	2e c6       	rjmp	.+3164   	; 0xca2 <__bad_interrupt>
      46:	00 00       	nop
      48:	2c c6       	rjmp	.+3160   	; 0xca2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2a c6       	rjmp	.+3156   	; 0xca2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	28 c6       	rjmp	.+3152   	; 0xca2 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 64 10 	jmp	0x20c8	; 0x20c8 <__vector_21>
      58:	24 c6       	rjmp	.+3144   	; 0xca2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	22 c6       	rjmp	.+3140   	; 0xca2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	20 c6       	rjmp	.+3136   	; 0xca2 <__bad_interrupt>
      62:	00 00       	nop
      64:	1e c6       	rjmp	.+3132   	; 0xca2 <__bad_interrupt>
	...

00000068 <samplingADC>:
      68:	e6 2f       	mov	r30, r22
      6a:	f7 2f       	mov	r31, r23
      6c:	90 30       	cpi	r25, 0x00	; 0
      6e:	09 f4       	brne	.+2      	; 0x72 <L16>
      70:	93 95       	inc	r25

00000072 <L16>:
      72:	e5 b8       	out	0x05, r14	; 5
      74:	c4 b8       	out	0x04, r12	; 4
      76:	b7 ef       	ldi	r27, 0xF7	; 247
      78:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      7c:	a5 e0       	ldi	r26, 0x05	; 5
      7e:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
      82:	a8 e0       	ldi	r26, 0x08	; 8
      84:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
      88:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
      8c:	af ef       	ldi	r26, 0xFF	; 255
      8e:	a0 93 85 00 	sts	0x0085, r26	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
      92:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
      96:	a6 e0       	ldi	r26, 0x06	; 6
      98:	a0 93 36 00 	sts	0x0036, r26	; 0x800036 <__TEXT_REGION_LENGTH__+0x7e0036>
      9c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
      a0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
      a4:	b6 e0       	ldi	r27, 0x06	; 6
      a6:	af e7       	ldi	r26, 0x7F	; 127
      a8:	a9 1b       	sub	r26, r25
      aa:	51 e0       	ldi	r21, 0x01	; 1
      ac:	39 2f       	mov	r19, r25

000000ae <L14>:
      ae:	36 30       	cpi	r19, 0x06	; 6
      b0:	2a f0       	brmi	.+10     	; 0xbc <L13>
      b2:	a0 58       	subi	r26, 0x80	; 128
      b4:	b9 4f       	sbci	r27, 0xF9	; 249
      b6:	53 95       	inc	r21
      b8:	36 50       	subi	r19, 0x06	; 6
      ba:	f9 cf       	rjmp	.-14     	; 0xae <L14>

000000bc <L13>:
      bc:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
      c0:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

000000c4 <wait_adc>:
      c4:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      c8:	a4 ff       	sbrs	r26, 4
      ca:	fc cf       	rjmp	.-8      	; 0xc4 <wait_adc>
      cc:	b7 eb       	ldi	r27, 0xB7	; 183
      ce:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
      d2:	a2 e0       	ldi	r26, 0x02	; 2
      d4:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
      d8:	a9 e0       	ldi	r26, 0x09	; 9
      da:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
      de:	62 e0       	ldi	r22, 0x02	; 2
      e0:	a0 e0       	ldi	r26, 0x00	; 0
      e2:	a0 93 7b 00 	sts	0x007B, r26	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>

000000e6 <backtosleep>:
      e6:	a1 e0       	ldi	r26, 0x01	; 1
      e8:	a0 93 53 00 	sts	0x0053, r26	; 0x800053 <__TEXT_REGION_LENGTH__+0x7e0053>
      ec:	88 95       	sleep
      ee:	e5 b8       	out	0x05, r14	; 5
      f0:	c4 b8       	out	0x04, r12	; 4
      f2:	84 ff       	sbrs	r24, 4
      f4:	19 c0       	rjmp	.+50     	; 0x128 <stepresponse>
      f6:	a3 e4       	ldi	r26, 0x43	; 67

000000f8 <L11>:
      f8:	aa 95       	dec	r26
      fa:	f1 f7       	brne	.-4      	; 0xf8 <L11>
      fc:	ef 93       	push	r30
      fe:	ff 93       	push	r31
     100:	e7 b1       	in	r30, 0x07	; 7
     102:	f8 b1       	in	r31, 0x08	; 8
     104:	a4 e0       	ldi	r26, 0x04	; 4
     106:	c2 fc       	sbrc	r12, 2
     108:	a2 e0       	ldi	r26, 0x02	; 2
     10a:	c0 fc       	sbrc	r12, 0
     10c:	a1 e0       	ldi	r26, 0x01	; 1
     10e:	bf 2f       	mov	r27, r31
     110:	ba 2b       	or	r27, r26
     112:	ae 2b       	or	r26, r30
     114:	b8 b9       	out	0x08, r27	; 8
     116:	04 b9       	out	0x04, r16	; 4
     118:	a7 b9       	out	0x07, r26	; 7
     11a:	e7 b9       	out	0x07, r30	; 7
     11c:	f8 b9       	out	0x08, r31	; 8
     11e:	ff 91       	pop	r31
     120:	ef 91       	pop	r30
     122:	0a c0       	rjmp	.+20     	; 0x138 <genfreq_end>

00000124 <backtosleep2>:
     124:	0c 94 73 00 	jmp	0xe6	; 0xe6 <backtosleep>

00000128 <stepresponse>:
     128:	a7 e4       	ldi	r26, 0x47	; 71
	...

0000012c <L10>:
     12c:	aa 95       	dec	r26
     12e:	f1 f7       	brne	.-4      	; 0x12c <L10>
     130:	25 b9       	out	0x05, r18	; 5
     132:	e5 b8       	out	0x05, r14	; 5
     134:	00 00       	nop
     136:	04 b9       	out	0x04, r16	; 4

00000138 <genfreq_end>:
     138:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     13c:	a0 91 85 00 	lds	r26, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     140:	b0 91 89 00 	lds	r27, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     144:	a3 95       	inc	r26
     146:	ab 17       	cp	r26, r27
     148:	68 f7       	brcc	.-38     	; 0x124 <backtosleep2>
     14a:	a0 91 7a 00 	lds	r26, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     14e:	a4 ff       	sbrs	r26, 4
     150:	f3 cf       	rjmp	.-26     	; 0x138 <genfreq_end>
     152:	b7 eb       	ldi	r27, 0xB7	; 183
     154:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     158:	6a 95       	dec	r22

0000015a <brnewaitevent>:
     15a:	71 f7       	brne	.-36     	; 0x138 <genfreq_end>
     15c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     160:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     164:	30 81       	ld	r19, Z
     166:	86 fd       	sbrc	r24, 6
     168:	63 0f       	add	r22, r19
     16a:	61 93       	st	Z+, r22
     16c:	30 81       	ld	r19, Z
     16e:	86 fd       	sbrc	r24, 6
     170:	73 1f       	adc	r23, r19
     172:	80 ff       	sbrs	r24, 0
     174:	71 93       	st	Z+, r23
     176:	65 2f       	mov	r22, r21
     178:	4a 95       	dec	r20
     17a:	79 f7       	brne	.-34     	; 0x15a <brnewaitevent>

0000017c <end>:
     17c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     180:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     184:	b7 e0       	ldi	r27, 0x07	; 7
     186:	b0 93 7a 00 	sts	0x007A, r27	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     18a:	08 95       	ret

0000018c <bmp_number>:
     18c:	c0 01 b9 01 b2 01                                   ......

00000192 <bmp_vakdiode>:
     192:	18 00 07 20 08 08 08 f8 00 00 00 20 60 a0 3f a0     ... ....... `.?.
     1a2:	60 20 02 02 02 ff 02 02 02 10 10 10 1f 00 00 00     ` ..............

000001b2 <bmp_three_data>:
     1b2:	05 08 42 81 89 89 76                                ..B...v

000001b9 <bmp_two_data>:
     1b9:	05 08 c2 a1 91 89 86                                .......

000001c0 <bmp_one_data>:
     1c0:	05 08 00 04 02 ff 00                                .......

000001c7 <bmp_pnp>:
     1c7:	10 10 05 08 f8 78 38 58 88                          .....x8X.

000001d0 <bmp_p_jfet>:
     1d0:	09 10 03 08 1c 3e 7f                                .....>.

000001d7 <bmp_p_d_mos>:
     1d7:	0d 08 07 10 ff 81 81 81 f1 e1 c1 ff 40 40 40 47     ............@@@G
     1e7:	43 41                                               CA

000001e9 <bmp_n_d_mos>:
     1e9:	0d 08 01 10 ff ff                                   ......

000001ef <bmp_p_e_mos>:
     1ef:	11 08 03 10 f1 e1 c1 47 43 41                       .......GCA

000001f9 <bmp_p_d_igbt>:
     1f9:	0e 00 08 20 21 21 12 20 60 e0 e0 e0 fe fe 04 02     ... !!. `.......
     209:	01 00 01 03 7f 7f 21 c2 c4 c4 c0 40 94 84 00 07     ......!....@....
     219:	03 01 02 04                                         ....

0000021d <bmp_n_d_igbt>:
     21d:	0e 08 02 10 fe fe 7f 7f 00 00 00 00                 ............

00000229 <bmp_p_e_igbt>:
     229:	11 00 05 20 20 60 e0 e0 e0 02 01 00 01 03 c2 c4     ...  `..........
     239:	c4 c0 40 07 03 01 02 04                             ..@.....

00000241 <PinRLRHADCtab>:
     241:	01 04 10 01 02 04                                   ......

00000247 <HelpCalibration_str>:
     247:	4e 6f 74 20 63 61 6c 69 62 72 61 74 65 64 21 20     Not calibrated! 
     257:	46 6f 72 ff 63 61 6c 69 62 72 61 74 69 6f 6e 20     For.calibration 
     267:	63 6c 61 6d 70 20 74 68 65 20 33 ff 70 69 6e 73     clamp the 3.pins
     277:	20 74 6f 67 65 74 68 65 72 20 61 6e 64 20 73 74      together and st
     287:	61 72 74 20 77 69 74 68 20 74 68 65 ff 6b 65 79     art with the.key
     297:	2e 20 41 63 6b 6e 6f 77 6c 65 64 67 65 20 74 68     . Acknowledge th
     2a7:	65 20 73 65 6c 66 2d 74 65 73 74 20 77 69 74 68     e self-test with
     2b7:	20 74 68 65 20 6b 65 79 20 77 69 74 68 69 6e ff      the key within.
     2c7:	32 73 2e 20 44 69 73 63 6f 6e 6e 65 63 74 20 70     2s. Disconnect p
     2d7:	69 6e 73 20 61 66 74 65 72 20 74 68 65 ff 6d 65     ins after the.me
     2e7:	73 73 61 67 65 20 22 69 73 6f 6c 61 74 65 ff 50     ssage "isolate.P
     2f7:	72 6f 62 65 21 22 20 69 73 20 73 68 6f 77 6e 2e     robe!" is shown.
     307:	20 53 6f 66 74 77 61 72 65 20 61 6e 64 20 64 6f      Software and do
     317:	63 75 6d 65 6e 74 61 74 69 6f 6e 20 69 73 20 61     cumentation is a
     327:	74 20 67 69 74 68 75 62 2e 63 6f 6d 2f fe 6d 69     t github.com/.mi
     337:	6b 72 6f 63 6f 6e 74 72 6f 6c 6c 65 72 fe 2d 6e     krocontroller.-n
     347:	65 74 2f 74 72 61 6e 73 69 73 74 6f 72 fe 74 65     et/transistor.te
     357:	73 74 65 72 20 00                                   ster .

0000035d <RHtab>:
     35d:	b9 03 87 03 58 03 2e 03 07 03 e4 02 c3 02 a4 02     ....X...........
     36d:	88 02                                               ..

0000036f <LogTab>:
     36f:	00 00 14 00 29 00 3e 00 53 00 69 00 80 00 97 00     ....).>.S.i.....
     37f:	ae 00 c6 00 df 00 f8 00 12 01 2d 01 49 01 65 01     ..........-.I.e.
     38f:	82 01 a0 01 be 01 de 01 ff 01 21 02 44 02 68 02     ..........!.D.h.
     39f:	8e 02 b5 02 de 02 09 03 35 03 64 03 94 03 c8 03     ........5.d.....
     3af:	fe 03 37 04 73 04 b4 04 f9 04 43 05 93 05 ea 05     ..7.s.....C.....
     3bf:	49 06 b3 06 29 07 ae 07 48 08 ff 08 de 09 fd 0a     I...)...H.......
     3cf:	93 0c 48 0f 99 1b                                   ..H...

000003d5 <bigfont>:
	...
     3e5:	1e 21 21 21 12 00 80 7f 00 00 00 7e 4a 4a 4a 34     .!!!.......~JJJ4
     3f5:	00 00 00 00 00 00 fc 40 20 10 08 04 02 01 00 00     .......@ .......
     405:	00 01 01 01 01 01 01 01 01 01 01 01 01 01 7f 04     ................
     415:	88 d0 e0 f0 f8 00 00 00 00 00 00 00 00 00 00 00     ................
     425:	00 00 00 00 00 00 00 fc 94 94 84 00 00 01 02 fc     ................
	...
     441:	1e 21 21 21 12 e0 c0 80 40 20 10 0f 00 00 00 c0     .!!!....@ ......
     451:	20 20 20 40 00 00 00 fc 00 00 9e 9e 04 03 03 03        @............
     461:	03 02 00 00 00 20 20 23 24 25 25 23 20 20 20 3f     .....  #$%%#   ?
     471:	00 00 7b 7b 21 42 84 04 80 c0 00 00 00 00 00 00     ..{{!B..........
	...
     489:	fc 94 94 84 00 04 06 07 07 07 08 f0 00 00 00 00     ................
	...
     4a1:	00 80 3f 21 21 12 0c 00 00 00 00 ff 00 00 00 f0     ..?!!...........
     4b1:	08 48 48 c8 00 00 fe 00 00 e7 81 81 81 c1 e1 f1     .HH.............
     4c1:	81 81 81 01 00 20 20 20 21 21 21 20 20 20 3f 00     .....   !!!   ?.
     4d1:	00 f3 40 40 40 41 43 47 40 40 7f c0 00 00 00 00     ..@@@ACG@@......
	...
     4e9:	00 00 48 94 94 94 64 00 00 00 00 ff 00 00 00 00     ..H...d.........
	...
     505:	3f 21 21 12 0c 00 00 ff 00 00 00 f0 08 48 48 d0     ?!!..........HH.
     515:	00 00 00 00 00 00 fe fe 04 04 04 04 04 04 04 07     ................
     525:	00 08 08 08 09 09 09 08 08 7f 3e 1c 08 08 7f 7f     ..........>.....
     535:	20 20 20 20 20 20 20 e0 00 00 00 00 00 00 00 00            .........
	...
     54d:	48 94 94 94 64 00 00 ff 00 00 00 00 00 00 00 00     H...d...........
     55d:	00 00 00 ff 00 3c 0a 09 0a 3c 00 22 31 29 29 26     .....<...<."1))&
     56d:	00 00 82 86 8e 9e be fe fe be de ef f6 fa fe fe     ................
     57d:	fa f2 e2 c2 82 00 00 00 08 08 08 04 02 79 84 a4     .............y..
     58d:	a4 68 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     .h..............
	...
     5a5:	00 00 00 ff 00 00 f0 28 24 28 f0 00 10 08 fc 00     .......($(......
	...
     5bd:	00 00 00 3c 0a 09 0a 3c 00 ff 00 00 00 00 00 00     ...<...<........
	...
     5d9:	04 0c 1c 3c 7c ff 7c 3c 1c 0c 04 00 00 00 00 00     ...<|.|<........
     5e9:	00 9e a1 a9 a9 9a 80 43 23 13 0b 07 03 ff 03 03     .......C#.......
     5f9:	03 03 03 03 00 00 00 00 00 00 00 00 00 00 00 78     ...............x
     609:	84 84 84 48 00 ff 00 00 00 00 00 00 00 00 00 f0     ...H............
     619:	08 04 e2 11 09 09 09 09 09 09 09 09 09 11 21 c2     ..............!.
     629:	04 08 10 e0 00 00 00 01 02 04 04 07 00 00 00 00     ................
     639:	00 80 40 20 10 88 44 23 10 08 04 03 00 00 00 00     ..@ ..D#........
     649:	00 00 00 00 00 00 00 fe 01 00 fc 02 01 00 00 00     ................
	...
     665:	00 00 00 79 49 49 79 00 00 00 00 00 00 00 00 00     ...yIIy.........

00000675 <nfont>:
     675:	00 f8 04 02 22 54 88 04 03 00 02 02 01 00 78 84     ...."T........x.
     685:	02 02 02 84 78 06 04 07 00 07 04 06 00 fc 00 00     ....x...........
     695:	00 80 fc 00 07 01 01 01 00 01 00 00 0c 12 12 0c     ................
	...
     6b9:	00 00 00 3c fe 3c 00 00 00 00 00 06 00 00 00 00     ...<.<..........
     6c9:	00 16 0e 00 16 0e 00 00 00 00 00 00 00 00 00 10     ................
     6d9:	fc 10 10 fc 10 00 01 07 01 01 07 01 00 18 24 fe     ..............$.
     6e9:	44 88 00 00 03 04 0f 04 03 00 0c 12 92 4c 20 10     D............L .
     6f9:	08 02 01 00 06 09 09 06 88 54 22 54 88 00 80 01     .........T"T....
     709:	02 04 04 02 01 02 00 16 0e 00 00 00 00 00 00 00     ................
     719:	00 00 00 00 00 00 f0 08 04 02 00 00 00 01 02 04     ................
     729:	08 00 00 00 02 04 08 f0 00 00 00 08 04 02 01 00     ................
     739:	48 50 e0 fc e0 50 48 02 01 00 07 00 01 02 40 40     HP...PH.......@@
     749:	40 f8 40 40 00 00 00 00 03 00 00 00 00 00 00 00     @.@@............
     759:	00 00 00 00 0b 05 00 00 00 00 40 40 40 40 40 40     ..........@@@@@@
     769:	40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     @...............
     779:	06 06 00 00 00 00 00 00 00 c0 30 0c 03 00 0c 03     ..........0.....
     789:	00 00 00 00 f8 84 42 22 12 0c f8 01 02 04 04 04     ......B"........
     799:	02 01 00 08 04 02 fe 00 00 00 00 00 00 07 00 00     ................
     7a9:	18 84 42 42 42 24 18 07 04 04 04 04 04 04 0c 02     ..BBB$..........
     7b9:	02 22 22 54 88 03 04 04 04 04 02 01 60 50 48 44     .""T........`PHD
     7c9:	42 fe 40 00 00 00 00 00 07 00 3e 22 12 12 12 22     B.@.......>"..."
     7d9:	c2 01 02 04 04 04 02 01 f8 24 12 12 12 22 c4 01     .........$..."..
     7e9:	02 04 04 04 02 01 02 02 82 42 22 12 0e 00 07 00     .........B".....
     7f9:	00 00 00 00 88 54 22 22 22 54 88 01 02 04 04 04     .....T"""T......
     809:	02 01 38 44 82 82 82 44 f8 02 04 04 04 04 02 01     ..8D...D........
     819:	00 18 18 00 00 00 00 00 06 06 00 00 00 00 00 18     ................
     829:	18 00 00 00 00 00 0b 07 00 00 00 00 00 40 a0 10     .............@..
     839:	08 04 02 00 00 00 01 02 04 08 00 20 20 20 20 20     ...........     
     849:	20 00 01 01 01 01 01 01 00 02 04 08 10 a0 40 00      .............@.
     859:	08 04 02 01 00 00 18 04 02 82 42 24 18 00 00 00     ..........B$....
     869:	0d 00 00 00 fc 02 62 92 92 92 fc 03 04 04 04 04     ......b.........
     879:	04 00 f0 88 84 82 84 88 f0 07 00 00 00 00 00 07     ................
     889:	fe 22 22 22 22 22 dc 07 04 04 04 04 04 03 fc 02     ."""""..........
     899:	02 02 02 02 0c 03 04 04 04 04 04 03 fe 02 02 02     ................
     8a9:	02 02 fc 07 04 04 04 04 04 03 fe 22 22 22 22 22     ..........."""""
     8b9:	02 07 04 04 04 04 04 04 fe 22 22 22 22 02 02 07     .........""""...
     8c9:	00 00 00 00 00 00 fc 02 02 02 42 42 cc 03 04 04     ..........BB....
     8d9:	04 04 02 07 fe 20 20 20 20 20 fe 07 00 00 00 00     .....     ......
     8e9:	00 07 00 00 02 fe 02 00 00 00 00 04 07 04 00 00     ................
     8f9:	00 00 00 00 00 fe 00 00 02 04 04 04 03 00 fe 20     ............... 
     909:	50 88 04 02 00 07 00 00 00 01 02 04 fe 00 00 00     P...............
     919:	00 00 00 07 04 04 04 04 04 04 fe 04 08 10 08 04     ................
     929:	fe 07 00 00 00 00 00 07 fe 06 18 60 80 00 fe 07     ...........`....
     939:	00 00 00 01 06 07 fc 02 02 02 02 02 fc 03 04 04     ................
     949:	04 04 04 03 fe 42 42 42 42 42 3c 07 00 00 00 00     .....BBBBB<.....
     959:	00 00 fc 02 02 02 02 02 fc 03 04 04 04 05 02 05     ................
     969:	fe 42 42 c2 42 42 3c 07 00 00 00 01 02 04 0c 12     .BB.BB<.........
     979:	22 22 22 42 8c 03 04 04 04 04 04 03 02 02 02 fe     """B............
     989:	02 02 02 00 00 00 07 00 00 00 fe 00 00 00 00 00     ................
     999:	fe 03 04 04 04 04 04 03 0e 70 80 00 80 70 0e 00     .........p...p..
     9a9:	00 03 04 03 00 00 7e 80 00 e0 00 80 7e 00 00 07     ......~.....~...
     9b9:	00 07 00 00 02 0c 90 60 90 0c 02 04 03 00 00 00     .......`........
     9c9:	03 04 1e 20 40 80 40 20 1e 00 00 00 07 00 00 00     ... @.@ ........
     9d9:	02 82 42 22 12 0a 06 07 04 04 04 04 04 04 00 fe     ..B"............
     9e9:	02 02 00 00 00 00 07 04 04 00 00 00 08 10 20 40     .............. @
     9f9:	80 00 00 00 00 00 00 00 01 02 00 00 00 02 02 fe     ................
     a09:	00 00 00 00 04 04 07 00 10 08 04 02 04 08 10 00     ................
	...
     a25:	00 04 04 04 04 04 04 04 00 00 00 0e 16 00 00 00     ................
     a35:	00 00 00 00 00 00 80 48 48 48 48 48 f0 03 04 04     .......HHHHH....
     a45:	04 04 02 07 fe 20 10 10 10 10 e0 07 04 04 04 04     ..... ..........
     a55:	04 03 f0 08 08 08 08 08 10 03 04 04 04 04 04 02     ................
     a65:	e0 10 10 10 10 20 fe 03 04 04 04 04 04 07 f0 88     ..... ..........
     a75:	88 88 88 88 70 03 04 04 04 04 04 04 00 20 fc 22     ....p........ ."
     a85:	22 02 04 00 00 07 00 00 00 00 70 88 88 88 88 88     ".........p.....
     a95:	f0 00 04 04 04 04 04 03 fe 40 20 10 10 10 e0 07     .........@ .....
     aa5:	00 00 00 00 00 07 00 00 08 fa 00 00 00 00 00 00     ................
     ab5:	07 00 00 00 00 00 00 00 fa 00 00 02 04 04 04 03     ................
     ac5:	00 00 fe 40 40 a0 10 08 00 07 00 00 00 01 02 04     ...@@...........
     ad5:	00 00 02 fe 00 00 00 00 00 00 03 04 00 00 f8 10     ................
     ae5:	08 f0 08 08 f0 07 00 00 07 00 00 07 f8 20 10 08     ............. ..
     af5:	08 08 f0 07 00 00 00 00 00 07 f0 08 08 08 08 08     ................
     b05:	f0 03 04 04 04 04 04 03 f8 90 08 08 08 08 f0 07     ................
     b15:	00 01 01 01 01 00 f0 08 08 08 08 90 f8 00 01 01     ................
     b25:	01 01 00 07 f8 20 10 08 08 08 30 07 00 00 00 00     ..... ....0.....
     b35:	00 00 30 48 48 88 88 88 10 02 04 04 04 04 04 03     ..0HH...........
     b45:	00 10 fe 10 10 00 00 00 00 03 04 04 04 02 f8 00     ................
     b55:	00 00 00 00 f8 03 04 04 04 04 02 07 18 60 80 00     .............`..
     b65:	80 60 18 00 00 01 06 01 00 00 f8 00 00 c0 00 00     .`..............
     b75:	f8 01 02 04 03 04 02 01 08 10 20 c0 20 10 08 04     .......... . ...
     b85:	02 01 00 01 02 04 78 80 80 80 80 40 f8 02 04 04     ......x....@....
     b95:	04 04 04 03 08 08 88 48 28 18 08 02 05 04 04 04     .......H(.......
     ba5:	04 04 40 a0 1c 02 02 00 00 00 00 07 08 08 00 00     ..@.............
     bb5:	00 00 00 ff 00 00 00 00 00 00 0f 00 00 00 00 00     ................
     bc5:	02 02 1c a0 40 00 00 08 08 07 00 00 04 02 01 02     ....@...........
     bd5:	04 08 04 00 00 00 00 00 00 00 e0 10 08 04 04 08     ................
     be5:	10 01 01 01 01 01 01 01                             ........

00000bed <sfont>:
     bed:	40 f0 10 10 10 10 f0 40 00 01 01 01 01 01 01 00     @......@........
     bfd:	40 fc f8 f0 e0 40 fc 40 00 07 03 01 00 00 07 00     @....@.@........
     c0d:	40 fc 40 e0 f0 f8 fc 40 00 07 00 00 01 03 07 00     @.@....@........
     c1d:	40 fc fc 00 00 fc fc 40 00 07 07 00 00 07 07 00     @......@........
     c2d:	f8 08 08 08 08 08 08 08 03 02 02 02 02 02 02 02     ................
     c3d:	08 08 08 08 08 08 08 f8 02 02 02 02 02 02 02 03     ................
     c4d:	40 40 40 40 40 40 40 40 00 00 00 00 00 00 00 00     @@@@@@@@........
     c5d:	40 c0 00 c0 20 c0 00 c0 00 01 02 02 01 02 02 02     @... ...........
     c6d:	20 c0 00 c0 20 c0 00 c0 01 02 02 02 01 02 02 01      ... ...........
	...

00000c7e <__ctors_end>:
     c7e:	11 24       	eor	r1, r1
     c80:	1f be       	out	0x3f, r1	; 63
     c82:	cf ef       	ldi	r28, 0xFF	; 255
     c84:	d8 e0       	ldi	r29, 0x08	; 8
     c86:	de bf       	out	0x3e, r29	; 62
     c88:	cd bf       	out	0x3d, r28	; 61

00000c8a <__do_clear_bss>:
     c8a:	21 e0       	ldi	r18, 0x01	; 1
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b1 e0       	ldi	r27, 0x01	; 1
     c90:	01 c0       	rjmp	.+2      	; 0xc94 <.do_clear_bss_start>

00000c92 <.do_clear_bss_loop>:
     c92:	1d 92       	st	X+, r1

00000c94 <.do_clear_bss_start>:
     c94:	a2 3c       	cpi	r26, 0xC2	; 194
     c96:	b2 07       	cpc	r27, r18
     c98:	e1 f7       	brne	.-8      	; 0xc92 <.do_clear_bss_loop>
     c9a:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <main>
     c9e:	0c 94 94 3e 	jmp	0x7d28	; 0x7d28 <_exit>

00000ca2 <__bad_interrupt>:
     ca2:	ae c9       	rjmp	.-3236   	; 0x0 <__vectors>

00000ca4 <_lcd_hw_write>:
	rcall	wait1us
	ret
 #else /* no LCD_SPI_OPEN_COL */
  #ifdef FAST_SPI_OUTPUT
               ; Set RS (0=Cmd, 1=Char)
	set_ce_low
     ca4:	5d 98       	cbi	0x0b, 5	; 11
	set_ce_output		// enable chip
     ca6:	55 9a       	sbi	0x0a, 5	; 10
               set_b0_output		; set B0 to output
               set_rs_low		; SCE to GND
               set_rs_output		//init hardware
               set_en_high		; force data read from LCD controller
   #else
               sbrc    preg_1, 0
     ca8:	80 fd       	sbrc	r24, 0
                       set_rs_high
     caa:	59 9a       	sbi	0x0b, 1	; 11
               sbrs    preg_1, 0
     cac:	80 ff       	sbrs	r24, 0
                       set_rs_low
     cae:	59 98       	cbi	0x0b, 1	; 11
               set_rs_output;		//init hardware
     cb0:	51 9a       	sbi	0x0a, 1	; 10
               set_b0_output		; wait for address setup, set B0 to output
     cb2:	53 9a       	sbi	0x0a, 3	; 10
   #endif
               ; Send bit-7
               set_en_low
     cb4:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 7
     cb6:	67 fd       	sbrc	r22, 7
                       set_b0_high
     cb8:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 7
     cba:	67 ff       	sbrs	r22, 7
                       set_b0_low
     cbc:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high		; force data read from LCD controller
     cbe:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-6
               set_en_low
     cc0:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 6
     cc2:	66 fd       	sbrc	r22, 6
                       set_b0_high
     cc4:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 6
     cc6:	66 ff       	sbrs	r22, 6
                       set_b0_low
     cc8:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high		; force data read from LCD controller
     cca:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-5
               set_en_low
     ccc:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 5
     cce:	65 fd       	sbrc	r22, 5
                       set_b0_high
     cd0:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 5
     cd2:	65 ff       	sbrs	r22, 5
                       set_b0_low
     cd4:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high		; force data read from LCD controller
     cd6:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-4
               set_en_low
     cd8:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 4
     cda:	64 fd       	sbrc	r22, 4
                       set_b0_high
     cdc:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 4
     cde:	64 ff       	sbrs	r22, 4
                       set_b0_low
     ce0:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high		; force data read from LCD controller
     ce2:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-3
               set_en_low
     ce4:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 3
     ce6:	63 fd       	sbrc	r22, 3
                       set_b0_high
     ce8:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 3
     cea:	63 ff       	sbrs	r22, 3
                       set_b0_low
     cec:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high		; force data read from LCD controller
     cee:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-2
               set_en_low
     cf0:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 2
     cf2:	62 fd       	sbrc	r22, 2
                       set_b0_high
     cf4:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 2
     cf6:	62 ff       	sbrs	r22, 2
                       set_b0_low
     cf8:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high		; force data read from LCD controller
     cfa:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-1
               set_en_low
     cfc:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 1
     cfe:	61 fd       	sbrc	r22, 1
                       set_b0_high
     d00:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 1
     d02:	61 ff       	sbrs	r22, 1
                       set_b0_low
     d04:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high              ; force data read from LCD controller
     d06:	5a 9a       	sbi	0x0b, 2	; 11

               ; Send bit-0
               set_en_low
     d08:	5a 98       	cbi	0x0b, 2	; 11
               sbrc    preg_2, 0
     d0a:	60 fd       	sbrc	r22, 0
                       set_b0_high
     d0c:	5b 9a       	sbi	0x0b, 3	; 11
               sbrs    preg_2, 0
     d0e:	60 ff       	sbrs	r22, 0
                       set_b0_low
     d10:	5b 98       	cbi	0x0b, 3	; 11
               set_en_high              ; force data read from LCD controller
     d12:	5a 9a       	sbi	0x0b, 2	; 11
   #if (LCD_INTERFACE_MODE == MODE_3LINE)
               set_rs_high		; SCE to VCC
   #endif
        set_ce_high		// disable chip
     d14:	5d 9a       	sbi	0x0b, 5	; 11
	set_en_low
     d16:	5a 98       	cbi	0x0b, 2	; 11
	set_b0_low		// ## reset b0 to GND to prevent incorrect detection of rotary encoder movement
     d18:	5b 98       	cbi	0x0b, 3	; 11
	ret		// return _lcd_hw_write
     d1a:	08 95       	ret

00000d1c <i2lcd>:
i2lcd:			;	void i2lcd(int iw)

#if FLASHEND > 0x1fff

;;  	movw	r20, r24
 	sbrs	r25, 7
     d1c:	97 ff       	sbrs	r25, 7
 	rjmp	to_lcd		; if (iw >= 0) {
     d1e:	09 c0       	rjmp	.+18     	; 0xd32 <u2lcd>
;   // negativ value, output -  and invert iw
        push	r24		; save r24:r25
     d20:	8f 93       	push	r24
        push	r25
     d22:	9f 93       	push	r25
 	ldi	r24,'-'		; 45
     d24:	8d e2       	ldi	r24, 0x2D	; 45
 	RCALL	lcd_data	; lcd_data('-'); uses r22
     d26:	00 d6       	rcall	.+3072   	; 0x1928 <lcd_data>
        pop	r25		; recall r25:r24
     d28:	9f 91       	pop	r25
        pop	r24		; old r24
     d2a:	8f 91       	pop	r24
        com	r25
     d2c:	90 95       	com	r25
	neg	r24
     d2e:	81 95       	neg	r24
        sbci	r25,-1		; iw = - iw
     d30:	9f 4f       	sbci	r25, 0xFF	; 255

00000d32 <u2lcd>:
#endif

#if FLASHEND > 0x1fff
u2lcd:			;	void i2lcd(uint16_t iw)
to_lcd:			;	void i2lcd(uint16_t iw)
 	ldi	r22, lo8(outval)	;0x0F
     d32:	64 e2       	ldi	r22, 0x24	; 36
 	ldi	r23, hi8(outval)	;0x01
     d34:	71 e0       	ldi	r23, 0x01	; 1
 	ldi	r20, 10
     d36:	4a e0       	ldi	r20, 0x0A	; 10
 	ldi	r21, 0x00	; 0
     d38:	50 e0       	ldi	r21, 0x00	; 0
 	ACALL	utoa		; utoa(iw, outval, 10);	//output voltage to string
     d3a:	0e 94 33 3e 	call	0x7c66	; 0x7c66 <utoa>
 	RCALL	lcd_string	;lcd_string(utoa(iw, outval, 10));	//output correction voltage
     d3e:	41 c6       	rjmp	.+3202   	; 0x19c2 <lcd_string>

 	ret
     d40:	08 95       	ret

00000d42 <i2lcd_space>:
#endif

#if FLASHEND > 0x1fff
.GLOBAL i2lcd_space
i2lcd_space:
	RCALL	i2lcd
     d42:	ec df       	rcall	.-40     	; 0xd1c <i2lcd>
	rjmp	space_ret	; use return from u2lcd_space
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <lcd_space>

00000d46 <u2lcd_space>:

u2lcd_space:
	RCALL	i2lcd
     d46:	ea df       	rcall	.-44     	; 0xd1c <i2lcd>

00000d48 <lcd_space>:

; Output a ' ' to the LCD screen
.GLOBAL lcd_space
.func lcd_space
lcd_space:
	ldi	r24, ' '
     d48:	80 e2       	ldi	r24, 0x20	; 32
	RJMP	lcd_data
     d4a:	ee c5       	rjmp	.+3036   	; 0x1928 <lcd_data>

00000d4c <lcd_minus>:

; Output a '-' to the LCD screen
.GLOBAL lcd_minus
.func lcd_minus
lcd_minus:
	ldi	r24, '-'
     d4c:	8d e2       	ldi	r24, 0x2D	; 45
	RJMP	lcd_data
     d4e:	ec c5       	rjmp	.+3032   	; 0x1928 <lcd_data>

00000d50 <lcd_equal>:

; Output a '=' to the LCD screen
.GLOBAL lcd_equal
.func lcd_equal
lcd_equal:
	ldi	r24, '='
     d50:	8d e3       	ldi	r24, 0x3D	; 61
	RJMP	lcd_data
     d52:	ea c5       	rjmp	.+3028   	; 0x1928 <lcd_data>

00000d54 <PinLayout>:

PinLayout:

#ifndef EBC_STYLE 
;   // Layout with 123= style
 	push	r14
     d54:	ef 92       	push	r14
 	push	r15
     d56:	ff 92       	push	r15
 	push	r16
     d58:	0f 93       	push	r16
 	push	r17
     d5a:	1f 93       	push	r17

 	mov	r17, r24		; Pin1
     d5c:	18 2f       	mov	r17, r24
 	mov	r16, r22		; Pin2
     d5e:	06 2f       	mov	r16, r22
 	mov	r15, r20		; Pin3
     d60:	f4 2e       	mov	r15, r20
 	ldi	r24, lo8(N123_str)	; 0x0B
     d62:	88 e6       	ldi	r24, 0x68	; 104
 	ldi	r25, hi8(N123_str)	; 0x01	
     d64:	91 e0       	ldi	r25, 0x01	; 1
 #ifdef USE_EEPROM
 	RCALL	lcd_fix_string	; lcd_MEM_string(N123_str);		//" 123="
     d66:	38 d6       	rcall	.+3184   	; 0x19d8 <lcd_fix_string>
 #else
 	RCALL	lcd_pgm_string	; lcd_MEM_string(N123_str);		//" 123="
 #endif
 	eor	r14, r14	; for (ipp=0;
     d68:	ee 24       	eor	r14, r14

00000d6a <loop1>:
loop1:
 	lds	r30, _trans
     d6a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
 	lds	r31, _trans+1
     d6e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
 	ldd	r24, Z+OFFS_e	; _trans->e
     d72:	86 85       	ldd	r24, Z+14	; 0x0e
 	cp	r14, r24
     d74:	e8 16       	cp	r14, r24
 	brne	checkb		; if (ipp == _trans->e) 
     d76:	11 f4       	brne	.+4      	; 0xd7c <checkb>
 	mov	r24, r17	; pin1
     d78:	81 2f       	mov	r24, r17
        rjmp	data_ipp  	; lcd_data(pin1);	// Output Character in right order
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <data_ipp>

00000d7c <checkb>:
checkb:
 	ldd	r24, Z+OFFS_b	; _trans->b
     d7c:	84 85       	ldd	r24, Z+12	; 0x0c
 	cp	r14, r24	; if (ipp == _trans->b) 
     d7e:	e8 16       	cp	r14, r24
 	brne	checkc
     d80:	11 f4       	brne	.+4      	; 0xd86 <checkc>
 	mov	r24, r16
     d82:	80 2f       	mov	r24, r16
        rjmp	data_ipp	;  lcd_data(pin2);
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <data_ipp>

00000d86 <checkc>:
checkc:
 	ldd	r24, Z+OFFS_c	; _trans->c
     d86:	85 85       	ldd	r24, Z+13	; 0x0d
 	cp	r14, r24
     d88:	e8 16       	cp	r14, r24
 	brne	next_ipp		; if (ipp == _trans->c) 
     d8a:	11 f4       	brne	.+4      	; 0xd90 <next_ipp>
 	mov	r24, r15
     d8c:	8f 2d       	mov	r24, r15

00000d8e <data_ipp>:
data_ipp:
 	RCALL	lcd_data	;  lcd_data(pin3);
     d8e:	cc d5       	rcall	.+2968   	; 0x1928 <lcd_data>

00000d90 <next_ipp>:
next_ipp:
 	inc	r14
     d90:	e3 94       	inc	r14
 	mov	r24, r14
     d92:	8e 2d       	mov	r24, r14
 	cpi	r24, 0x03	;  for (     ;ipp<3;ipp++) {
     d94:	83 30       	cpi	r24, 0x03	; 3
 	brne	loop1 
     d96:	49 f7       	brne	.-46     	; 0xd6a <loop1>

 	pop	r17
     d98:	1f 91       	pop	r17
 	pop	r16
     d9a:	0f 91       	pop	r16
 	pop	r15
     d9c:	ff 90       	pop	r15
 	pop	r14
     d9e:	ef 90       	pop	r14
 	ret
     da0:	08 95       	ret

00000da2 <PinLayoutLine>:
#ifdef WITH_GRAPHICS
 .GLOBAL PinLayoutLine
 .func PinLayoutLine

PinLayoutLine:
 	push	r14
     da2:	ef 92       	push	r14
 	push	r15
     da4:	ff 92       	push	r15
 	push	r16
     da6:	0f 93       	push	r16
 	push	r17
     da8:	1f 93       	push	r17

 	mov	r17, r24		; Pin1
     daa:	18 2f       	mov	r17, r24
 	mov	r16, r22		; Pin2
     dac:	06 2f       	mov	r16, r22
 	mov	r15, r20		; Pin3
     dae:	f4 2e       	mov	r15, r20
	ldi	r24, 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
	call	lcd_next_line_wait		; lcd_next_line_wait(0);
     db2:	be d4       	rcall	.+2428   	; 0x1730 <lcd_next_line_wait>
	mov	r22, r16
	mov	r24, r17
	RCALL	PinLayout		; PinLayout(Pin1, Pin2, Pin3)
 #else

 	ldi	r24, lo8(Pin_str)	; 
     db4:	8e e6       	ldi	r24, 0x6E	; 110
 	ldi	r25, hi8(Pin_str)	; 	
     db6:	91 e0       	ldi	r25, 0x01	; 1
  #ifdef USE_EEPROM
 	RCALL	lcd_fix_string		; lcd_MEM_string(Pin_str);	//"Pin "
     db8:	0f d6       	rcall	.+3102   	; 0x19d8 <lcd_fix_string>
  #else
 	RCALL	lcd_pgm_string		; lcd_MEM_string(Pin_str);	//"Pin "
  #endif
  #ifndef EBC_STYLE 
;   // Layout with 1= 2= 3= style
 	eor	r14, r14	; for (ipp=0;
     dba:	ee 24       	eor	r14, r14

00000dbc <lloop1>:
lloop1:
        mov	r24, r14
     dbc:	8e 2d       	mov	r24, r14
	RCALL	lcd_testpin	; lcd_testpin(ipp)
     dbe:	fe d5       	rcall	.+3068   	; 0x19bc <lcd_testpin>
	RCALL	lcd_equal	; lcd_data('=')
     dc0:	c7 df       	rcall	.-114    	; 0xd50 <lcd_equal>
 	lds	r30, _trans
     dc2:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
 	lds	r31, _trans+1
     dc6:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
 	ldd	r24, Z+OFFS_e	; _trans->e
     dca:	86 85       	ldd	r24, Z+14	; 0x0e
 	cp	r14, r24
     dcc:	e8 16       	cp	r14, r24
 	brne	lcheckb		; if (ipp == _trans->e) 
     dce:	11 f4       	brne	.+4      	; 0xdd4 <lcheckb>
 	mov	r24, r17	; pin1
     dd0:	81 2f       	mov	r24, r17
        rjmp	ldata_ipp  	; lcd_data(pin1);	// Output Character in right order
     dd2:	09 c0       	rjmp	.+18     	; 0xde6 <ldata_ipp>

00000dd4 <lcheckb>:
lcheckb:
 	ldd	r24, Z+OFFS_b	; _trans->b
     dd4:	84 85       	ldd	r24, Z+12	; 0x0c
 	cp	r14, r24	; if (ipp == _trans->b) 
     dd6:	e8 16       	cp	r14, r24
 	brne	lcheckc
     dd8:	11 f4       	brne	.+4      	; 0xdde <lcheckc>
 	mov	r24, r16
     dda:	80 2f       	mov	r24, r16
        rjmp	ldata_ipp	;  lcd_data(pin2);
     ddc:	04 c0       	rjmp	.+8      	; 0xde6 <ldata_ipp>

00000dde <lcheckc>:
lcheckc:
 	ldd	r24, Z+OFFS_c	; _trans->c
     dde:	85 85       	ldd	r24, Z+13	; 0x0d
 	cp	r14, r24
     de0:	e8 16       	cp	r14, r24
 	brne	lnext_ipp		; if (ipp == _trans->c) 
     de2:	11 f4       	brne	.+4      	; 0xde8 <lnext_ipp>
 	mov	r24, r15
     de4:	8f 2d       	mov	r24, r15

00000de6 <ldata_ipp>:
ldata_ipp:
 	RCALL	lcd_data	;  lcd_data(pin3);
     de6:	a0 d5       	rcall	.+2880   	; 0x1928 <lcd_data>

00000de8 <lnext_ipp>:
lnext_ipp:
	RCALL	lcd_space	;  lcd_space()
     de8:	af df       	rcall	.-162    	; 0xd48 <lcd_space>
 	inc	r14
     dea:	e3 94       	inc	r14
 	mov	r24, r14
     dec:	8e 2d       	mov	r24, r14
 	cpi	r24, 0x03	;  for (     ;ipp<3;ipp++) {
     dee:	83 30       	cpi	r24, 0x03	; 3
 	brne	lloop1 
     df0:	29 f7       	brne	.-54     	; 0xdbc <lloop1>
 	RCALL	lcd_testpin	; lcd_testpin(_trans->c);

   #endif /* =321 */
  #endif  /* EBC_STYLE */
 #endif  /* NO_LONG_PINLAYOUT */
 	pop	r17		; restore registers and return
     df2:	1f 91       	pop	r17
 	pop	r16
     df4:	0f 91       	pop	r16
 	pop	r15
     df6:	ff 90       	pop	r15
 	pop	r14
     df8:	ef 90       	pop	r14
 	ret
     dfa:	08 95       	ret

00000dfc <Rnum2pins>:
#endif     /* WITH_GRAPHICS */

 .GLOBAL Rnum2pins
 .func Rnum2pins
 Rnum2pins:
	mov	r22,r24
     dfc:	68 2f       	mov	r22, r24
	ldi	r24, TP1
     dfe:	80 e0       	ldi	r24, 0x00	; 0
	ldi	r25, TP3
     e00:	92 e0       	ldi	r25, 0x02	; 2
        and	r22,r22
     e02:	66 23       	and	r22, r22
        brne    nozero
     e04:	09 f4       	brne	.+2      	; 0xe08 <nozero>
        ldi	r25, TP2
     e06:	91 e0       	ldi	r25, 0x01	; 1

00000e08 <nozero>:
nozero:
	cpi	r22, 2
     e08:	62 30       	cpi	r22, 0x02	; 2
	brne	no_two
     e0a:	09 f4       	brne	.+2      	; 0xe0e <no_two>
	ldi	r24, TP2
     e0c:	81 e0       	ldi	r24, 0x01	; 1

00000e0e <no_two>:
no_two:
	ret
     e0e:	08 95       	ret

00000e10 <RvalOut>:
 .extern ResistorVal

 .section .text

RvalOut:		; void RvalOut(uint8_t nrr) 	
 	push	r16
     e10:	0f 93       	push	r16

        mov	r16, r24
     e12:	08 2f       	mov	r16, r24
	LDIZ	ResistorVal
     e14:	ea ea       	ldi	r30, 0xAA	; 170
     e16:	f1 e0       	ldi	r31, 0x01	; 1
	add	r24, r24	; nrr*2
     e18:	88 0f       	add	r24, r24
	add	r24, r24	; nrr*4
     e1a:	88 0f       	add	r24, r24
	add	r30, r24
     e1c:	e8 0f       	add	r30, r24
	adc	r31, zero_reg
     e1e:	f1 1d       	adc	r31, r1

 	ld	r22, Z		; resis[rr].rx
     e20:	60 81       	ld	r22, Z
 	ldd	r23, Z+1	; 0x01
     e22:	71 81       	ldd	r23, Z+1	; 0x01
 	ldd	r24, Z+2	; 0x02
     e24:	82 81       	ldd	r24, Z+2	; 0x02
 	ldd	r25, Z+3	; 0x03
     e26:	93 81       	ldd	r25, Z+3	; 0x03
#if FLASHEND > 0x1fff
 	cpi	r22, 0x64	; 100
     e28:	64 36       	cpi	r22, 0x64	; 100
 	cpc	r23, r1
     e2a:	71 05       	cpc	r23, r1
 	cpc	r24, r1
     e2c:	81 05       	cpc	r24, r1
 	cpc	r25, r1
     e2e:	91 05       	cpc	r25, r1
 	brcc	ad1d8e 		; (ResistorVal[nrr] < 100)
     e30:	68 f4       	brcc	.+26     	; 0xe4c <ad1d8e>
 	lds	r18, inductor_lpre
     e32:	20 91 9e 01 	lds	r18, 0x019E	; 0x80019e <inductor_lpre>
	sbrc	r18, 7		; minus bit set?
     e36:	27 fd       	sbrc	r18, 7
 	rjmp	ad1d8e 		; (inductor_lpre >= 0)
     e38:	09 c0       	rjmp	.+18     	; 0xe4c <ad1d8e>
	mov	r24,r16
     e3a:	80 2f       	mov	r24, r16
	ACALL	Rnum2pins;	; pins = Rnum2pins(nrr)
     e3c:	df df       	rcall	.-66     	; 0xdfc <Rnum2pins>
        mov	r22, r25
 	ACALL	GetESR		; rr = GetESR(resis[nrr].ra,resis[nrr].rb);
     e3e:	69 2f       	mov	r22, r25
     e40:	f9 d1       	rcall	.+1010   	; 0x1234 <GetESR>
;        ldi	r24, 0
;        ldi	r25, 0
; 	ldi	r20, -2		; 254
; 	ldi	r16, 0x03	; 3
; 	rjmp	ad1d94		; DisplayValue(rr,-2,LCD_CHAR_OMEGA,3);
	ldi	r22, -2
     e42:	6e ef       	ldi	r22, 0xFE	; 254
	ldi	r18, 3
     e44:	23 e0       	ldi	r18, 0x03	; 3
	ldi	r20, LCD_CHAR_OMEGA
     e46:	4d e1       	ldi	r20, 0x1D	; 29
	RCALL	DisplayValue16	; DisplayValue16(rr,-2,LCD_OMEGA,3);
     e48:	fc d6       	rcall	.+3576   	; 0x1c42 <DisplayValue16>
	rjmp	ret_with_space
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <ret_with_space>

00000e4c <ad1d8e>:
ad1d8e:		; } else {
#endif
	; r22-r25 = ResistorVal[rr]
 	ldi	r20, -1		; 255
     e4c:	4f ef       	ldi	r20, 0xFF	; 255
 	ldi	r16, 0x04	; DisplayValue(resis[nrr].rx,-1,LCD_CHAR_OMEGA,4);
     e4e:	04 e0       	ldi	r16, 0x04	; 4
;ad1d94:
 	ldi	r18, LCD_CHAR_OMEGA	; 244
     e50:	2d e1       	ldi	r18, 0x1D	; 29
 	RCALL	DisplayValue
     e52:	15 d6       	rcall	.+3114   	; 0x1a7e <DisplayValue>

00000e54 <ret_with_space>:
ret_with_space:
 	RCALL	lcd_space	; lcd_space();
     e54:	79 df       	rcall	.-270    	; 0xd48 <lcd_space>
 	pop	r16
     e56:	0f 91       	pop	r16
 	ret
     e58:	08 95       	ret

00000e5a <mVAusgabe>:
        .extern lcd_space

	 .func mVAusgabe
	mVAusgabe:
	;   if (nn < 6) {
		cpi	r24, 0x06	; 6
     e5a:	86 30       	cpi	r24, 0x06	; 6
		brcc	ad1ca4;
     e5c:	58 f4       	brcc	.+22     	; 0xe74 <ad1ca4>
	      // Output in mV units
		LDIZ	diodes+12;
     e5e:	e2 e9       	ldi	r30, 0x92	; 146
     e60:	f1 e0       	ldi	r31, 0x01	; 1
		add	r30,r24
     e62:	e8 0f       	add	r30, r24
		adc	r31,zero_reg
     e64:	f1 1d       	adc	r31, r1
		add	r30,r24
     e66:	e8 0f       	add	r30, r24
		adc	r31,zero_reg
     e68:	f1 1d       	adc	r31, r1
		ld	r24, Z		; diodes.Voltage[nn]
     e6a:	80 81       	ld	r24, Z
		ldd	r25, Z+1	; 0x01
     e6c:	91 81       	ldd	r25, Z+1	; 0x01
		ldi	r22, 0x03	; 3
     e6e:	63 e0       	ldi	r22, 0x03	; 3
		RCALL	Display_mV	; Display_mV(diodes.Voltage[nn],3);
     e70:	08 d7       	rcall	.+3600   	; 0x1c82 <Display_mV>
		RCALL	lcd_space;	; lcd_space();
     e72:	6a cf       	rjmp	.-300    	; 0xd48 <lcd_space>

00000e74 <ad1ca4>:
	ad1ca4:
		ret
     e74:	08 95       	ret

00000e76 <UfAusgabe>:
	.extern mVAusgabe

	.func UfAusgabe

UfAusgabe:
 	push	r17
     e76:	1f 93       	push	r17
 	mov	r17, r24
     e78:	18 2f       	mov	r17, r24
 	lds	r24, ResistorsFound;	0x0168
     e7a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
 	and	r24, r24
     e7e:	88 23       	and	r24, r24
 	breq	ad1cbe; 	   if (ResistorsFound > 0) { 
     e80:	19 f0       	breq	.+6      	; 0xe88 <ad1cbe>
 	RCALL	lcd_space;	lcd_space();
     e82:	62 df       	rcall	.-316    	; 0xd48 <lcd_space>
 	ldi	r24, LCD_CHAR_RESIS3;	0
     e84:	80 e0       	ldi	r24, 0x00	; 0
 	RCALL	lcd_data;      lcd_data(LCD_CHAR_RESIS3);	// special symbol or R
     e86:	50 d5       	rcall	.+2720   	; 0x1928 <lcd_data>

00000e88 <ad1cbe>:
ad1cbe:
 	RCALL	lcd_line2;					//2. row
     e88:	95 d3       	rcall	.+1834   	; 0x15b4 <lcd_line2>
 	ldi	r24, lo8(Uf_str);	0xE9
     e8a:	8f e5       	ldi	r24, 0x5F	; 95
 	ldi	r25, hi8(Uf_str);	0x01
     e8c:	91 e0       	ldi	r25, 0x01	; 1
#ifdef USE_EEPROM
 	RCALL	lcd_fix_string	; lcd_PGM_string(Uf_str);	//"Uf="
     e8e:	a4 d5       	rcall	.+2888   	; 0x19d8 <lcd_fix_string>
#else
 	RCALL	lcd_pgm_string	; lcd_PGM_string(Uf_str);	//"Uf="
#endif
 	mov	r24, r17
     e90:	81 2f       	mov	r24, r17
 	swap	r24
     e92:	82 95       	swap	r24
 	andi	r24, 0x0F
     e94:	8f 70       	andi	r24, 0x0F	; 15
 	rcall	mVAusgabe	; mVAusgabe(bcdnum >> 4);
     e96:	e1 df       	rcall	.-62     	; 0xe5a <mVAusgabe>
 	mov	r24, r17
     e98:	81 2f       	mov	r24, r17
 	andi	r24, 0x0F	; 15
     e9a:	8f 70       	andi	r24, 0x0F	; 15
 	rcall	mVAusgabe	; mVAusgabe(bcdnum & 0x0f);
     e9c:	de df       	rcall	.-68     	; 0xe5a <mVAusgabe>
 	pop	r17
     e9e:	1f 91       	pop	r17
 	ret
     ea0:	08 95       	ret

00000ea2 <SerienDiodenAusgabe>:
	.extern AnKat_str

	.func  SerienDiodenAusgabe

SerienDiodenAusgabe:
 	lds	r24, diode_sequence;	0x0102
     ea2:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>
 	swap	r24
     ea6:	82 95       	swap	r24
 	andi	r24, 0x0F	; first = diode_sequence >> 4;
     ea8:	8f 70       	andi	r24, 0x0F	; 15
	rcall	DiodeSymbol_ApinCpin	;  1->|-2
     eaa:	19 d0       	rcall	.+50     	; 0xede <DiodeSymbol_ApinCpin>

 	lds	r24, diode_sequence;	0x0102
     eac:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>
 	andi	r24, 0x03	; second = diode_sequence & 3;
     eb0:	83 70       	andi	r24, 0x03	; 3
 	RCALL	DiodeSymbol_ACpin	;  ->|-3
     eb2:	1c d0       	rcall	.+56     	; 0xeec <DiodeSymbol_ACpin>
 	lds	r24, diode_sequence;	x0102
     eb4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>
 	rcall	UfAusgabe	; UfAusgabe(diode_sequence);
     eb8:	de cf       	rjmp	.-68     	; 0xe76 <UfAusgabe>
    	ret
     eba:	08 95       	ret

00000ebc <load_diodes_adr>:
 .endfunc

        .func	load_diodes_adr
load_diodes_adr:
 	ldi	r30, lo8(diodes)	;0x80
     ebc:	e6 e8       	ldi	r30, 0x86	; 134
 	ldi	r31, hi8(diodes)	;0x01
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
 	add	r30, r24	; [nn]
     ec0:	e8 0f       	add	r30, r24
 	adc	r31, zero_reg
     ec2:	f1 1d       	adc	r31, r1
	ret
     ec4:	08 95       	ret

00000ec6 <DiodeSymbol_withPins>:
	.func	DiodeSymbol_withPins

DiodeSymbol_withPins:
#if FLASHEND > 0x1fff
 // enough memory (>8k) to sort the pins
        push    r28
     ec6:	cf 93       	push	r28
	rcall	load_diodes_adr
     ec8:	f9 df       	rcall	.-14     	; 0xebc <load_diodes_adr>

cat_first1:
	rcall	DiodeSymbol_CpinApin
 #else
  // the higher test pin number is right side
	ld	r25, Z
     eca:	90 81       	ld	r25, Z
	ldd	r28, Z+6	; if (anode_nr < cathode_nr) {
     ecc:	c6 81       	ldd	r28, Z+6	; 0x06
	cp	r28, r25
     ece:	c9 17       	cp	r28, r25
	brcc	cat_first2
     ed0:	10 f4       	brcc	.+4      	; 0xed6 <cat_first2>

	rcall	DiodeSymbol_ApinCpin
     ed2:	05 d0       	rcall	.+10     	; 0xede <DiodeSymbol_ApinCpin>
	rjmp	diode_fin
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <diode_fin>

00000ed6 <cat_first2>:

//   } else {

cat_first2:
	rcall	DiodeSymbol_CpinApin
     ed6:	13 d0       	rcall	.+38     	; 0xefe <DiodeSymbol_CpinApin>

00000ed8 <diode_fin>:
 #endif
#else
	rcall	DiodeSymbol_ApinCpin
#endif
diode_fin:
	rcall	lcd_space
     ed8:	37 df       	rcall	.-402    	; 0xd48 <lcd_space>
	pop	r28
     eda:	cf 91       	pop	r28
	ret
     edc:	08 95       	ret

00000ede <DiodeSymbol_ApinCpin>:

	.GLOBAL DiodeSymbol_ApinCpin
	.func	DiodeSymbol_ApinCpin

DiodeSymbol_ApinCpin:
	rcall	load_diodes_adr
     ede:	ee df       	rcall	.-36     	; 0xebc <load_diodes_adr>
	push	r24
     ee0:	8f 93       	push	r24
 	ld	r24, Z		;Anode
     ee2:	80 81       	ld	r24, Z
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Anode[nn]);
     ee4:	6b d5       	rcall	.+2774   	; 0x19bc <lcd_testpin>
	pop	r24
     ee6:	8f 91       	pop	r24
	rcall	DiodeSymbol_ACpin	; ->|-3
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <DiodeSymbol_ACpin>
        ret
     eea:	08 95       	ret

00000eec <DiodeSymbol_ACpin>:

	.GLOBAL DiodeSymbol_ACpin
	.func	DiodeSymbol_ACpin

DiodeSymbol_ACpin:
	push	r24
     eec:	8f 93       	push	r24
 	ldi	r24, lo8(AnKat_str)	;0xA3
     eee:	87 e2       	ldi	r24, 0x27	; 39
 	ldi	r25, hi8(AnKat_str)	;0x03
     ef0:	91 e0       	ldi	r25, 0x01	; 1
  #ifdef USE_EEPROM
	.extern lcd_fix_string
 	RCALL	lcd_fix_string	; lcd_PGM_string(AnKat_str);	//"->|-"
     ef2:	72 d5       	rcall	.+2788   	; 0x19d8 <lcd_fix_string>
  #else
	.extern lcd_pgm_string
 	RCALL	lcd_pgm_string	; lcd_PGM_string(AnKat_str);	//"->|-"
  #endif
	pop	r24
     ef4:	8f 91       	pop	r24
	rcall	load_diodes_adr
     ef6:	e2 df       	rcall	.-60     	; 0xebc <load_diodes_adr>
	ldd	r24, Z+6	; Cathode
     ef8:	86 81       	ldd	r24, Z+6	; 0x06
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Cathode[nn]);
     efa:	60 c5       	rjmp	.+2752   	; 0x19bc <lcd_testpin>
	ret
     efc:	08 95       	ret

00000efe <DiodeSymbol_CpinApin>:

	.GLOBAL DiodeSymbol_CpinApin
	.func	DiodeSymbol_CpinApin

DiodeSymbol_CpinApin:
	rcall	load_diodes_adr
     efe:	de df       	rcall	.-68     	; 0xebc <load_diodes_adr>
	push	r24
     f00:	8f 93       	push	r24
 	ldd	r24, Z+6	;Cathode
     f02:	86 81       	ldd	r24, Z+6	; 0x06
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Cathode[nn]);
     f04:	5b d5       	rcall	.+2742   	; 0x19bc <lcd_testpin>
	pop	r24
     f06:	8f 91       	pop	r24
	rcall	DiodeSymbol_CApin	; -|<-3
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <DiodeSymbol_CApin>
        ret
     f0a:	08 95       	ret

00000f0c <DiodeSymbol_CApin>:

	.GLOBAL DiodeSymbol_CApin
	.func	DiodeSymbol_CApin

DiodeSymbol_CApin:
	push	r24
     f0c:	8f 93       	push	r24
 	ldi	r24, lo8(KatAn_str)	;0xA3
     f0e:	83 e2       	ldi	r24, 0x23	; 35
 	ldi	r25, hi8(KatAn_str)	;0x03
     f10:	91 e0       	ldi	r25, 0x01	; 1
  #ifdef USE_EEPROM
	.extern lcd_fix_string
 	RCALL	lcd_fix_string	; lcd_PGM_string(KatAn_str);	//"->|-"
     f12:	62 d5       	rcall	.+2756   	; 0x19d8 <lcd_fix_string>
  #else
	.extern lcd_pgm_string
 	RCALL	lcd_pgm_string	; lcd_PGM_string(KatAn_str);	//"->|-"
  #endif
	pop	r24
     f14:	8f 91       	pop	r24
	rcall	load_diodes_adr
     f16:	d2 df       	rcall	.-92     	; 0xebc <load_diodes_adr>
	ld	r24, Z		; Anode
     f18:	80 81       	ld	r24, Z
 	RCALL	lcd_testpin	; lcd_testpin(diodes.Anode[nn]);
     f1a:	50 c5       	rjmp	.+2720   	; 0x19bc <lcd_testpin>
	ret
     f1c:	08 95       	ret

00000f1e <wait5s>:
; A maximum of 28 bytes of space for return addresses is used in RAM 
; I see no way to implement this function with C-language (too tricky)


wait5s:
 rcall wait1s		;	12+x return-adresses
     f1e:	03 d0       	rcall	.+6      	; 0xf26 <wait1000ms>

00000f20 <wait4s>:
wait4s:
 rcall wait1s		;	12+x return-adresses
     f20:	02 d0       	rcall	.+4      	; 0xf26 <wait1000ms>

00000f22 <wait3s>:
wait3s:
 rcall wait1s		;	12+x return-adresses
     f22:	01 d0       	rcall	.+2      	; 0xf26 <wait1000ms>

00000f24 <wait2s>:
wait2s:
 rcall wait1s		;1s     12+x Return-Adresses
     f24:	00 d0       	rcall	.+0      	; 0xf26 <wait1000ms>

00000f26 <wait1000ms>:

wait1s:
wait1000ms:	
 rcall wait500ms	;500ms	11+x Return-Adresses
     f26:	00 d0       	rcall	.+0      	; 0xf28 <wait500ms>

00000f28 <wait500ms>:

wait500ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f28:	03 d0       	rcall	.+6      	; 0xf30 <wait100ms>

00000f2a <wait400ms>:
wait400ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f2a:	02 d0       	rcall	.+4      	; 0xf30 <wait100ms>

00000f2c <wait300ms>:
wait300ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f2c:	01 d0       	rcall	.+2      	; 0xf30 <wait100ms>

00000f2e <wait200ms>:
wait200ms:
 rcall wait100ms	;100ms	10+x Return-Adresses
     f2e:	00 d0       	rcall	.+0      	; 0xf30 <wait100ms>

00000f30 <wait100ms>:


wait100ms:
 rcall wait50ms	    	; 50ms	9+x Return-Adresses
     f30:	00 d0       	rcall	.+0      	; 0xf32 <wait50ms>

00000f32 <wait50ms>:

wait50ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses 
     f32:	03 d0       	rcall	.+6      	; 0xf3a <wait10ms>

00000f34 <wait40ms>:
wait40ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
     f34:	02 d0       	rcall	.+4      	; 0xf3a <wait10ms>

00000f36 <wait30ms>:
wait30ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses  
     f36:	01 d0       	rcall	.+2      	; 0xf3a <wait10ms>

00000f38 <wait20ms>:
wait20ms:
 rcall wait10ms	    	;10ms	8+x Return-Adresses
     f38:	00 d0       	rcall	.+0      	; 0xf3a <wait10ms>

00000f3a <wait10ms>:

wait10ms:
 rcall wait5ms	   	;5ms	7+x Return-Adresses
     f3a:	00 d0       	rcall	.+0      	; 0xf3c <wait5ms>

00000f3c <wait5ms>:
wait5ms:
 wdr				; every 5ms one Watchdog reset!
     f3c:	a8 95       	wdr
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f3e:	03 d0       	rcall	.+6      	; 0xf46 <wait1ms>

00000f40 <wait4ms>:
wait4ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f40:	02 d0       	rcall	.+4      	; 0xf46 <wait1ms>

00000f42 <wait3ms>:
wait3ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f42:	01 d0       	rcall	.+2      	; 0xf46 <wait1ms>

00000f44 <wait2ms>:
wait2ms:
 rcall wait1ms	   	;1ms	6+x Return-Adresses
     f44:	00 d0       	rcall	.+0      	; 0xf46 <wait1ms>

00000f46 <wait1ms>:

wait1ms:
 rcall wait500us    	;500us	5+x Return-Adresses
     f46:	00 d0       	rcall	.+0      	; 0xf48 <wait500us>

00000f48 <wait500us>:
wait500us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f48:	03 d0       	rcall	.+6      	; 0xf50 <wait100us>

00000f4a <wait400us>:
wait400us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f4a:	02 d0       	rcall	.+4      	; 0xf50 <wait100us>

00000f4c <wait300us>:
wait300us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f4c:	01 d0       	rcall	.+2      	; 0xf50 <wait100us>

00000f4e <wait200us>:
wait200us:
 rcall wait100us    	;100us	4+x Return-Adresses
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <wait100us>

00000f50 <wait100us>:

wait100us:
#if US100_TICS > (2 * US50_TICS)
 nop
#endif
 rcall wait50us	    	; 50us delay
     f50:	00 d0       	rcall	.+0      	; 0xf52 <wait50us>

00000f52 <wait50us>:
wait50us:
#if US50_TICS > (US40_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     f52:	03 d0       	rcall	.+6      	; 0xf5a <wait10us>

00000f54 <wait40us>:
wait40us:
#if US40_TICS > (US30_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     f54:	02 d0       	rcall	.+4      	; 0xf5a <wait10us>

00000f56 <wait30us>:
wait30us:
#if US30_TICS > (US20_TICS + US10_TICS)
 nop
#endif
 rcall wait10us     	;10us delay
     f56:	01 d0       	rcall	.+2      	; 0xf5a <wait10us>

00000f58 <wait20us>:
wait20us:
#if US20_TICS > (2 * US10_TICS)
 nop
#endif
 rcall wait10us		;10us delay
     f58:	00 d0       	rcall	.+0      	; 0xf5a <wait10us>

00000f5a <wait10us>:

#if US5_TICS >= RCALL_TICS
 #if US10_TICS > (2 * US5_TICS)
  nop
 #endif
 rcall wait5us
     f5a:	00 d0       	rcall	.+0      	; 0xf5c <wait5us>

00000f5c <wait5us>:
  #if NS500_TICS >= RCALL_TICS
wait5us:
   #if US5_TICS > (US4_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     f5c:	03 d0       	rcall	.+6      	; 0xf64 <wait1us>

00000f5e <wait4us>:
wait4us:
   #if US4_TICS > (US3_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     f5e:	02 d0       	rcall	.+4      	; 0xf64 <wait1us>

00000f60 <wait3us>:
wait3us:
   #if US3_TICS > (US2_TICS + US1_TICS)
    nop
   #endif
   rcall wait1us
     f60:	01 d0       	rcall	.+2      	; 0xf64 <wait1us>

00000f62 <wait2us>:
wait2us:
   #if US2_TICS > (2 * US1_TICS)
    nop
   #endif
   rcall wait1us
     f62:	00 d0       	rcall	.+0      	; 0xf64 <wait1us>

00000f64 <wait1us>:
wait1us:
   ; a 500ns delay is also possible with call
   #if US1_TICS > (2 * NS500_TICS)
    nop
   #endif
   rcall wait500ns
     f64:	00 d0       	rcall	.+0      	; 0xf66 <wait500ns>

00000f66 <wait500ns>:
 #endif
 #if WAST_TICS2 >= 2
    rjmp .		/* two additional tics */
 #endif
 #if ((WAST_TICS2 / 2) * 2) < WAST_TICS2
    nop			/* one additional tic */
     f66:	00 00       	nop
 #endif

 ret
     f68:	08 95       	ret

00000f6a <sleep_5ms>:

;/* set the processor to sleep state */
;/* wake up will be done with compare match interrupt of counter 2 */
; void sleep_5ms(uint8_t spause){
sleep_5ms:
 	ldi	r25, 0x00	;  pause = spause;
     f6a:	90 e0       	ldi	r25, 0x00	; 0
 	cpi	r24, 201
     f6c:	89 3c       	cpi	r24, 0xC9	; 201
 	brcs	wloop		; if (spause > 200) 
     f6e:	28 f0       	brcs	.+10     	; 0xf7a <wloop>

;// spause = 202 = 2s
;// spause = 203 = 3s
;// spause = 204 = 4s
;// spause = 205 = 5s
 	subi	r24, 0xC8	; 200 pause = (spause-200) * 200;
     f70:	88 5c       	subi	r24, 0xC8	; 200
 	ldi	r20, 0xC8	; 200
     f72:	48 ec       	ldi	r20, 0xC8	; 200
 	mul	r24, r20	; (spause-200) * 200
     f74:	84 9f       	mul	r24, r20
 	movw	r24, r0		; r24:25 = (spause-200) * 200
     f76:	c0 01       	movw	r24, r0
 	eor	r1, r1
     f78:	11 24       	eor	r1, r1

00000f7a <wloop>:

wloop:
 	sbiw	r24, 0x00	; 0 while (pause > 0)
     f7a:	00 97       	sbiw	r24, 0x00	; 0
 	brne	check_remain 
     f7c:	09 f4       	brne	.+2      	; 0xf80 <check_remain>
; 	sts	TIMSK2, r1	; TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
;#endif
 	ret
     f7e:	08 95       	ret

00000f80 <check_remain>:

check_remain:
#if (F_CPU_HZ / 400) > RESTART_DELAY_TICS
        lds	r18, TCCR1B	; if (TCCR1B & ((1<<CS12)|(1<<CS11)|(1<<CS10)) != 0) 
     f80:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	andi	r18, ((1<<CS12)|(1<<CS11)|(1<<CS10))	;
     f84:	27 70       	andi	r18, 0x07	; 7
	breq	do_sleep
     f86:	19 f0       	breq	.+6      	; 0xf8e <do_sleep>
;  timer 1 is running, don't use sleep
	RCALL	wait5ms		; wait5ms();
     f88:	d9 df       	rcall	.-78     	; 0xf3c <wait5ms>
	sbiw	r24, 1		; pause -= 1;
     f8a:	01 97       	sbiw	r24, 0x01	; 1
	rjmp	wloop
     f8c:	f6 cf       	rjmp	.-20     	; 0xf7a <wloop>

00000f8e <do_sleep>:
do_sleep:
 	cpi	r24, 0x01	; 1
     f8e:	81 30       	cpi	r24, 0x01	; 1
 	cpc	r25, r1
     f90:	91 05       	cpc	r25, r1
 	breq	only_one 		; if (pause > 1)
     f92:	19 f0       	breq	.+6      	; 0xf9a <only_one>
 	sbiw	r24, 0x02	; pause -= 2;
     f94:	02 97       	sbiw	r24, 0x02	; 2
;     // Startup time is too long with 1MHz Clock!!!!
	ldi	r19, DELAY_10ms ; 	/* set to 10ms above the actual counter */
     f96:	3c e8       	ldi	r19, 0x8C	; 140
 	rjmp	set_cntr 
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <set_cntr>

00000f9a <only_one>:

only_one:
	ldi	r19, DELAY_5ms	; 	/* set to 5ms above the actual counter */
     f9a:	3e e3       	ldi	r19, 0x3E	; 62
 	ldi	r24, 0x00	;  pause = 0;
     f9c:	80 e0       	ldi	r24, 0x00	; 0
 	ldi	r25, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0

00000fa0 <set_cntr>:
   
set_cntr:
 	lds	r18, TCNT2
     fa0:	20 91 b2 00 	lds	r18, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
 	add	r18, r19	; + t2_offset
     fa4:	23 0f       	add	r18, r19
 	sts	OCR2A, r18	; OCR2A = TCNT2 + t2_offset;	/* set the compare value */
     fa6:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
 	ldi	r20, ((0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2)); /* enable output compare match A interrupt */ 
     faa:	42 e0       	ldi	r20, 0x02	; 2
 	sts	TIMSK2, r20	; TIMSK2 = (0<<OCIE2B) | (1<<OCIE2A) | (0<<TOIE2); /* enable output compare match A interrupt */ 
     fac:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>

;;	ldi	r18, (1 << SM1) | (1 << SM0) | (0 << SE); set_sleep_mode(SLEEP_MODE_PWR_SAVE)
;;	out	_SFR_IO_ADDR(SMCR), r18;        /*  SMCR = (1 <<SM1) | (1 << SM0) | (0 << SE); */
	ldi	r18, (1 << SM1) | (1 << SM0) | (1 << SE);
     fb0:	27 e0       	ldi	r18, 0x07	; 7
	out	_SFR_IO_ADDR(SMCR), r18;        /*  SMCR = (1 <<SM1) | (1 << SM0) | (1 << SE); */
     fb2:	23 bf       	out	0x33, r18	; 51
	sleep			;
     fb4:	88 95       	sleep
; // wake up after output compare match interrupt
	ldi	r18, (1 << SM1) | (1 << SM0) | (0 << SE);
     fb6:	26 e0       	ldi	r18, 0x06	; 6
	out	_SFR_IO_ADDR(SMCR), r18;        /*  SMCR = (1 << SM0) | (0 << SE); */
     fb8:	23 bf       	out	0x33, r18	; 51
 	sts	TIMSK2, r1	; TIMSK2 = (0<<OCIE2B) | (0<<OCIE2A) | (0<<TOIE2); /* disable output compare match A interrupt */ 
     fba:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 	wdr			; wdt_reset();
     fbe:	a8 95       	wdr
#else
;    // restart delay ist too long, use normal delay of 5ms
	RCALL	wait5ms		; wait5ms();	// wait5ms includes wdt_reset()
	sbiw	r24, 1		; pause -= 1;
#endif
 	rjmp	wloop 
     fc0:	dc cf       	rjmp	.-72     	; 0xf7a <wloop>

00000fc2 <W20msReadADC>:
W5msReadADC:
	ACALL wait5ms;
			;// runs directly to ReadADC, this will replace "ACALL ReadADC + ret"
#else
W20msReadADC:
	push	r24;
     fc2:	8f 93       	push	r24
	ldi	r24, 4;		/* 4 * 5ms */
     fc4:	84 e0       	ldi	r24, 0x04	; 4
	RCALL	sleep_5ms;
     fc6:	d1 df       	rcall	.-94     	; 0xf6a <sleep_5ms>
	rjmp   to_read;
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <to_read>

00000fca <W10msReadADC>:
W10msReadADC:
	push	r24;
     fca:	8f 93       	push	r24
	ldi	r24, 2;		/* 2 * 5ms */
     fcc:	82 e0       	ldi	r24, 0x02	; 2
	RCALL	sleep_5ms;
     fce:	cd df       	rcall	.-102    	; 0xf6a <sleep_5ms>
	rjmp   to_read;
     fd0:	03 c0       	rjmp	.+6      	; 0xfd8 <to_read>

00000fd2 <W5msReadADC>:
W5msReadADC:
	push	r24;
     fd2:	8f 93       	push	r24
	ldi	r24, 1;		/* 1 * 5ms */
     fd4:	81 e0       	ldi	r24, 0x01	; 1
	RCALL	sleep_5ms;
     fd6:	c9 df       	rcall	.-110    	; 0xf6a <sleep_5ms>

00000fd8 <to_read>:

to_read:
	pop	r24;
     fd8:	8f 91       	pop	r24

00000fda <ReadADC>:

;unsigned int ReadADC(uint8_t Probe) 
ReadADC:
;  //returns result of ADC port Probe scaled to mV resolution (unsigned int)
;  unsigned long Value;
	push	r17;
     fda:	1f 93       	push	r17
; unsigned int U; /* return value (mV) */
; uint8_t Samples; /* loop counter */
; unsigned long Value; /* ADC value */
	mov	r17, r24;	Probe
     fdc:	18 2f       	mov	r17, r24
	ori	r17, (1 << REFS0)	; Probe |= (1 << REFS0); /* use internal reference anyway */
     fde:	10 64       	ori	r17, 0x40	; 64

00000fe0 <get_sample>:
get_sample:
        AOUT	ADMUX, r17		; ADMUX = Probe; /* set input channel and U reference */
     fe0:	10 93 7c 00 	sts	0x007C, r17	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#ifdef AUTOSCALE_ADC
 /* if voltage reference changed run a dummy conversion */
	mov	r30, r17;
     fe4:	e1 2f       	mov	r30, r17
       	andi	r30, (1 << REFS1)	; Samples = Probe & (1 << REFS1); /* get REFS1 bit flag */
     fe6:	e0 78       	andi	r30, 0x80	; 128
	lds	r24, ADCconfig+RefFlag	;
     fe8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <ADCconfig+0x1>
       	cp	r30, r24;
     fec:	e8 17       	cp	r30, r24
       	breq	no_ref_change			; if (Samples != ADCconfig.RefFlag) 
     fee:	59 f0       	breq	.+22     	; 0x1006 <no_ref_change>
	sts	ADCconfig+RefFlag, r30	; ADCconfig.RefFlag = Samples; /* update flag */
     ff0:	e0 93 1f 01 	sts	0x011F, r30	; 0x80011f <ADCconfig+0x1>
 #ifdef NO_AREF_CAP
	RCALL	wait100us		; wait100us(); /* time for voltage stabilization */
     ff4:	ad df       	rcall	.-166    	; 0xf50 <wait100us>
  #else
	ldi	r24, 2			; /* 2 * 5ms */
	RCALL	sleep_5ms		; wait_about10ms()
  #endif
 #endif		/* end NO_AREF_CAP */
	StartADCwait                    ; // allways do one dummy read of ADC, 112us
     ff6:	8f e9       	ldi	r24, 0x9F	; 159
     ff8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
     ffc:	83 e0       	ldi	r24, 0x03	; 3
     ffe:	83 bf       	out	0x33, r24	; 51
    1000:	88 95       	sleep
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	83 bf       	out	0x33, r24	; 51

00001006 <no_ref_change>:
#endif		/* end AUTOSCALE_ADC */

;unsigned int ReadADC (uint8_t Probe) {
no_ref_change:
 /* * sample ADC readings */
	ldi	r18, 0x00;	 Value = 0UL; /* reset sampling variable */
    1006:	20 e0       	ldi	r18, 0x00	; 0
	ldi	r19, 0x00; 
    1008:	30 e0       	ldi	r19, 0x00	; 0
	movw	r20, r18;
    100a:	a9 01       	movw	r20, r18
	ldi	r30, 0x00;	 Samples = 0; /* number of samples to take */
    100c:	e0 e0       	ldi	r30, 0x00	; 0
	rjmp	r2ae8 ;
    100e:	1f c0       	rjmp	.+62     	; 0x104e <r2ae8>

00001010 <Loop>:
; while (Samples < ADCconfig.Samples) /* take samples */ 
Loop:
	StartADCwait                    /* start ADC and wait */
    1010:	8f e9       	ldi	r24, 0x9F	; 159
    1012:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	83 bf       	out	0x33, r24	; 51
    101a:	88 95       	sleep
    101c:	82 e0       	ldi	r24, 0x02	; 2
    101e:	83 bf       	out	0x33, r24	; 51

	lds	r22, ADCL;     Value += ADCW; /* add ADC reading */
    1020:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r23, ADCH;
    1024:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	add	r18, r22;
    1028:	26 0f       	add	r18, r22
	adc	r19, r23;
    102a:	37 1f       	adc	r19, r23
	adc	r20, r1;
    102c:	41 1d       	adc	r20, r1
	adc	r21, r1;
    102e:	51 1d       	adc	r21, r1
#ifdef AUTOSCALE_ADC
;    /* auto-switch voltage reference for low readings */
;    if ((Samples == 4) && (ADCconfig.U_Bandgap > 255) && ((uint16_t)Value < 1024) && !(Probe & (1 << REFS1))) {
	cpi	r30, 0x04;	Samples == 4
    1030:	e4 30       	cpi	r30, 0x04	; 4
	brne	cnt_next		; if ((Samples == 4) && 
    1032:	61 f4       	brne	.+24     	; 0x104c <cnt_next>
	lds	r24, ADCconfig+3;
    1034:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <ADCconfig+0x3>
        cpi	r24,0;
    1038:	80 30       	cpi	r24, 0x00	; 0
        breq	cnt_next		; if ( && (ADCconfig.U_Bandgap > 255) )
    103a:	41 f0       	breq	.+16     	; 0x104c <cnt_next>
       	ldi	r24, hi8(1024)		; Value < 1024
    103c:	84 e0       	ldi	r24, 0x04	; 4
	cpi	r18, lo8(1024)
    103e:	20 30       	cpi	r18, 0x00	; 0
	cpc	r19, r24;
    1040:	38 07       	cpc	r19, r24
	brcc	cnt_next		; if ( &&  && ((uint16_t)Value < 1024) )
    1042:	20 f4       	brcc	.+8      	; 0x104c <cnt_next>
	sbrc	r17, REFS1;
    1044:	17 fd       	sbrc	r17, 7
	rjmp	cnt_next		; if ( &&  &&  && !(Probe & (1 << REFS1))) 
    1046:	02 c0       	rjmp	.+4      	; 0x104c <cnt_next>
	ori	r17, (1 << REFS1);   Probe |= (1 << REFS1); /* select internal bandgap reference */
    1048:	10 68       	ori	r17, 0x80	; 128
 #if (PROCESSOR_TYP == 644) || (PROCESSOR_TYP == 1280)
	cbr	r17, (1<<REFS0); Probe &= ~(1 << REFS0);  /* ATmega640/1280/2560 1.1V Reference with REFS0=0 */
 #endif
	rjmp	get_sample ;       goto get_sample; /* re-run sampling */
    104a:	ca cf       	rjmp	.-108    	; 0xfe0 <get_sample>

0000104c <cnt_next>:
#endif		/* end AUTOSCALE_ADC */
cnt_next:
	subi	r30, 0xFF;	  Samples++; /* one more done */
    104c:	ef 5f       	subi	r30, 0xFF	; 255

0000104e <r2ae8>:
r2ae8:
	lds	r24, ADCconfig+Samples;
    104e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <ADCconfig>
	cp	r30, r24		; while (Samples < ADCconfig.Samples) /* take samples */ 
    1052:	e8 17       	cp	r30, r24
	brcs	Loop ;
    1054:	e8 f2       	brcs	.-70     	; 0x1010 <Loop>
	lds	r22, ADCconfig+U_AVCC		; U = ADCconfig.U_AVCC; /* Vcc reference */
    1056:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <ADCconfig+0x4>
       	lds	r23, ADCconfig+U_AVCC+1;
    105a:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <ADCconfig+0x5>
#ifdef AUTOSCALE_ADC
; /* * convert ADC reading to voltage * - single sample: U = ADC reading * U_ref / 1024 */
; /* get voltage of reference used */
	sbrs	r17, REFS1			; if (Probe & (1 << REFS1))
    105e:	17 ff       	sbrs	r17, 7
	rjmp	r2b02 ;
    1060:	04 c0       	rjmp	.+8      	; 0x106a <r2b02>
	lds	r22, ADCconfig+U_Bandgap	; U = ADCconfig.U_Bandgap; /* bandgap reference */
    1062:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <ADCconfig+0x2>
	lds	r23, ADCconfig+U_Bandgap+1;
    1066:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <ADCconfig+0x3>

0000106a <r2b02>:
#endif		/* end AUTOSCALE_ADC */
; /* convert to voltage; */
r2b02:
	ldi	r24, 0x00			; Value *= U; /* ADC readings * U_ref */
    106a:	80 e0       	ldi	r24, 0x00	; 0
	ldi	r25, 0x00; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
	ACALL	__mulsi3;			; sum(ADCreads) * ADC_reference
    106e:	0e 94 a9 3c 	call	0x7952	; 0x7952 <__mulsi3>
	ldi	r18, lo8(1023)			; Value /= 1023; /* / 1024 for 10bit ADC */
    1072:	2f ef       	ldi	r18, 0xFF	; 255
	ldi	r19, hi8(1023);
    1074:	33 e0       	ldi	r19, 0x03	; 3
	ldi	r20, 0x00; 0
    1076:	40 e0       	ldi	r20, 0x00	; 0
	ldi	r21, 0x00; 0
    1078:	50 e0       	ldi	r21, 0x00	; 0
	ACALL	__udivmodsi4;			R22-25 / R18-21
    107a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
	movw	r22, r18;
    107e:	b9 01       	movw	r22, r18
	movw	r24, r20;
    1080:	ca 01       	movw	r24, r20
; /* de-sample to get average voltage */
	lds	r18,ADCconfig+Samples			; Value /= ADCconfig.Samples;
    1082:	20 91 1e 01 	lds	r18, 0x011E	; 0x80011e <ADCconfig>
	ldi	r19, 0x00; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
	ldi	r20, 0x00; 0
    1088:	40 e0       	ldi	r20, 0x00	; 0
	ldi	r21, 0x00; 0
    108a:	50 e0       	ldi	r21, 0x00	; 0
	ACALL	__udivmodsi4;			R22-25 / R18-21
    108c:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
	movw	r24, r18			;;//   return ((unsigned int)(Value / (1023 * (unsigned long)ADCconfig.Samples)));
    1090:	c9 01       	movw	r24, r18
	pop	r17;
    1092:	1f 91       	pop	r17
    	ret;
    1094:	08 95       	ret

00001096 <abs_diff>:
 .endfunc

.func abs_diff
.GLOBAL abs_diff
abs_diff:
	movw	r18, r22
    1096:	9b 01       	movw	r18, r22
        sub	r18, r24
    1098:	28 1b       	sub	r18, r24
	sbc	r19, r25
    109a:	39 0b       	sbc	r19, r25
	brcs	is_pl		; return v1-v2
    109c:	50 f0       	brcs	.+20     	; 0x10b2 <is_pl>
	movw	r24, r18
    109e:	c9 01       	movw	r24, r18
	ret			; return v2-v1
    10a0:	08 95       	ret

000010a2 <vcc_diff>:

.func vcc_diff
.GLOBAL vcc_diff
; uint16_t vcc_diff(uint16_t v2)	// computes unsigned_diff(ADCconfig.U_AVCC, v2)
vcc_diff:
	movw	r22, r24
    10a2:	bc 01       	movw	r22, r24
	lds	r24, ADCconfig+U_AVCC
    10a4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCconfig+0x4>
	lds	r25, ADCconfig+U_AVCC+1
    10a8:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADCconfig+0x5>

000010ac <unsigned_diff>:
.func unsigned_diff
.GLOBAL unsigned_diff
; uint16_t unsigned_diff(uint16_t v1, uint16_t v2)  // computes v1-v2 if positive, otherwise returns 0

unsigned_diff:
	cp	r22, r24
    10ac:	68 17       	cp	r22, r24
	cpc	r23, r25
    10ae:	79 07       	cpc	r23, r25
	brcc	no_pl
    10b0:	18 f4       	brcc	.+6      	; 0x10b8 <no_pl>

000010b2 <is_pl>:
is_pl:
	sub	r24, r22
    10b2:	86 1b       	sub	r24, r22
	sbc	r25, r23
    10b4:	97 0b       	sbc	r25, r23
	ret			; return v1-v2
    10b6:	08 95       	ret

000010b8 <no_pl>:
no_pl:
	ldi	r24, 0
    10b8:	80 e0       	ldi	r24, 0x00	; 0
	ldi	r25, 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
	ret	;
    10bc:	08 95       	ret

000010be <RefVoltage>:
 

RefVoltage:

#ifdef AUTO_CAL
 	ldi	r24, lo8(ref_offset)	; 1
    10be:	8f e3       	ldi	r24, 0x3F	; 63
 	ldi	r25, hi8(ref_offset)	; 0
    10c0:	93 e0       	ldi	r25, 0x03	; 3
;; 	ACALL	eeprom_read_word	; eeprom_read_word((uint16_t *)(&ref_offset));
;; 	lds	r18, ref_mv
;; 	lds	r19, ref_mv+1
;; 	add	r18, r24		; referenz =  ref_mv +
;; 	adc	r19, r25
	ACALL	eeprom_read_byte	; eeprom_read_word((uint16_t *)(&ref_offset)); done as two read_byte
    10c2:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	mov	r19, r24
    10c6:	38 2f       	mov	r19, r24
	ldi	r24, lo8(ref_offset+1)
    10c8:	80 e4       	ldi	r24, 0x40	; 64
	ldi	r25, hi8(ref_offset+1)
    10ca:	93 e0       	ldi	r25, 0x03	; 3
	ACALL	eeprom_read_byte
    10cc:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
 	lds	r18, ref_mv
    10d0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <ref_mv>
	add	r18, r19
    10d4:	23 0f       	add	r18, r19
 	lds	r19, ref_mv+1
    10d6:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <ref_mv+0x1>
	adc	r19, r24
    10da:	38 1f       	adc	r19, r24
	lds	r18, ref_mv
	lds	r19, ref_mv+1
	subi	r18, -REF_C_KORR		; referenz = ref_mv + REF_C_KORR;
	adc	r19, zero_reg
#endif
        sts	ref_mv_offs, r18
    10dc:	20 93 5e 01 	sts	0x015E, r18	; 0x80015e <ref_mv_offs>
        sts	ref_mv_offs+1, r19
    10e0:	30 93 5f 01 	sts	0x015F, r19	; 0x80015f <ref_mv_offs+0x1>

#ifdef AUTO_RH 
 	ldi	r24, hi8(Ref_Tab_Beginn)	; 3
    10e4:	83 e0       	ldi	r24, 0x03	; 3
 	cpi	r18, lo8(Ref_Tab_Beginn)	; 232
    10e6:	28 3e       	cpi	r18, 0xE8	; 232
 	cpc	r19, r24
    10e8:	38 07       	cpc	r19, r24
 	brcs	ad210e 				; if (referenz >= Ref_Tab_Beginn) 
    10ea:	20 f0       	brcs	.+8      	; 0x10f4 <ad210e>
 	movw	r24, r18
    10ec:	c9 01       	movw	r24, r18
 	subi	r24, lo8(Ref_Tab_Beginn)	; 232 referenz -= Ref_Tab_Beginn;
    10ee:	88 5e       	subi	r24, 0xE8	; 232
 	sbci	r25, hi8(Ref_Tab_Beginn)	; 3
    10f0:	93 40       	sbci	r25, 0x03	; 3
 	rjmp	ad2112 
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <ad2112>

000010f4 <ad210e>:
ad210e:
 	ldi	r24, 0x00	; referenz = 0;		// limit to begin of table
    10f4:	80 e0       	ldi	r24, 0x00	; 0
 	ldi	r25, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0

000010f8 <ad2112>:
ad2112:
 	ldi	r22, lo8(Ref_Tab_Abstand)	; 50 tabind = referenz / Ref_Tab_Abstand;
    10f8:	62 e3       	ldi	r22, 0x32	; 50
 	ldi	r23, hi8(Ref_Tab_Abstand)	; 0
    10fa:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4
    10fc:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
;  r22 = tabind = referenz / Ref_Tab_Abstand;
;  r24 =  tabres = referenz % Ref_Tab_Abstand;
 	cpi	r22, 0x08	; if (tabind > 7) 
    1100:	68 30       	cpi	r22, 0x08	; 8
 	brcs	ad2120 
    1102:	08 f0       	brcs	.+2      	; 0x1106 <ad2120>
 	ldi	r22, 0x07	; tabind = 7;		// limit to end of table
    1104:	67 e0       	ldi	r22, 0x07	; 7

00001106 <ad2120>:
ad2120:
; // interpolate the table of factors

	LDIZ	RHtab
    1106:	ed e5       	ldi	r30, 0x5D	; 93
    1108:	f3 e0       	ldi	r31, 0x03	; 3
	add	r30, r22
    110a:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
    110c:	f1 1d       	adc	r31, r1
	add	r30, r22
    110e:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
    1110:	f1 1d       	adc	r31, r1

 	lpm	r20, Z+		; y1 = pgm_read_word(&RHtab[tabind]);
    1112:	45 91       	lpm	r20, Z+
 	lpm	r21, Z+
    1114:	55 91       	lpm	r21, Z+
 	lpm	r18, Z+		; y2 = pgm_read_word(&RHtab[tabind+1]);
    1116:	25 91       	lpm	r18, Z+
 	lpm	r19, Z+
    1118:	35 91       	lpm	r19, Z+
 	ldi	r22, Ref_Tab_Abstand	; 50
    111a:	62 e3       	ldi	r22, 0x32	; 50
 	sub	r22, r24		; tabres = Ref_Tab_Abstand-tabres;
    111c:	68 1b       	sub	r22, r24
;  // interpolate the table of factors
;  // RHmultip is the interpolated factor to compute capacity from load time with 470k
;; 	ldi	r23, 0x00	; 0
 	sub	r20, r18	; y1 - y2
    111e:	42 1b       	sub	r20, r18
 #if FLASHEND > 0x1fff
	sbc	r21, r19	; hi8(y1 - y2) is usually allway zero
    1120:	53 0b       	sbc	r21, r19
 #endif
 	mul	r22, r20	; lo8(tabres) * lo8(y1-y2)
    1122:	64 9f       	mul	r22, r20
 	movw	r24, r0		; r24:25 = *
    1124:	c0 01       	movw	r24, r0
 #if FLASHEND > 0x1fff
 	mul	r22, r21	; lo8(tabres) * hi8(y1-y2)
    1126:	65 9f       	mul	r22, r21
 	add	r25, r0		; r25 + lo8(*)
    1128:	90 0d       	add	r25, r0
 #endif
;; 	mul	r23, r20	; hi8(tabres) * lo8(y1*y2) , allways zero
;; 	add	r25, r0		; r25 + lo8(*)

 	eor	r1, r1
    112a:	11 24       	eor	r1, r1
 	adiw	r24, (Ref_Tab_Abstand/2)	; 25
    112c:	49 96       	adiw	r24, 0x19	; 25
 	ldi	r22, lo8(Ref_Tab_Abstand)	; 50
    112e:	62 e3       	ldi	r22, 0x32	; 50
 	ldi	r23, hi8(Ref_Tab_Abstand)	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4	; ((y1 - y2) * tabres + (Ref_Tab_Abstand/2)) / Ref_Tab_Abstand 
    1132:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
 	add	r22, r18	; + y2
    1136:	62 0f       	add	r22, r18
 	adc	r23, r19
    1138:	73 1f       	adc	r23, r19
 	sts	RHmultip+1, r23
    113a:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <RHmultip+0x1>
 	sts	RHmultip, r22
    113e:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <RHmultip>
	ldi	r23, hi8(DEFAULT_RH_FAKT)
 	sts	RHmultip, r22
 	sts	RHmultip+1, r23
#endif 
#ifdef AUTO_CAL
	ldi	r24, lo8(RefDiff)
    1142:	81 e4       	ldi	r24, 0x41	; 65
	ldi	r25, hi8(RefDiff)
    1144:	93 e0       	ldi	r25, 0x03	; 3
	ACALL	eeprom_read_byte	; (int8_t)eeprom_read_byte((uint8_t *)&RefDiff));
    1146:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	eor	r25, r25		; set zero for sign extend
    114a:	99 27       	eor	r25, r25
        sbrc	r24, 7			; minus?
    114c:	87 fd       	sbrc	r24, 7
	com	r25			; yes, set to 0xff
    114e:	90 95       	com	r25
        lds	r22, ref_mv		; ADCconfig.U_Bandgap = (ref_mv + (int8_t)eeprom_read_byte((uint8_t *)&RefDiff));
    1150:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <ref_mv>
        lds	r23, ref_mv+1
    1154:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <ref_mv+0x1>
	add	r24, r22
    1158:	86 0f       	add	r24, r22
	adc	r25, r23
    115a:	97 1f       	adc	r25, r23
        lds	r25, ref_mv+1
	add	r24, r22
        adc	r25, r23
#endif
#define U_Bandgap 2
        sts	ADCconfig+U_Bandgap+1, r25
    115c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADCconfig+0x3>
        sts	ADCconfig+U_Bandgap, r24
    1160:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADCconfig+0x2>
	sts	adc_internal_reference+1, r25		; adc_internal_reference = ADCconfig.U_Bandgap;
    1164:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <adc_internal_reference+0x1>
	sts	adc_internal_reference, r24
    1168:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <adc_internal_reference>


 	ret
    116c:	08 95       	ret

0000116e <GetRLmultip>:

 .section .text

; unsigned int GetRLmultip(unsigned int cvolt) 
GetRLmultip:
	push    r0
    116e:	0f 92       	push	r0
 	ldi	r18, hi8(RL_Tab_Beginn) 	; 1
    1170:	21 e0       	ldi	r18, 0x01	; 1
 	cpi	r24, lo8(RL_Tab_Beginn)		; 44
    1172:	8c 32       	cpi	r24, 0x2C	; 44
 	cpc	r25, r18
    1174:	92 07       	cpc	r25, r18
 	brcc	is_bigger		;if (cvolt >= RL_Tab_Beginn) 
    1176:	10 f4       	brcc	.+4      	; 0x117c <is_bigger>
        ldi	r24, lo8(RL_Tab_Beginn)		; uvolt = 0 = RL_Tab_Begin - RL_Tab_Begin
    1178:	8c e2       	ldi	r24, 0x2C	; 44
        ldi	r25, hi8(RL_Tab_Beginn)		; limit to begin of table
    117a:	91 e0       	ldi	r25, 0x01	; 1

0000117c <is_bigger>:
is_bigger:
 	subi	r24, lo8(RL_Tab_Beginn)	;  uvolt = cvolt - RL_Tab_Beginn;
    117c:	8c 52       	subi	r24, 0x2C	; 44
 	sbci	r25, hi8(RL_Tab_Beginn)	; 1
    117e:	91 40       	sbci	r25, 0x01	; 1

 	ldi	r22, lo8(RL_Tab_Abstand)	; 25
    1180:	69 e1       	ldi	r22, 0x19	; 25
 	ldi	r23, hi8(RL_Tab_Abstand)	; 0
    1182:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4 	;tabind = uvolt / RL_Tab_Abstand;
    1184:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
;  r24:25 tabres = uvolt % RL_Tab_Abstand;  // r25 allways zero
;  tabres = RL_Tab_Abstand - tabres;
 	ldi	r25, RL_Tab_Abstand	; 25
    1188:	99 e1       	ldi	r25, 0x19	; 25
 	cpi	r22, ((RL_Tab_Length/RL_Tab_Abstand)-1)	; if (tabind > ((RL_Tab_Length/RL_Tab_Abstand)-1)) 
    118a:	6b 32       	cpi	r22, 0x2B	; 43
 	brcs	is_lower 
    118c:	10 f0       	brcs	.+4      	; 0x1192 <is_lower>
	mov	r25, r24		; tabres = 0 = (RL_Tab_Abstand==tabres) - tabres
    118e:	98 2f       	mov	r25, r24
 	ldi	r22, (RL_Tab_Length/RL_Tab_Abstand)-1; tabind = (RL_Tab_Length/RL_Tab_Abstand)-1;// limit to end of table
    1190:	6b e2       	ldi	r22, 0x2B	; 43

00001192 <is_lower>:
is_lower:
 	sub	r25, r24		; tabres = RL_Tab_Abstand - tabres;
    1192:	98 1b       	sub	r25, r24

	; r22 = tabind , r25 = tabres

	LDIZ	RLtab
    1194:	ed eb       	ldi	r30, 0xBD	; 189
    1196:	f2 e0       	ldi	r31, 0x02	; 2
	add	r30, r22		; + tabind
    1198:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
    119a:	f1 1d       	adc	r31, r1
	add	r30, r22		; + tabind (word access)
    119c:	e6 0f       	add	r30, r22
	adc	r31, zero_reg
    119e:	f1 1d       	adc	r31, r1

#ifdef MEM_EEPROM
        push	r25			; save tabres
    11a0:	9f 93       	push	r25
	movw	r24,r30
    11a2:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y1 = MEM_read_word(&RLtab[tabind]);
    11a4:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	mov	r20, r24
    11a8:	48 2f       	mov	r20, r24
	adiw	r30, 1			; address of high order byte
    11aa:	31 96       	adiw	r30, 0x01	; 1
	movw	r24,r30
    11ac:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y1 = MEM_read_word(&RLtab[tabind]);
    11ae:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	mov	r21, r24
    11b2:	58 2f       	mov	r21, r24
	adiw	r30, 1			; tabind+1
    11b4:	31 96       	adiw	r30, 0x01	; 1
	movw	r24,r30
    11b6:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y2 = MEM_read_word(&RLtab[tabind+1]);
    11b8:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	mov	r18, r24
    11bc:	28 2f       	mov	r18, r24
	adiw	r30, 1			; address of high order byte
    11be:	31 96       	adiw	r30, 0x01	; 1
	movw	r24,r30
    11c0:	cf 01       	movw	r24, r30
	ACALL	eeprom_read_byte	; y2 = MEM_read_word(&RLtab[tabind+1]);
    11c2:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	mov	r19, r24
    11c6:	38 2f       	mov	r19, r24
        pop	r22			; restore tabres in r22
    11c8:	6f 91       	pop	r22
 	lpm	r19, Z+
 	mov	r22, r25
#endif
;  return ( ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand + y2); // interpolate table
;; 	ldi	r23, 0x00	; hi8(tabres) allways zero
 	sub	r20, r18	; y1 - y2
    11ca:	42 1b       	sub	r20, r18
 	sbc	r21, r19 	; maximum of 3466 need two registers
    11cc:	53 0b       	sbc	r21, r19

 	mul	r22, r20	;lo8(tabres) * lo8(y1-y2)
    11ce:	64 9f       	mul	r22, r20
 	movw	r24, r0		; r24:25 = *
    11d0:	c0 01       	movw	r24, r0
 	mul	r22, r21	;lo8(tabres) * hi8(y1-y2)
    11d2:	65 9f       	mul	r22, r21
 	add	r25, r0		; r25 + lo8(*)
    11d4:	90 0d       	add	r25, r0
;; 	mul	r23, r20	;hi8(tabres) * lo8(y1-y2) , allways zero
;; 	add	r25, r0		; r25 + lo8(*)
 	eor	r1, r1
    11d6:	11 24       	eor	r1, r1
 	adiw	r24, (RL_Tab_Abstand/2)		; 12
    11d8:	0c 96       	adiw	r24, 0x0c	; 12
 	ldi	r22, lo8(RL_Tab_Abstand)	; 25
    11da:	69 e1       	ldi	r22, 0x19	; 25
 	ldi	r23, hi8(RL_Tab_Abstand)	; 0
    11dc:	70 e0       	ldi	r23, 0x00	; 0
 	ACALL	__udivmodhi4	; ((y1 - y2) * tabres + (RL_Tab_Abstand/2)) / RL_Tab_Abstand 
    11de:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
 	add	r22, r18			; + y2
    11e2:	62 0f       	add	r22, r18
 	adc	r23, r19
    11e4:	73 1f       	adc	r23, r19
 	movw	r24, r22
    11e6:	cb 01       	movw	r24, r22
	pop	r0
    11e8:	0f 90       	pop	r0
 	ret
    11ea:	08 95       	ret

000011ec <get_log>:
 .section .text

; // get_log interpolate a table with the function -1000*log(1 - (permil/1000))
; uint16_t get_log(uint16_t permil) {
get_log:
 	push	r28
    11ec:	cf 93       	push	r28
 	push	r29
    11ee:	df 93       	push	r29

 	ldi	r18, lo8(Log_Tab_Distance)	;0x14
    11f0:	24 e1       	ldi	r18, 0x14	; 20
 	ldi	r19, hi8(Log_Tab_Distance)	;0x00	
    11f2:	30 e0       	ldi	r19, 0x00	; 0
 	movw	r22, r18
    11f4:	b9 01       	movw	r22, r18
 	call	__udivmodhi4		; tabind = permil / Log_Tab_Distance;	// index to table
    11f6:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
 	movw	r26, r24
    11fa:	dc 01       	movw	r26, r24
;  r26:27 = tabres = permil % Log_Tab_Distance;	// fraction of table distance
;  // interpolate the table of factors
;  y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
	LDIZ	LogTab;
    11fc:	ef e6       	ldi	r30, 0x6F	; 111
    11fe:	f3 e0       	ldi	r31, 0x03	; 3
        add	r30, r22
    1200:	e6 0f       	add	r30, r22
        adc	r31, r23
    1202:	f7 1f       	adc	r31, r23
        add	r30, r22
    1204:	e6 0f       	add	r30, r22
	adc	r31, r23	; &LogTab[tabind]
    1206:	f7 1f       	adc	r31, r23
 	lpm	r28, Z+		; y1 = pgm_read_word(&LogTab[tabind]);	// get the lower table value
    1208:	c5 91       	lpm	r28, Z+
 	lpm	r29, Z+
    120a:	d5 91       	lpm	r29, Z+
 	lpm	r20, Z+		; y2 = pgm_read_word(&LogTab[tabind+1]); // get the higher table value
    120c:	45 91       	lpm	r20, Z+
 	lpm	r21, Z+
    120e:	55 91       	lpm	r21, Z+
;  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
 	sub	r20, r28	;  (y2 - y1) 
    1210:	4c 1b       	sub	r20, r28
	sbc	r21, r29	;  hi8(y2 - y1) 
    1212:	5d 0b       	sbc	r21, r29
 	mul	r20, r26	; * tabres   (maximum 19)
    1214:	4a 9f       	mul	r20, r26
 	movw	r24, r0		;  r24:25 =  ((y2 - y1) * tabres )
    1216:	c0 01       	movw	r24, r0
	mul	r20, r27	; hi8(tabres) 
    1218:	4b 9f       	mul	r20, r27
	add	r25, r0
    121a:	90 0d       	add	r25, r0
	mul	r21, r26	; hi8(y2 - Y1) 
    121c:	5a 9f       	mul	r21, r26
	add	r25, r0
    121e:	90 0d       	add	r25, r0
 	eor	r1, r1
    1220:	11 24       	eor	r1, r1
 	movw	r22, r18	; Log_Tab_Distance
    1222:	b9 01       	movw	r22, r18
 	call	__udivmodhi4	;   ((y2 - y1) * tabres ) / Log_Tab_Distance
    1224:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
 	add	r22, r28	;  result = ((y2 - y1) * tabres ) / Log_Tab_Distance + y1; // interpolate
    1228:	6c 0f       	add	r22, r28
 	adc	r23, r29
    122a:	7d 1f       	adc	r23, r29
 	movw	r24, r22	; return(result);
    122c:	cb 01       	movw	r24, r22
 	pop	r29
    122e:	df 91       	pop	r29
 	pop	r28
    1230:	cf 91       	pop	r28
 	ret
    1232:	08 95       	ret

00001234 <GetESR>:
       	out	_SFR_IO_ADDR(SREG), r0;
	out	_SFR_IO_ADDR(SPL), r28;
#else
 .extern __prologue_saves__
 .extern __epilogue_restores__
	ldi	r26, 30			;
    1234:	ae e1       	ldi	r26, 0x1E	; 30
	ldi	r27, 0			;
    1236:	b0 e0       	ldi	r27, 0x00	; 0
	ldi	r30, lo8(gs(Retur2))	;
    1238:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r31, hi8(gs(Retur2))	;
    123a:	f9 e0       	ldi	r31, 0x09	; 9
	jmp	__prologue_saves__ 	;
    123c:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>

00001240 <Retur2>:

#if TP_MIN > 0
	subi	r22, TP_MIN
	subi	r24, TP_MIN
#endif
	mov	SelectLowPin, r22;
    1240:	66 2e       	mov	r6, r22
	mov	SelectHighPin, r24;
    1242:	b8 2e       	mov	r11, r24
        add	r24, r22;
    1244:	86 0f       	add	r24, r22
	std	Y+1, r24;
    1246:	89 83       	std	Y+1, r24	; 0x01

	lds	r18, PartFound;		/* if (PartFound == PART_CAPACITOR) { */
    1248:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <PartFound>
	cpi	r18, PART_CAPACITOR;	
    124c:	28 30       	cpi	r18, 0x08	; 8
; 	brne	ad_35e4;
	brne	load_max;
    124e:	59 f5       	brne	.+86     	; 0x12a6 <load_max>
	lds	r18, cap+cval_max;      /* cap_val_nF = cap.cval_max; */
    1250:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <cap+0x4>
	lds	r19, cap+cval_max+1;
    1254:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <cap+0x5>
	lds	r20, cap+cval_max+2;
    1258:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <cap+0x6>
	lds	r21, cap+cval_max+3;
    125c:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <cap+0x7>
        sbrc	r21, 7;			/* negativ bit is set */
    1260:	57 fd       	sbrc	r21, 7
	rjmp	set_high
    1262:	15 c0       	rjmp	.+42     	; 0x128e <set_high>
	lds	r17, cap+cpre_max;      /* prefix = cap.cpre_max; */
    1264:	10 91 4f 01 	lds	r17, 0x014F	; 0x80014f <cap+0x13>
	rjmp	ad_35ba;
    1268:	09 c0       	rjmp	.+18     	; 0x127c <ad_35ba>

0000126a <ad_35ac>:

ad_35ac:
	movw	r24, r20;               /* cval /= 10;          // reduce value by factor ten */
    126a:	ca 01       	movw	r24, r20
	movw	r22, r18
    126c:	b9 01       	movw	r22, r18
	ldi	r18, 0x0A; 10
    126e:	2a e0       	ldi	r18, 0x0A	; 10
	mov	r19, zero_reg
    1270:	31 2d       	mov	r19, r1
	mov	r20, zero_reg
    1272:	41 2d       	mov	r20, r1
	mov	r21, zero_reg
    1274:	51 2d       	mov	r21, r1
	call	__udivmodsi4;           /* r18:21 = r22:25  / r18:21 */
    1276:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
	subi	r17, 0xFF;              /* prefix++;            // take next decimal prefix */
    127a:	1f 5f       	subi	r17, 0xFF	; 255

0000127c <ad_35ba>:

ad_35ba:
	cpi	r17, -9;                /* while (prefix < -9) { // set cval to nF unit */
    127c:	17 3f       	cpi	r17, 0xF7	; 247
	brlt	ad_35ac;                /*  } */
    127e:	ac f3       	brlt	.-22     	; 0x126a <ad_35ac>
        brne    load_max;		/* load max value for correction */
    1280:	91 f4       	brne	.+36     	; 0x12a6 <load_max>


;	cpi	r18, lo8(900/10);       /* if (cap_val_nF < (900/10)) return(0xffff);   //capacity lower than 90 nF */
;	ldi	r22, hi8(900/10)
	cpi	r18, lo8(200/10);       /* if (cap_val_nF < (200/10)) return(0xffff);   //capacity lower than 20 nF */
    1282:	24 31       	cpi	r18, 0x14	; 20
	ldi	r22, hi8(200/10)
    1284:	60 e0       	ldi	r22, 0x00	; 0
	cpc	r19, r22
    1286:	36 07       	cpc	r19, r22
	cpc	r20, zero_reg
    1288:	41 05       	cpc	r20, r1
	cpc	r21, zero_reg
    128a:	51 05       	cpc	r21, r1
	brcc	ad_35e4
    128c:	18 f4       	brcc	.+6      	; 0x1294 <ad_35e4>

0000128e <set_high>:
set_high:
	ldi	r24, 0xff;
    128e:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, 0xff;
    1290:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	ad_exit; 
    1292:	41 c1       	rjmp	.+642    	; 0x1516 <ad_exit>

00001294 <ad_35e4>:
ad_35e4:				/* } */
	cpi	r17, -9;		/* if ((pp > -9) || (cap_val_nF > 32000)) { */
    1294:	17 3f       	cpi	r17, 0xF7	; 247
	brne	load_max;
    1296:	39 f4       	brne	.+14     	; 0x12a6 <load_max>
	ldi	r24, lo8(32000);
    1298:	80 e0       	ldi	r24, 0x00	; 0
	cp	r18, r24
    129a:	28 17       	cp	r18, r24
        ldi	r24, hi8(32000);
    129c:	8d e7       	ldi	r24, 0x7D	; 125
	cpc	r19, r24;
    129e:	38 07       	cpc	r19, r24
;	ldi	r24, hlo8(32000);
;	cpc	r20, r24;
	cpc	r20, r1;
    12a0:	41 05       	cpc	r20, r1
;	ldi	r24, hhi8(32000);
;	cpc	r21, r24;
	cpc	r20, r1;
    12a2:	41 05       	cpc	r20, r1
	brcs	store_cvn;
    12a4:	10 f0       	brcs	.+4      	; 0x12aa <store_cvn>

000012a6 <load_max>:
load_max:
	ldi	r18, lo8(32000);		/* cap_val_nF = 65000 */
    12a6:	20 e0       	ldi	r18, 0x00	; 0
	ldi	r19, hi8(32000);
    12a8:	3d e7       	ldi	r19, 0x7D	; 125

000012aa <store_cvn>:
;	ldi	r20, hlo8(32000);		/* upper word is allways zero */
;	ldi	r21, hhi8(32000);		/* upper word is allways zero */
store_cvn:
	std	Y+cap_val_nF, r18
    12aa:	2c 8b       	std	Y+20, r18	; 0x14
	std	Y+cap_val_nF+1, r19
    12ac:	3d 8b       	std	Y+21, r19	; 0x15
     /* normal ADC-speed, ADC-Clock 8us */
	ldi	r25, (1<<ADEN) | (1<<ADIF) | (1<<ADIE) | AUTO_CLOCK_DIV; /* enable ADC and Interrupt */
	mov	StartADCmsk, r25;
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#else
	ldi	r18, (1<<ADSC) | (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; /* enable and start ADC */
    12ae:	27 ed       	ldi	r18, 0xD7	; 215
	mov	StartADCmsk, r18;
    12b0:	a2 2e       	mov	r10, r18
#endif

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
	LDIZ	PinRLRHADCtab+6; 	/* LoADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.ca) | TXD_MSK; */
#else
	LDIZ	PinRLRHADCtab+3; 	/* LoADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.ca) | TXD_MSK; */
    12b2:	e4 e4       	ldi	r30, 0x44	; 68
    12b4:	f2 e0       	ldi	r31, 0x02	; 2
#endif
	add	r30, SelectLowPin;
    12b6:	e6 0d       	add	r30, r6
	adc	r31, zero_reg;
    12b8:	f1 1d       	adc	r31, r1
	lpm	r24, Z+;
    12ba:	85 91       	lpm	r24, Z+
	ori	r24, TXD_MSK;
    12bc:	80 60       	ori	r24, 0x00	; 0
	std	Y+LoADC, r24;
    12be:	8e 87       	std	Y+14, r24	; 0x0e

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
	LDIZ	PinRLRHADCtab+6; 	/* HiADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.cb) | TXD_MSK; */
#else
	LDIZ	PinRLRHADCtab+3; 	/* HiADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.cb) | TXD_MSK; */
    12c0:	e4 e4       	ldi	r30, 0x44	; 68
    12c2:	f2 e0       	ldi	r31, 0x02	; 2
#endif
	add	r30, SelectHighPin;
    12c4:	eb 0d       	add	r30, r11
	adc	r31, zero_reg;
    12c6:	f1 1d       	adc	r31, r1
	lpm	r24, Z+;
    12c8:	85 91       	lpm	r24, Z+
	ori	r24, TXD_MSK;
    12ca:	80 60       	ori	r24, 0x00	; 0
	std	Y+HiADC, r24;
    12cc:	8f 87       	std	Y+15, r24	; 0x0f

	LDIZ	PinRLRHADCtab;	/* LoPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.ca]);  //R_L mask for LowPin R_L load */
    12ce:	e1 e4       	ldi	r30, 0x41	; 65
    12d0:	f2 e0       	ldi	r31, 0x02	; 2
	add	r30, SelectLowPin;
    12d2:	e6 0d       	add	r30, r6
	adc	r31, zero_reg;
    12d4:	f1 1d       	adc	r31, r1
	lpm	LoPinR_L, Z+;
    12d6:	75 90       	lpm	r7, Z+

	LDIZ	PinRLRHADCtab;	/* HiPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.cb]);	//R_L mask for HighPin R_L load */
    12d8:	e1 e4       	ldi	r30, 0x41	; 65
    12da:	f2 e0       	ldi	r31, 0x02	; 2
	add	r30, SelectHighPin;
    12dc:	eb 0d       	add	r30, r11
	adc	r31, zero_reg;
    12de:	f1 1d       	adc	r31, r1
	lpm	HiPinR_L, Z+;
    12e0:	c5 90       	lpm	r12, Z+
	or	SelectLowPin, r25;
	//  SelectHighPin = (cap.cb | (1<<REFS1) | (0<<REFS0));	// switch ADC to HighPin, Internal Ref. 
	or	SelectHighPin, r25;
#else
	//  SelectLowPin = (cap.ca | (1<<REFS1) | (1<<REFS0));	// switch ADC to LowPin, Internal Ref. 
	ldi	r25, (1<<REFS1)|(1<<REFS0);	0xC0
    12e2:	90 ec       	ldi	r25, 0xC0	; 192
	or	SelectLowPin, r25;
    12e4:	69 2a       	or	r6, r25
	//  SelectHighPin = (cap.cb | (1<<REFS1) | (1<<REFS0));	// switch ADC to HighPin, Internal Ref. 
	or	SelectHighPin, r25;
    12e6:	b9 2a       	or	r11, r25
#endif


	// Measurement of ESR of capacitors AC Mode
	ldi	r24, 0x01; 	/* sumvolt0 = 1;	// set sum of LowPin voltage to 1 to prevent divide by zero */
    12e8:	81 e0       	ldi	r24, 0x01	; 1
	mov	r14, r24;
    12ea:	e8 2e       	mov	r14, r24
	mov	r15, zero_reg;
    12ec:	f1 2c       	mov	r15, r1
	mov	r16, zero_reg;
    12ee:	01 2d       	mov	r16, r1
	mov	r17, zero_reg;
    12f0:	11 2d       	mov	r17, r1
	std	Y+sumvolt1, r24;	/* sumvolt1 = 1;	// clear sum of HighPin voltage with current */
    12f2:	8e 83       	std	Y+6, r24	; 0x06
	//                                // offset is about (x*10*200)/34000 in 0.01 Ohm units
	std	Y+sumvolt1+1, zero_reg;
    12f4:	1f 82       	std	Y+7, r1	; 0x07
	std	Y+sumvolt1+2, zero_reg;
    12f6:	18 86       	std	Y+8, r1	; 0x08
	std	Y+sumvolt1+3, zero_reg;
    12f8:	19 86       	std	Y+9, r1	; 0x09
	std	Y+sumvolt2, zero_reg;	/* sumvolt2 = 0;	// clear sum of HighPin voltage without current */
    12fa:	1a 86       	std	Y+10, r1	; 0x0a
	std	Y+sumvolt2+1, zero_reg;
    12fc:	1b 86       	std	Y+11, r1	; 0x0b
	std	Y+sumvolt2+2, zero_reg;
    12fe:	1c 86       	std	Y+12, r1	; 0x0c
	std	Y+sumvolt2+3, zero_reg;
    1300:	1d 86       	std	Y+13, r1	; 0x0d
	std	Y+LowUpCount, zero_reg;
    1302:	18 8e       	std	Y+24, r1	; 0x18
	std	Y+HighUpCount, zero_reg;
    1304:	19 8e       	std	Y+25, r1	; 0x19
	std	Y+HighTooHigh, zero_reg;
    1306:	1b 8e       	std	Y+27, r1	; 0x1b
	std	Y+LowTooHigh, zero_reg;
    1308:	1a 8e       	std	Y+26, r1	; 0x1a
	call	EntladePins;	/* EntladePins();	// discharge capacitor */
    130a:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>
	ldi	r24, TXD_VAL;
    130e:	80 e0       	ldi	r24, 0x00	; 0
	AOUT	ADC_PORT, r24; /* ADC_PORT = TXD_VAL;	// switch ADC-Port to GND */
    1310:	88 b9       	out	0x08, r24	; 8
	sts	ADMUX, SelectLowPin;	/* ADMUX = SelectLowPin;	// set Mux input and Voltage Reference to internal 1.1V */
    1312:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#ifdef NO_AREF_CAP
	call	wait100us;			/* time for voltage stabilization */
    1316:	1c de       	rcall	.-968    	; 0xf50 <wait100us>
#else
	call	wait10ms;    		/* time for voltage stabilization with 100nF */
#endif
	/* start voltage should be negativ */
	ldd	r19, Y+HiADC;		/* ADC_DDR = HiADC;	// switch High Pin to GND */
    1318:	3f 85       	ldd	r19, Y+15	; 0x0f
	AOUT	ADC_DDR, r19;		/* switch High Pin to GND */
    131a:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, LoPinR_L	/* r7 */
    131c:	75 b8       	out	0x05, r7	; 5
	AOUT	R_DDR, LoPinR_L		/* r7 */
    131e:	74 b8       	out	0x04, r7	; 4
	ldi	r21, (HALF_PULSE_LENGTH_TICS/3)
    1320:	55 e0       	ldi	r21, 0x05	; 5

00001322 <plop1>:
plop1:
	dec	r21
    1322:	5a 95       	dec	r21
	brne	plop1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <plop1>
#if (HALF_PULSE_LENGTH_TICS % 3) > 1
	nop
#endif
#if (HALF_PULSE_LENGTH_TICS % 3) > 0
	nop
    1326:	00 00       	nop
#endif
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0 */
    1328:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0 */
    132a:	15 b8       	out	0x05, r1	; 5

	   // Measurement frequency is given by sum of ADC-Reads < 1116 Hz for normal ADC speed.
	   // ADC Sample and Hold (SH) is done 1.5 ADC clock number after real start of conversion.
	   // Real ADC-conversion is started with the next ADC-Clock (125kHz) after setting the ADSC bit.
	eor	r13, r13;			/* for(ii=0;ii<MAX_CNT;ii++) { */
    132c:	dd 24       	eor	r13, r13

0000132e <esr_loop>:
						// That will cause too high voltage without current.
	//         adcv[0] = ADCW;		// Voltage LowPin with current
	//         ADMUX = SelectHighPin;
	      /* ********* Forward direction, connect Low side with GND *********** */
esr_loop:
	ldd	r19, Y+LoADC;
    132e:	3e 85       	ldd	r19, Y+14	; 0x0e
	AOUT	ADC_DDR, r19;		/* ADC_DDR = LoADC;	// switch Low-Pin to output (GND) */
    1330:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7) */
    1332:	75 b8       	out	0x05, r7	; 5
	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7) */
    1334:	74 b8       	out	0x04, r7	; 4
	sts	ADMUX, SelectLowPin;		/* ADMUX = SelectLowPin; */
    1336:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	wdr	;				/* wdt_reset(); */
    133a:	a8 95       	wdr
;=#=	StartADCwait			/* start ADC and wait */
	StartADCwait			/* start ADC and wait */
    133c:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1340:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1344:	86 fd       	sbrc	r24, 6
    1346:	fc cf       	rjmp	.-8      	; 0x1340 <esr_loop+0x12>
	lds	adcv0L, ADCW;			/* adcv[0] = ADCW;	// Voltage LowPin reference */
    1348:	20 90 78 00 	lds	r2, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	adcv0H, ADCW+1;
    134c:	30 90 79 00 	lds	r3, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	sts	ADMUX, SelectHighPin;		/* ADMUX = SelectHighPin; */
    1350:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

	mov	r20, HiPinR_L
    1354:	4c 2d       	mov	r20, r12
	rcall	strtADC_pulse		; start ADC, generate pulse and wait 
    1356:	e3 d0       	rcall	.+454    	; 0x151e <strtADC_pulse>

	lds	r18, ADCW;		/* adcv[1] = ADCW;	// Voltage HighPin with current */
    1358:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r19, ADCW+1;
    135c:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#endif

;=======

	std	Y+adcvv1, r18;
    1360:	28 8b       	std	Y+16, r18	; 0x10
	std	Y+adcvv1+1, r19;
    1362:	39 8b       	std	Y+17, r19	; 0x11

	      /* ********* Reverse direction, connect High side with GND *********** */
	ldd	r19, Y+HiADC;		/* ADC_DDR = HiADC;	// switch High Pin to GND */
    1364:	3f 85       	ldd	r19, Y+15	; 0x0f
	AOUT	ADC_DDR, r19;		/* ADC_DDR = HiADC;	// switch High-Pin to output (GND) */
    1366:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, HiPinR_L;	/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    1368:	c5 b8       	out	0x05, r12	; 5
	AOUT	R_DDR, HiPinR_L;	/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    136a:	c4 b8       	out	0x04, r12	; 4

	wdr	;			/* wdt_reset(); */
    136c:	a8 95       	wdr
	sts	ADMUX, SelectHighPin;	/* ADMUX = SelectHighPin; */
    136e:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

;=#=	StartADCwait		/* start ADC and wait */
	StartADCwait		/* start ADC and wait */
    1372:	a0 92 7a 00 	sts	0x007A, r10	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    1376:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    137a:	86 fd       	sbrc	r24, 6
    137c:	fc cf       	rjmp	.-8      	; 0x1376 <esr_loop+0x48>

	lds	r22, ADCW;         	/* adcv[2] = ADCW;	// Reverse Reference Voltage HighPin  */
    137e:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r23, ADCW+1;
    1382:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	sts	ADMUX, SelectLowPin;	/*  ADMUX = SelectLowPin; */
    1386:	60 92 7c 00 	sts	0x007C, r6	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// ****** Polling mode big cap
	mov	r20, LoPinR_L
    138a:	47 2d       	mov	r20, r7
	rcall	strtADC_pulse		; start ADC, generate pulse and wait 
    138c:	c8 d0       	rcall	.+400    	; 0x151e <strtADC_pulse>

	lds	r20, ADCW;		/* adcv[3] = ADCW;	//  Voltage LowPin with current */
    138e:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	lds	r21, ADCW+1;
    1392:	50 91 79 00 	lds	r21, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
#ifdef ADC_Sleep_Mode
	sts	ADCSRA, StartADCmsk; 	/*  ADCSRA = StartADCmsk;	// enable ADC and Interrupt */
#endif

	AOUT	R_DDR, zero_reg; 	/* R_DDR = 0; // switch current off */
    1396:	14 b8       	out	0x04, r1	; 4

	movw	r24, r22;		/*  adcv[2] */
    1398:	cb 01       	movw	r24, r22
	add	r24, adcv0L;		/* adcv[0] + adcv[2] // add sum of both LowPin voltages with current */
    139a:	82 0d       	add	r24, r2
	adc	r25, adcv0H;
    139c:	93 1d       	adc	r25, r3

	add	r14, r24;		/* r14:17 = sumvolt0 += (adcv[0] + adcv[2]); */
    139e:	e8 0e       	add	r14, r24
	adc	r15, r25;
    13a0:	f9 1e       	adc	r15, r25
	adc	r16, zero_reg;
    13a2:	01 1d       	adc	r16, r1
	adc	r17, zero_reg;
    13a4:	11 1d       	adc	r17, r1
	std	Y+sumvolt0, r14;
    13a6:	ea 82       	std	Y+2, r14	; 0x02
	std	Y+sumvolt0+1, r15;
    13a8:	fb 82       	std	Y+3, r15	; 0x03
	std	Y+sumvolt0+2, r16;
    13aa:	0c 83       	std	Y+4, r16	; 0x04
	std	Y+sumvolt0+3, r17;
    13ac:	1d 83       	std	Y+5, r17	; 0x05
	ldd	r24, Y+adcvv1;		/* add HighPin voltages with current */
    13ae:	88 89       	ldd	r24, Y+16	; 0x10
	ldd	r25, Y+adcvv1+1; 
    13b0:	99 89       	ldd	r25, Y+17	; 0x11
	add	r24, r20;		/* adcv[1] + adcv[3] */
    13b2:	84 0f       	add	r24, r20
	adc	r25, r21;
    13b4:	95 1f       	adc	r25, r21
	ldd	r18, Y+sumvolt1;	/* sumvolt1 += (adcv[1] + adcv[3]); */
    13b6:	2e 81       	ldd	r18, Y+6	; 0x06
	ldd	r19, Y+sumvolt1+1;
    13b8:	3f 81       	ldd	r19, Y+7	; 0x07
	ldd	r22, Y+sumvolt1+2;
    13ba:	68 85       	ldd	r22, Y+8	; 0x08
	ldd	r23, Y+sumvolt1+3;
    13bc:	79 85       	ldd	r23, Y+9	; 0x09
	add	r18, r24;
    13be:	28 0f       	add	r18, r24
	adc	r19, r25;
    13c0:	39 1f       	adc	r19, r25
	adc	r22, zero_reg;
    13c2:	61 1d       	adc	r22, r1
	adc	r23, zero_reg;
    13c4:	71 1d       	adc	r23, r1
	std	Y+sumvolt1, r18;
    13c6:	2e 83       	std	Y+6, r18	; 0x06
	std	Y+sumvolt1+1, r19;
    13c8:	3f 83       	std	Y+7, r19	; 0x07
	std	Y+sumvolt1+2, r22;
    13ca:	68 87       	std	Y+8, r22	; 0x08
	std	Y+sumvolt1+3, r23;
    13cc:	79 87       	std	Y+9, r23	; 0x09

/*===================================================================================================*/
/*      Range Check for voltages  */
  	/* Y+adcvv1 is still the voltage of forward direction, r20:21 the voltage of reverse direction */
	ldi	r18, lo8(50);
    13ce:	22 e3       	ldi	r18, 0x32	; 50
	cp	r18, r20;
    13d0:	24 17       	cp	r18, r20
	cpc	zero_reg, r21;
    13d2:	15 06       	cpc	r1, r21
	brcs	is_ok1;		/* r20:21 >= 50 */
    13d4:	48 f0       	brcs	.+18     	; 0x13e8 <is_ok1>
	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7);  */
    13d6:	75 b8       	out	0x05, r7	; 5
	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7);	// switch LowPin with 680 Ohm to VCC */
	call	wait1us;			/* additional charge the capacitor */
    13d8:	74 b8       	out	0x04, r7	; 4
    13da:	c4 dd       	rcall	.-1144   	; 0xf64 <wait1us>
	AOUT	R_DDR, zero_reg; 	// switch current off
    13dc:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg; 
    13de:	15 b8       	out	0x05, r1	; 5
	ldd	r24, Y+LowUpCount; 	/* count additional load pulses at Low side */
    13e0:	88 8d       	ldd	r24, Y+24	; 0x18
	inc	r24;
    13e2:	83 95       	inc	r24
	std	Y+LowUpCount, r24;
    13e4:	88 8f       	std	Y+24, r24	; 0x18
	rjmp	is_ok1b;
    13e6:	07 c0       	rjmp	.+14     	; 0x13f6 <is_ok1b>

000013e8 <is_ok1>:
is_ok1:
	cpi	r20, lo8(1000);
    13e8:	48 3e       	cpi	r20, 0xE8	; 232
        ldi	r23, hi8(1000);
    13ea:	73 e0       	ldi	r23, 0x03	; 3
	cpc	r21, r23;
    13ec:	57 07       	cpc	r21, r23
        brcs	is_ok1b;			/* voltage reverse direction < 1000 */
    13ee:	18 f0       	brcs	.+6      	; 0x13f6 <is_ok1b>
	ldd	r24, Y+LowTooHigh; 	/* count  pulses with too high voltage at Low side */
    13f0:	8a 8d       	ldd	r24, Y+26	; 0x1a
	inc	r24;
    13f2:	83 95       	inc	r24
	std	Y+LowTooHigh, r24;
    13f4:	8a 8f       	std	Y+26, r24	; 0x1a

000013f6 <is_ok1b>:
is_ok1b:
	ldd	r24, Y+adcvv1;
    13f6:	88 89       	ldd	r24, Y+16	; 0x10
	ldd	r25, Y+adcvv1+1;
    13f8:	99 89       	ldd	r25, Y+17	; 0x11
	cp	r18, r24;
    13fa:	28 17       	cp	r18, r24
	cpc	zero_reg, r25;	/* adcvv1 >= 50 */
    13fc:	19 06       	cpc	r1, r25
	brcs	is_ok2;
    13fe:	58 f0       	brcs	.+22     	; 0x1416 <is_ok2>
	ldd	r19, Y+LoADC;
    1400:	3e 85       	ldd	r19, Y+14	; 0x0e
	AOUT	ADC_DDR, r19;		/* ADC_DDR = LoADC;	// switch Low-Pin to output (GND) */
    1402:	37 b9       	out	0x07, r19	; 7
	AOUT	R_PORT, HiPinR_L;	/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
	AOUT	R_DDR, HiPinR_L;	/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    1404:	c5 b8       	out	0x05, r12	; 5
	call	wait1us;			/* additional charge the capacitor */
    1406:	c4 b8       	out	0x04, r12	; 4
    1408:	ad dd       	rcall	.-1190   	; 0xf64 <wait1us>
;##	DelayBigCap;			/* wait the time defined by macro */
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0; // switch current off,  SH is 1.5 ADC clock behind real start */
    140a:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0; */
    140c:	15 b8       	out	0x05, r1	; 5
	ldd	r24, Y+HighUpCount;	/* count additional load pulses at High side */
    140e:	89 8d       	ldd	r24, Y+25	; 0x19
	inc	r24;
    1410:	83 95       	inc	r24
	std	Y+HighUpCount, r24;
    1412:	89 8f       	std	Y+25, r24	; 0x19
	rjmp	is_ok2b;
    1414:	07 c0       	rjmp	.+14     	; 0x1424 <is_ok2b>

00001416 <is_ok2>:
is_ok2:
	cpi	r24, lo8(1000);
    1416:	88 3e       	cpi	r24, 0xE8	; 232
        ldi	r23, hi8(1000);
    1418:	73 e0       	ldi	r23, 0x03	; 3
	cpc	r25, r23;
    141a:	97 07       	cpc	r25, r23
        brcs	is_ok2b;			/* voltage forward direction < 1000 */
    141c:	18 f0       	brcs	.+6      	; 0x1424 <is_ok2b>
	ldd	r24, Y+HighTooHigh; 	/* count  pulses with too high voltage at High side */
    141e:	8b 8d       	ldd	r24, Y+27	; 0x1b
	inc	r24;
    1420:	83 95       	inc	r24
	std	Y+HighTooHigh, r24;
    1422:	8b 8f       	std	Y+27, r24	; 0x1b

00001424 <is_ok2b>:
is_ok2b:
/*===================================================================================================*/
	inc	r13;			/* for(    ;ii<MAX_CNT;ii++)  */
    1424:	d3 94       	inc	r13
	mov	r21, r13;
    1426:	5d 2d       	mov	r21, r13
	cpi	r21, MAX_CNT;
    1428:	5f 3f       	cpi	r21, 0xFF	; 255
	breq	ad_38ac;
    142a:	49 f0       	breq	.+18     	; 0x143e <ad_38ac>
#if FLASHEND > 0x3fff
  /* use additional 470k only with processors with more than 16k */
        cpi	r21, MAX_CNT/2;
    142c:	5f 37       	cpi	r21, 0x7F	; 127
        brne	jesr_loop
    142e:	31 f4       	brne	.+12     	; 0x143c <jesr_loop>
	add	r30, r21;
	adc	r31, zero_reg;
	lpm	r21, Z+;
	add	LoPinR_L, r21		; enable also the 470k resistor
 #else
	mov	r21, HiPinR_L
    1430:	5c 2d       	mov	r21, r12
	add	r21, r21	; quick and dirty: usually is double HiPinR_H
    1432:	55 0f       	add	r21, r21
	add	HiPinR_L, r21
    1434:	c5 0e       	add	r12, r21
	mov	r21, LoPinR_L
    1436:	57 2d       	mov	r21, r7
	add	r21, r21	; quick and dirty: usually is double LoPinR_H
    1438:	55 0f       	add	r21, r21
	add	LoPinR_L, r21
    143a:	75 0e       	add	r7, r21

0000143c <jesr_loop>:
 #endif
jesr_loop:
#endif
	rjmp	esr_loop;		/* } // end for */
    143c:	78 cf       	rjmp	.-272    	; 0x132e <esr_loop>

0000143e <ad_38ac>:

#if RRpinMI == PIN_RM
	ldi	r18, lo8(PIN_RM*10);
	ldi	r19, hi8(PIN_RM*10);
#else
	lds	r4, RRpinMI;		/*  pin_rmi */
    143e:	40 90 17 01 	lds	r4, 0x0117	; 0x800117 <pin_rmi>
	lds	r5, RRpinMI+1;
    1442:	50 90 18 01 	lds	r5, 0x0118	; 0x800118 <pin_rmi+0x1>
	add	r4, r4;		RRpinMI*2
    1446:	44 0c       	add	r4, r4
	adc	r5, r5;
    1448:	55 1c       	adc	r5, r5
	movw	r18, r4;
    144a:	92 01       	movw	r18, r4
	ldi	r30, 4;
    144c:	e4 e0       	ldi	r30, 0x04	; 4

0000144e <ad_2r>:
ad_2r:
	add	r18, r4;		+ 4*(2*RRpinMI)
    144e:	24 0d       	add	r18, r4
	adc	r19, r5;
    1450:	35 1d       	adc	r19, r5
	dec	r30;
    1452:	ea 95       	dec	r30
	brne	ad_2r;			add next (2*RRpinMI)
    1454:	e1 f7       	brne	.-8      	; 0x144e <ad_2r>
#endif
	movw	r4, r18;		/* r4:5 = 10 * RRpinMI */
    1456:	29 01       	movw	r4, r18
	movw	r10, r14;		/* r10:13 = r14:17 = sumvolt0 */
    1458:	57 01       	movw	r10, r14
	movw	r12, r16;
    145a:	68 01       	movw	r12, r16

	ldd	r6, Y+sumvolt1;
    145c:	6e 80       	ldd	r6, Y+6	; 0x06
	ldd	r7, Y+sumvolt1+1;
    145e:	7f 80       	ldd	r7, Y+7	; 0x07
	ldd	r8, Y+sumvolt1+2;
    1460:	88 84       	ldd	r8, Y+8	; 0x08
	ldd	r9, Y+sumvolt1+3;
    1462:	99 84       	ldd	r9, Y+9	; 0x09
/* ############################################################ */
	lds	r18, PartFound;		/* if (PartFound == PART_CAPACITOR) { */
    1464:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <PartFound>
	cpi	r18, PART_CAPACITOR;	
    1468:	28 30       	cpi	r18, 0x08	; 8
 	brne	no_sub;			/* it is not a capacitor */
    146a:	c1 f4       	brne	.+48     	; 0x149c <no_sub>
/* Aproximation of 5000*(1 - exp(13.5e-6/(cap_val_nF*1.e-9*(0.1*(PIN_RM+PIN_RP+R_L_VAL)))) - 2500*(1 - exp(-27e-6/(cap_val_nF*1.e-9*(0.1*(PIN_RM+PIN_RP+R_L_VAL))))) */
/*  is done by ((6744116/(PIN_RM+PIN_RP+R_L_VAL))*(6744116/(PIN_RM+PIN_RP+R_L_VAL))) / (cap_val_nF * (cap_val_nF + (137180/(PIN_RM+PIN_RP+R_L_VAL)))) */
/*  is done by 872520 / (cap_val_nF * (cap_val_nF + 19)) */
; #define FAKTOR_ESR (9537620/(PIN_RM+PIN_RP+R_L_VAL))

	ldd	r22, Y+cap_val_nF;	/* sumvolt1 -= (1745098UL*MAX_CNT) / (cap_val_nF * (cap_val_nF + 19)); */
    146c:	6c 89       	ldd	r22, Y+20	; 0x14
	ldd	r23, Y+cap_val_nF+1;
    146e:	7d 89       	ldd	r23, Y+21	; 0x15
;	ldd	r24, Y+cap_val_nF+2;
	mov	r24, r1			/* upper bits of cap_val_nF are allway zero */
    1470:	81 2d       	mov	r24, r1
;	ldd	r25, Y+cap_val_nF+3;
	mov	r25, r1			/* upper bits of cap_val_nF are allway zero */
    1472:	91 2d       	mov	r25, r1
;#define FAKTOR_ESR (780000/(PIN_RM+PIN_RP+R_L_VAL))	/* 127 */
 #else
;#define FAKTOR_ESR (920000/(PIN_RM+PIN_RP+R_L_VAL))	/* 127 */
;#define CAP_OFFSET (433200/(PIN_RM+PIN_RP+R_L_VAL))	/* 60 nF */
 #endif
      	subi	r22, lo8(CAP_OFFSET); 0xED; 237
    1474:	65 50       	subi	r22, 0x05	; 5
      	sbci	r23, hi8(CAP_OFFSET); 0xFF; 255
    1476:	70 40       	sbci	r23, 0x00	; 0
      	sbci	r24, hlo8(CAP_OFFSET); 0xFF; 255
    1478:	80 40       	sbci	r24, 0x00	; 0
      	sbci	r25, hhi8(CAP_OFFSET); 0xFF; 255
    147a:	90 40       	sbci	r25, 0x00	; 0
	movw	r18, r22;		/* r18:21 = r22:25 = (cap_val_nF-60); */
    147c:	9b 01       	movw	r18, r22
	movw	r20, r24;
    147e:	ac 01       	movw	r20, r24
	call	__mulsi3;		/* (cap_val_nF - 60) * (cap_val_nF - 60) */
    1480:	0e 94 a9 3c 	call	0x7952	; 0x7952 <__mulsi3>

       	movw	r18, r22;
    1484:	9b 01       	movw	r18, r22
       	movw	r20, r24;
    1486:	ac 01       	movw	r20, r24
       	ldi	r22, lo8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x36; 54
    1488:	60 e7       	ldi	r22, 0x70	; 112
       	ldi	r23, hi8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x29; 41
    148a:	79 e7       	ldi	r23, 0x79	; 121
       	ldi	r24, hlo8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x86; 134
    148c:	86 e1       	ldi	r24, 0x16	; 22
       	ldi	r25, hhi8(FAKTOR_ESR*FAKTOR_ESR*MAX_CNT); 0x1A; 26
    148e:	90 e0       	ldi	r25, 0x00	; 0
	call	__udivmodsi4;
    1490:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
	sub	r6, r18
    1494:	62 1a       	sub	r6, r18
	sbc	r7, r19
    1496:	73 0a       	sbc	r7, r19
	sbc	r8, r20
    1498:	84 0a       	sbc	r8, r20
	sbc	r9, r21
    149a:	95 0a       	sbc	r9, r21

0000149c <no_sub>:
no_sub:				/* } */
/* ############################################################ */

	cp	r10, r6;		/* if (sumvolt1 > sumvolt0) {  */
    149c:	a6 14       	cp	r10, r6
	cpc	r11, r7;
    149e:	b7 04       	cpc	r11, r7
	cpc	r12, r8;
    14a0:	c8 04       	cpc	r12, r8
	cpc	r13, r9;
    14a2:	d9 04       	cpc	r13, r9
	brcc	ad_396c;
    14a4:	28 f4       	brcc	.+10     	; 0x14b0 <ad_396c>
	sub	r6, r10;		/* sumvolt1 -= sumvolt0;	// difference HighPin - LowPin Voltage with current */
    14a6:	6a 18       	sub	r6, r10
	sbc	r7, r11;
    14a8:	7b 08       	sbc	r7, r11
	sbc	r8, r12;
    14aa:	8c 08       	sbc	r8, r12
	sbc	r9, r13;
    14ac:	9d 08       	sbc	r9, r13
	rjmp	ad_3972;		/* } else { */
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <ad_3972>

000014b0 <ad_396c>:
ad_396c:
	eor	r6, r6;			/* sumvolt1 = 0; */
    14b0:	66 24       	eor	r6, r6
	eor	r7, r7
    14b2:	77 24       	eor	r7, r7
	movw	r8, r6
    14b4:	43 01       	movw	r8, r6

000014b6 <ad_3972>:
	ldi	r20, '#';
	ldi	r18, 4	;
	call	DisplayValue16;
	call	wait2s
#endif
	movw	r22, r4
    14b6:	b2 01       	movw	r22, r4
	ldi	r24, 0x00;
    14b8:	80 e0       	ldi	r24, 0x00	; 0
	ldi	r25, 0x00;	/*  r22:25 = 10 * (unsigned long)RRpinMI)  */
    14ba:	90 e0       	ldi	r25, 0x00	; 0
	      // mean voltage at the capacitor is higher with current
	      // sumvolt0 is the sum of voltages at LowPin, caused by output resistance of Port
	      // RRpinMI is the port output resistance in 0.1 Ohm units.
	      // we scale up the difference voltage with 10 to get 0.01 Ohm units of ESR
		/* esrvalue = (sumvolt1 * 10 * (unsigned long)RRpinMI) / sumvolt0; */
	movw	r18, r6;		/* r18:21 = r6:9 = sumvolt1 */
    14bc:	93 01       	movw	r18, r6
	movw	r20, r8;
    14be:	a4 01       	movw	r20, r8
	call	__mulsi3;		/* r22:25 = r22:25 * r18:21 */
    14c0:	0e 94 a9 3c 	call	0x7952	; 0x7952 <__mulsi3>
	movw	r18, r10;	/* r18:21 = r10:13 = sumvolt0 */
    14c4:	95 01       	movw	r18, r10
	movw	r20, r12;
    14c6:	a6 01       	movw	r20, r12
	call	__udivmodsi4;		/* r18:21 = r22:25  / r18:21 */
    14c8:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
	ldi	r24, lo8(EE_ESR_ZEROtab);	/* esr0 = (int8_t)eeprom_read_byte(&EE_ESR_ZEROtab[lopin+hipin]); */
    14cc:	87 e1       	ldi	r24, 0x17	; 23
	ldi	r25, hi8(EE_ESR_ZEROtab);
    14ce:	93 e0       	ldi	r25, 0x03	; 3
        ldd	r23, Y+1;
    14d0:	79 81       	ldd	r23, Y+1	; 0x01
        add	r24, r23;
    14d2:	87 0f       	add	r24, r23
	adc	r25, zero_reg;
    14d4:	91 1d       	adc	r25, r1
	call	eeprom_read_byte;
    14d6:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
	mov	r6, r24;
    14da:	68 2e       	mov	r6, r24
	movw	r24,r18;	/* r24:25 = r18:19 = esrvalue */
    14dc:	c9 01       	movw	r24, r18
	ldi	r22, 16;
    14de:	60 e1       	ldi	r22, 0x10	; 16
	ldi	r23, 0;
    14e0:	70 e0       	ldi	r23, 0x00	; 0
	call	__udivmodhi4	/* r22:23 = r24:25 / r22:23 */
    14e2:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
	add	r18, r22;	/* esrvalue += esrvalue / 16; */
    14e6:	26 0f       	add	r18, r22
	adc	r19, r23;
    14e8:	37 1f       	adc	r19, r23
	movw	r24,r18;	/* esrvalue */
    14ea:	c9 01       	movw	r24, r18
	cp	r6, r24;		/* if (esrvalue > esr0) esrvalue -= esr0; */
    14ec:	68 16       	cp	r6, r24
	cpc	zero_reg, r25;
    14ee:	19 06       	cpc	r1, r25
	brcc	esr_too_less;
    14f0:	18 f4       	brcc	.+6      	; 0x14f8 <esr_too_less>
	sub	r24, r6;		/* - esr0 */ 
    14f2:	86 19       	sub	r24, r6
	sbc	r25, zero_reg;
    14f4:	91 09       	sbc	r25, r1
	rjmp	ad_exit;
    14f6:	0f c0       	rjmp	.+30     	; 0x1516 <ad_exit>

000014f8 <esr_too_less>:
esr_too_less:
#ifdef AUTO_CAL
        subi	r24, lo8(-R_LIMIT_TO_UNCALIBRATED);		/* + 0.20 Ohm */
    14f8:	8c 5e       	subi	r24, 0xEC	; 236
        sbci	r25, hi8(-R_LIMIT_TO_UNCALIBRATED);		/* esrvalue + 20 */
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
	cp	r24, r6;		/* if ((esrvalue+20) < esr0) ; */
    14fc:	86 15       	cp	r24, r6
	cpc	r25, zero_reg;
    14fe:	91 05       	cpc	r25, r1
	brcc	esr_too_less2;
    1500:	40 f4       	brcc	.+16     	; 0x1512 <esr_too_less2>
	ldd	r24, Y+cap_val_nF;	/* mark only, if cap_val_nF > 4500 */
    1502:	8c 89       	ldd	r24, Y+20	; 0x14
	ldd     r25, Y+cap_val_nF+1;
    1504:	9d 89       	ldd	r25, Y+21	; 0x15
;	ldd	r26, Y+cap_val_nF+2;	/* the upper bits (cap_val_nF+2|3) are always zero */ 
	cpi	r24, lo8(4500);
    1506:	84 39       	cpi	r24, 0x94	; 148
	ldi	r24, hi8(4500);
    1508:	81 e1       	ldi	r24, 0x11	; 17
	cpc	r25, r24;
    150a:	98 07       	cpc	r25, r24
	brcs	esr_too_less2;
    150c:	10 f0       	brcs	.+4      	; 0x1512 <esr_too_less2>
	call	mark_as_uncalibrated;
    150e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <mark_as_uncalibrated>

00001512 <esr_too_less2>:
/*	ldi	r24,'<'; */
/*	call	lcd_data; */
esr_too_less2:
#endif
	mov	r24, zero_reg;
    1512:	81 2d       	mov	r24, r1
	mov	r25, zero_reg;
    1514:	91 2d       	mov	r25, r1

00001516 <ad_exit>:
	pop	r4;
	pop	r3;
	pop	r2;
	ret;
#else
	adiw	r28, 30
    1516:	6e 96       	adiw	r28, 0x1e	; 30
	ldi	r30, 18
    1518:	e2 e1       	ldi	r30, 0x12	; 18
	jmp	__epilogue_restores__
    151a:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>

0000151e <strtADC_pulse>:
    delay to pin high: lds,sbrc,sts and out Instructions are 7 clock tics */
  #define PIN_HIGH_DELAY (6+OUT_DELAY + 3 + (F_CPU_HZ/4000000))
 #endif
 #define WAST_TICS (((TICS_PER_ADC_CLOCK*5)/2) - HALF_PULSE_LENGTH_TICS - PIN_HIGH_DELAY)
#else
	sts	TCCR1B, r1		; stop counter1
    151e:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	sts	TCCR1A, r1		; TCCR1A = 0 , normal port operation
    1522:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	sts	TIMSK1, r1		; disable all timer1 interrupts
    1526:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	sts	OCR1BH, r1		; OCR!B = 0
    152a:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
	sts	OCR1BL, r1
    152e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
	ldi	r21, (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1)
    1532:	57 e0       	ldi	r21, 0x07	; 7
	AOUT	TIFR1, r21			; clear flags
    1534:	56 bb       	out	0x16, r21	; 22
	ldi	r21, 0xff
    1536:	5f ef       	ldi	r21, 0xFF	; 255
	sts	TCNT1H, r21		; TCNT1 = -1
    1538:	50 93 85 00 	sts	0x0085, r21	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	sts	TCNT1L, r21
    153c:	50 93 84 00 	sts	0x0084, r21	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	ldi	r21, (1<<ADTS2) | (1<<ADTS0)	; Start ADC with counter1 compare B
    1540:	55 e0       	ldi	r21, 0x05	; 5
	sts	ADCSRB, r21
    1542:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
	ldi	r21, (1<<ADEN) | (1<<ADATE) | (1<<ADIF) | AUTO_CLOCK_DIV;	/* enable ADC */
    1546:	57 eb       	ldi	r21, 0xB7	; 183
	sts	ADCSRA, r21;		/* ADCSRA = (1<<ADEN) | (1<<ADSC) | (1<<ADIF) | AUTO_CLOCK_DIV; // enable ADC */
    1548:	50 93 7a 00 	sts	0x007A, r21	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	ldi	r21, (1<<CS10) 
    154c:	51 e0       	ldi	r21, 0x01	; 1
	sts	TCCR1B, r21		; Start Counter 1 with full speed
    154e:	50 93 81 00 	sts	0x0081, r21	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 #define PIN_HIGH_DELAY (OUT_DELAY - 5 + (F_CPU_HZ/4000000))
 #define WAST_TICS ((TICS_PER_ADC_CLOCK*2) - HALF_PULSE_LENGTH_TICS - PIN_HIGH_DELAY)
#endif
; additional delay to the start of current pulse
	ldi	r21, (WAST_TICS/3)
    1552:	5f e4       	ldi	r21, 0x4F	; 79

00001554 <wlop1>:
wlop1:
	dec	r21
    1554:	5a 95       	dec	r21
	brne	wlop1
    1556:	f1 f7       	brne	.-4      	; 0x1554 <wlop1>
#if (WAST_TICS % 3) > 1
	nop
    1558:	00 00       	nop
#endif
#if (WAST_TICS % 3) > 0
	nop
    155a:	00 00       	nop
#endif
	AOUT	R_PORT, r20;		/* R_PORT = HiPinR_L (r12);	// switch R-Port to VCC */
    155c:	45 b9       	out	0x05, r20	; 5
	AOUT	R_DDR, r20;		/* R_DDR = HiPinR_L (r12);	// switch R_L port for HighPin to output (VCC) */
    155e:	44 b9       	out	0x04, r20	; 4
;	AOUT	R_PORT, LoPinR_L;	/* R_PORT = LoPinR_L (r7) ; */
;	AOUT	R_DDR, LoPinR_L;	/* R_DDR = LoPinR_L (r7) ;	// switch LowPin with 680 Ohm to VCC */
#define FULL_PULSE_LENGTH_TICS ((HALF_PULSE_LENGTH_TICS*2)+(MHZ_CPU/14))
	ldi	r21, (FULL_PULSE_LENGTH_TICS/3)
    1560:	5b e0       	ldi	r21, 0x0B	; 11

00001562 <plop2>:
plop2:
	dec	r21
    1562:	5a 95       	dec	r21
	brne	plop2
    1564:	f1 f7       	brne	.-4      	; 0x1562 <plop2>
	nop
#endif
#if (FULL_PULSE_LENGTH_TICS % 3) > 0
	nop
#endif
	AOUT	R_DDR, zero_reg;	/* R_DDR = 0; // switch current off,  SH is 1.5 ADC clock behind real start */
    1566:	14 b8       	out	0x04, r1	; 4
	AOUT	R_PORT, zero_reg;	/* R_PORT = 0; */
    1568:	15 b8       	out	0x05, r1	; 5
#ifndef WITHOUT_CNT_START
	sts	TCCR1B, r1		; stop counter1
    156a:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>

0000156e <wadfin2>:
#endif

wadfin2:
	lds	r24, ADCSRA;		/* while (ADCSRA&(1<<ADSC));	// wait for conversion finished */
    156e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	sbrs	r24, ADIF;
    1572:	84 ff       	sbrs	r24, 4
	rjmp	wadfin2;
    1574:	fc cf       	rjmp	.-8      	; 0x156e <wadfin2>
	sts	ADCSRA, r24		; clear flags
    1576:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	ret
    157a:	08 95       	ret

0000157c <lcd_spaces>:
   lcd_data(temp + '1' + TP_OFFSET - TP_MIN);
}

/* ******************************************************************************* */
// send space characters to LCD
void lcd_spaces(int8_t nn) {
    157c:	cf 93       	push	r28
    157e:	c8 2f       	mov	r28, r24
   while (nn > 0) {
    1580:	1c 16       	cp	r1, r28
    1582:	14 f0       	brlt	.+4      	; 0x1588 <lcd_spaces+0xc>
     lcd_space();	// output one space to LCD and UART
     nn--;
   }
}
    1584:	cf 91       	pop	r28
    1586:	08 95       	ret
     lcd_space();	// output one space to LCD and UART
    1588:	df db       	rcall	.-2114   	; 0xd48 <lcd_space>
     nn--;
    158a:	c1 50       	subi	r28, 0x01	; 1
    158c:	f9 cf       	rjmp	.-14     	; 0x1580 <lcd_spaces+0x4>

0000158e <lcd_set_cursor>:
/* ************************************************************************************** */
/* Set the character position to x,y , where x specifies the character number in a text line. */
/* The y position is the page address (8 line units).                                     */
/* For most controllers the y position must be increased by (Height + 7) / 8 for the next text line */
void lcd_set_cursor(uint8_t y, uint8_t x) {
    _lcd_column = x;
    158e:	60 93 09 01 	sts	0x0109, r22	; 0x800109 <_lcd_column>
#if (LCD_GRAPHIC_TYPE != 0)
   //move to the specified position (depends on used font)
   _page = y;
    1592:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <_page>
   lcd_text_line = y / PAGES_PER_LINE;
    1596:	86 95       	lsr	r24
    1598:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>
    // The pixel memory is greater as the display window.
    // For example the SPL501 controller has 132x65 dot matrix memory
    // LCD_ST7565_H_OFFSET specifies the offset of the 128 pixel of the display window.
   _xpos = (x * FONT_H_SPACE);
    159c:	66 0f       	add	r22, r22
    159e:	66 0f       	add	r22, r22
    15a0:	66 0f       	add	r22, r22
    15a2:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_xpos>
 #endif
   } else {
     lcd_command((uint8_t)(CMD_SetDDRAMAddress + LCD_Row1 + x));
   }
#endif
}
    15a6:	08 95       	ret

000015a8 <lcd_line1>:
   lcd_text_line = 0;
    15a8:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd_text_line>
   lcd_set_cursor(0 * PAGES_PER_LINE,0);
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	80 e0       	ldi	r24, 0x00	; 0
    15b0:	ee cf       	rjmp	.-36     	; 0x158e <lcd_set_cursor>
}
    15b2:	08 95       	ret

000015b4 <lcd_line2>:
   lcd_text_line = 1;
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>
   lcd_set_cursor(1 * PAGES_PER_LINE,0);
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	82 e0       	ldi	r24, 0x02	; 2
    15be:	e7 cf       	rjmp	.-50     	; 0x158e <lcd_set_cursor>
}
    15c0:	08 95       	ret

000015c2 <lcd_line3>:
   lcd_text_line = 2;
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>
   lcd_set_cursor(2 * PAGES_PER_LINE,0);
    15c8:	60 e0       	ldi	r22, 0x00	; 0
    15ca:	84 e0       	ldi	r24, 0x04	; 4
    15cc:	e0 cf       	rjmp	.-64     	; 0x158e <lcd_set_cursor>
}
    15ce:	08 95       	ret

000015d0 <lcd_line4>:
   lcd_text_line = 3;
    15d0:	83 e0       	ldi	r24, 0x03	; 3
    15d2:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>
   lcd_set_cursor(3 * PAGES_PER_LINE,0);
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	86 e0       	ldi	r24, 0x06	; 6
    15da:	d9 cf       	rjmp	.-78     	; 0x158e <lcd_set_cursor>
}
    15dc:	08 95       	ret

000015de <lcd_save_position>:

#if FLASHEND > 0x1fff
/* ************************************************************************************** */
uint8_t lcd_save_position(void) {
 last_text_column = _lcd_column;
    15de:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>
    15e2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <last_text_column>
 last_text_line = lcd_text_line;
    15e6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd_text_line>
    15ea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <last_text_line>
 return(last_text_line);
}
    15ee:	08 95       	ret

000015f0 <lcd_restore_position>:
/* ************************************************************************************** */
void lcd_restore_position(void) {
 lcd_set_cursor((uint8_t)last_text_line * PAGES_PER_LINE, (uint8_t)(last_text_column));
    15f0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <last_text_line>
    15f4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <last_text_column>
    15f8:	88 0f       	add	r24, r24
    15fa:	c9 cf       	rjmp	.-110    	; 0x158e <lcd_set_cursor>
}
    15fc:	08 95       	ret

000015fe <lcd_write_word>:
 uart_putc(' ');
}
#endif
/* ******************************************************************************* */
#if (LCD_GRAPHIC_TYPE != 0)
void lcd_write_word(unsigned int xx) {
    15fe:	cf 93       	push	r28
    1600:	c8 2f       	mov	r28, r24
    1602:	69 2f       	mov	r22, r25
 lcd_write_data(xx>>8);		// send upper bits
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	4e db       	rcall	.-2404   	; 0xca4 <_lcd_hw_write>
 lcd_write_data(xx&0xff);	// send lower bits
    1608:	6c 2f       	mov	r22, r28
    160a:	81 e0       	ldi	r24, 0x01	; 1
    160c:	4b db       	rcall	.-2410   	; 0xca4 <_lcd_hw_write>
}
    160e:	cf 91       	pop	r28
    1610:	08 95       	ret

00001612 <lcd_command>:
 wdt_reset();
} /* end lcd_data() */
 
// sends a command to the LCD
 
void lcd_command(unsigned char temp1) {
    1612:	68 2f       	mov	r22, r24
	_lcd_hw_write(0x00,temp1);
    1614:	80 e0       	ldi	r24, 0x00	; 0
    1616:	46 cb       	rjmp	.-2420   	; 0xca4 <_lcd_hw_write>
#if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306) || (LCD_ST_TYPE == 7108) || (LCD_ST_TYPE == 7920) || (LCD_ST_TYPE == 8812) || (LCD_ST_TYPE == 8814) || (LCD_ST_TYPE == 7735) || (LCD_ST_TYPE == 9163) || (LCD_ST_TYPE == 9341) || (LCD_ST_TYPE == 1327))
 ;
#else
	wait50us();		// wait at least 50us after every instruction for character LCD
#endif
}
    1618:	08 95       	ret

0000161a <lcd_clear>:
#endif

/* ******************************************************************************* */
// send the command to clear the display 
 
void lcd_clear(void) {
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
   unsigned char count;
 #else
   unsigned int count;
 #endif

   lcd_command(CMD_CASET);
    161e:	8a e2       	ldi	r24, 0x2A	; 42
    1620:	f8 df       	rcall	.-16     	; 0x1612 <lcd_command>
    lcd_write_word(0);	// set start column
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	eb df       	rcall	.-42     	; 0x15fe <lcd_write_word>
    lcd_write_word(SCREEN_WIDTH);	// set end column
    1628:	80 ea       	ldi	r24, 0xA0	; 160
    162a:	90 e0       	ldi	r25, 0x00	; 0
   lcd_command(CMD_RASET);
    162c:	e8 df       	rcall	.-48     	; 0x15fe <lcd_write_word>
    162e:	8b e2       	ldi	r24, 0x2B	; 43
    lcd_write_word(0);	// set start row
    1630:	f0 df       	rcall	.-32     	; 0x1612 <lcd_command>
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	80 e0       	ldi	r24, 0x00	; 0
    lcd_write_word(SCREEN_HEIGHT + LCD_ST7565_V_OFFSET);	// set end row
    1636:	e3 df       	rcall	.-58     	; 0x15fe <lcd_write_word>
    1638:	80 e8       	ldi	r24, 0x80	; 128
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	e0 df       	rcall	.-64     	; 0x15fe <lcd_write_word>
   lcd_command(CMD_RAMWR);	// write data to RAM
    163e:	8c e2       	ldi	r24, 0x2C	; 44
    1640:	e8 df       	rcall	.-48     	; 0x1612 <lcd_command>
    1642:	c0 e8       	ldi	r28, 0x80	; 128
   
   for (count = 0; count < (SCREEN_HEIGHT + LCD_ST7565_V_OFFSET); count++) {
     wdt_reset();
    1644:	a8 95       	wdr
    1646:	d0 ea       	ldi	r29, 0xA0	; 160
     for (p = 0; p < SCREEN_WIDTH; p++) {
 #ifdef LCD_CHANGE_COLOR
       lcd_write_word(lcd_bg_color.w);		// clear 5 red / 6 green  / 5 blue pixels
 #else
       lcd_write_word(LCD_BG_COLOR);		// clear 5 red / 6 green / 5 blue pixels
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	d8 df       	rcall	.-80     	; 0x15fe <lcd_write_word>
     for (p = 0; p < SCREEN_WIDTH; p++) {
    164e:	d1 50       	subi	r29, 0x01	; 1
    1650:	d9 f7       	brne	.-10     	; 0x1648 <lcd_clear+0x2e>
   for (count = 0; count < (SCREEN_HEIGHT + LCD_ST7565_V_OFFSET); count++) {
    1652:	c1 50       	subi	r28, 0x01	; 1
    1654:	b9 f7       	brne	.-18     	; 0x1644 <lcd_clear+0x2a>
     }
#else
   lcd_command(CMD_CLEAR_DISPLAY);
   wait_about10ms();
#endif
   lcd_line1();			// set cursor to Line1 Column 1, (only for OLED-Display)
    1656:	a8 df       	rcall	.-176    	; 0x15a8 <lcd_line1>
    1658:	df 91       	pop	r29
}  /* end lcd_clear() */
    165a:	cf 91       	pop	r28
    165c:	08 95       	ret

0000165e <lcd_init>:
    165e:	58 98       	cbi	0x0b, 0	; 11
   HW_LCD_EN_PORT  &= ~_BV(HW_LCD_EN_PIN);
    1660:	5a 98       	cbi	0x0b, 2	; 11
   HW_LCD_B0_PORT  &= ~_BV(HW_LCD_B0_PIN);
    1662:	5b 98       	cbi	0x0b, 3	; 11
   HW_LCD_CE_PORT  &= ~_BV(HW_LCD_CE_PIN);  // LCD CE to low
    1664:	5d 98       	cbi	0x0b, 5	; 11
   HW_LCD_RES_DDR  |= _BV(HW_LCD_RES_PIN); // LCD RESET is Output
    1666:	50 9a       	sbi	0x0a, 0	; 10
   HW_LCD_EN_DDR   |= _BV(HW_LCD_EN_PIN);  // LCD SCL is Output
    1668:	52 9a       	sbi	0x0a, 2	; 10
   HW_LCD_B0_DDR   |= _BV(HW_LCD_B0_PIN);  // LCD SI is Output
    166a:	53 9a       	sbi	0x0a, 3	; 10
   HW_LCD_CE_DDR   |= _BV(HW_LCD_CE_PIN);  // LCD CE is Output
    166c:	55 9a       	sbi	0x0a, 5	; 10
   wait10us();
    166e:	75 dc       	rcall	.-1814   	; 0xf5a <wait10us>
   HW_LCD_CE_PORT  |= _BV(HW_LCD_CE_PIN);   // set CS to 1, unselected
    1670:	5d 9a       	sbi	0x0b, 5	; 11
   HW_LCD_CE_DDR   |= _BV(HW_LCD_CE_PIN);  // LCD CS is Output
    1672:	55 9a       	sbi	0x0a, 5	; 10
   HW_LCD_RS_PORT  &= ~_BV(HW_LCD_RS_PIN);
    1674:	59 98       	cbi	0x0b, 1	; 11
   HW_LCD_RS_DDR   |= _BV(HW_LCD_RS_PIN);  // LCD RS (SCE) is Output
    1676:	51 9a       	sbi	0x0a, 1	; 10
   wait_about100ms(); // Set LCD for 100 ms into RESET
    1678:	84 e1       	ldi	r24, 0x14	; 20
    167a:	77 dc       	rcall	.-1810   	; 0xf6a <sleep_5ms>
   wait_about100ms();  // Wait for 100 ms after RESET
    167c:	58 9a       	sbi	0x0b, 0	; 11
    167e:	84 e1       	ldi	r24, 0x14	; 20
   wait_about50ms();
    1680:	74 dc       	rcall	.-1816   	; 0xf6a <sleep_5ms>
    1682:	8a e0       	ldi	r24, 0x0A	; 10
   lcd_command(CMD_EXIT_SLEEP);		// wake up
    1684:	72 dc       	rcall	.-1820   	; 0xf6a <sleep_5ms>
    1686:	81 e1       	ldi	r24, 0x11	; 17
   wait_about20ms();
    1688:	c4 df       	rcall	.-120    	; 0x1612 <lcd_command>
    168a:	84 e0       	ldi	r24, 0x04	; 4
   lcd_command(CMD_SET_GAMMA);		// set default Gamma
    168c:	6e dc       	rcall	.-1828   	; 0xf6a <sleep_5ms>
    168e:	86 e2       	ldi	r24, 0x26	; 38
    lcd_write_data(0x04);		// Gamma curve 3; 0x01= curve 1, 0x02= curve2, 0x08= curve 4
    1690:	c0 df       	rcall	.-128    	; 0x1612 <lcd_command>
    1692:	64 e0       	ldi	r22, 0x04	; 4
    1694:	81 e0       	ldi	r24, 0x01	; 1
   lcd_command(CMD_FRAME_RATE_CONTROL);		// Frame Rate Control
    1696:	06 db       	rcall	.-2548   	; 0xca4 <_lcd_hw_write>
    1698:	81 eb       	ldi	r24, 0xB1	; 177
    lcd_write_data(ST_DIVA);		// DIVA=14, default 14(132*162) 17(128*128)
    169a:	bb df       	rcall	.-138    	; 0x1612 <lcd_command>
    169c:	6e e0       	ldi	r22, 0x0E	; 14
    169e:	81 e0       	ldi	r24, 0x01	; 1
    lcd_write_data(ST_VPA);		// VPA=16, default 20(132*162) 17(128*128)
    16a0:	01 db       	rcall	.-2558   	; 0xca4 <_lcd_hw_write>
    16a2:	64 e1       	ldi	r22, 0x14	; 20
    16a4:	81 e0       	ldi	r24, 0x01	; 1
   lcd_command(CMD_POWER_CONTROL1);		// Power_Control1
    16a6:	fe da       	rcall	.-2564   	; 0xca4 <_lcd_hw_write>
    16a8:	80 ec       	ldi	r24, 0xC0	; 192
    lcd_write_word(0x0e00);		// 0x08 VRH=14, GVDD=4.1, VC=0, VCI1=2.75
    16aa:	b3 df       	rcall	.-154    	; 0x1612 <lcd_command>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
   lcd_command(CMD_POWER_CONTROL2);		// Power_Control2
    16ae:	9e e0       	ldi	r25, 0x0E	; 14
    16b0:	a6 df       	rcall	.-180    	; 0x15fe <lcd_write_word>
    lcd_write_data(0x05);		// BT=5, AVDD=2x VCL=-1x VGH=6x VGL=-3x
    16b2:	81 ec       	ldi	r24, 0xC1	; 193
    16b4:	ae df       	rcall	.-164    	; 0x1612 <lcd_command>
    16b6:	65 e0       	ldi	r22, 0x05	; 5
   lcd_command(CMD_VCOM_CONTROL1);		// VCOM_Control1
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	f4 da       	rcall	.-2584   	; 0xca4 <_lcd_hw_write>
    lcd_write_word(0x3840);		// VMH=56  VCOMH=3.900, VML=64  VCOML=-0.900
    16bc:	85 ec       	ldi	r24, 0xC5	; 197
    16be:	a9 df       	rcall	.-174    	; 0x1612 <lcd_command>
   lcd_command(CMD_SET_COLOR_FORMAT);		// set color format
    16c0:	80 e4       	ldi	r24, 0x40	; 64
    16c2:	98 e3       	ldi	r25, 0x38	; 56
    lcd_write_data(0x05);		// 16 bit/pixel
    16c4:	9c df       	rcall	.-200    	; 0x15fe <lcd_write_word>
    16c6:	8a e3       	ldi	r24, 0x3A	; 58
    16c8:	a4 df       	rcall	.-184    	; 0x1612 <lcd_command>
    16ca:	65 e0       	ldi	r22, 0x05	; 5
   lcd_command(CMD_MEMORY_ADDRESS_CONTROL);		// Memory address control
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	ea da       	rcall	.-2604   	; 0xca4 <_lcd_hw_write>
    16d0:	86 e3       	ldi	r24, 0x36	; 54
    lcd_write_data(0x3c);	 	// MV=exchange xy, ML=Vertical refresh, RGB=BGR color,MH=Refresh right to left
    16d2:	9f df       	rcall	.-194    	; 0x1612 <lcd_command>
    16d4:	6c e3       	ldi	r22, 0x3C	; 60
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	e5 da       	rcall	.-2614   	; 0xca4 <_lcd_hw_write>
   lcd_command(CMD_INVERSION_CONTROL);		// Display Inversion Control
    16da:	84 eb       	ldi	r24, 0xB4	; 180
    16dc:	9a df       	rcall	.-204    	; 0x1612 <lcd_command>
    16de:	60 e0       	ldi	r22, 0x00	; 0
    lcd_write_data(0x00);		// NLA=0, NLB=0, NLC=0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	e0 da       	rcall	.-2624   	; 0xca4 <_lcd_hw_write>
    16e4:	9a df       	rcall	.-204    	; 0x161a <lcd_clear>
    16e6:	89 e2       	ldi	r24, 0x29	; 41
   lcd_clear();
    16e8:	94 df       	rcall	.-216    	; 0x1612 <lcd_command>
    16ea:	8a e0       	ldi	r24, 0x0A	; 10
   lcd_command(CMD_DISPLAY_ON);		// Display On
    16ec:	3e cc       	rjmp	.-1924   	; 0xf6a <sleep_5ms>
    16ee:	08 95       	ret

000016f0 <lcd_clear_line>:
    16f0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_lcd_column>
   wait_about50ms();
    16f4:	84 e1       	ldi	r24, 0x14	; 20
    16f6:	89 1b       	sub	r24, r25
}	/* end lcd_init */
    16f8:	41 cf       	rjmp	.-382    	; 0x157c <lcd_spaces>

/* ******************************************************************************* */
void lcd_clear_line(void) {
 // writes spaces up to LCD_LINE_LENGTH to LCD-Display, Cursor can be positioned to any column
    lcd_spaces(LCD_LINE_LENGTH - _lcd_column);
}
    16fa:	08 95       	ret

000016fc <lcd_next_line>:
void lcd_next_line(uint8_t xx) {
    16fc:	cf 93       	push	r28
    16fe:	c8 2f       	mov	r28, r24
   lcd_clear_line();
    1700:	f7 df       	rcall	.-18     	; 0x16f0 <lcd_clear_line>
   lcd_text_line ++;
    1702:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <lcd_text_line>
    1706:	9f 5f       	subi	r25, 0xFF	; 255
    1708:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <lcd_text_line>
   if (lcd_text_line > (LCD_LINES - 1))  {
    170c:	98 30       	cpi	r25, 0x08	; 8
    170e:	68 f0       	brcs	.+26     	; 0x172a <lcd_next_line+0x2e>
      lcd_text_line = (LCD_LINES - 1);
    1710:	87 e0       	ldi	r24, 0x07	; 7
    1712:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd_text_line>
      last_line_used = 1;
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
   lcd_set_cursor((uint8_t)(lcd_text_line * PAGES_PER_LINE), xx);
    171c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd_text_line>
    1720:	6c 2f       	mov	r22, r28
    1722:	88 0f       	add	r24, r24
    1724:	34 df       	rcall	.-408    	; 0x158e <lcd_set_cursor>
}
    1726:	cf 91       	pop	r28
    1728:	08 95       	ret
      last_line_used = 0;
    172a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <last_line_used>
    172e:	f6 cf       	rjmp	.-20     	; 0x171c <lcd_next_line+0x20>

00001730 <lcd_next_line_wait>:
   lcd_next_line(xx);
    1730:	e5 df       	rcall	.-54     	; 0x16fc <lcd_next_line>
   wait_for_key_5s_line2();		// wait 5s and clear last line
    1732:	a0 c4       	rjmp	.+2368   	; 0x2074 <wait_for_key_5s_line2>
    1734:	08 95       	ret

00001736 <lcd_clear_line1>:
}
    1736:	38 df       	rcall	.-400    	; 0x15a8 <lcd_line1>

#ifdef LCD_CLEAR
void lcd_clear_line1(void) {
    lcd_line1();
    lcd_clear_line();
    1738:	db df       	rcall	.-74     	; 0x16f0 <lcd_clear_line>
    lcd_line1();
    173a:	36 cf       	rjmp	.-404    	; 0x15a8 <lcd_line1>
    173c:	08 95       	ret

0000173e <lcd_clear_line2>:
}
    173e:	3a df       	rcall	.-396    	; 0x15b4 <lcd_line2>
void lcd_clear_line2(void) {
    lcd_line2();
    lcd_clear_line();
    1740:	d7 df       	rcall	.-82     	; 0x16f0 <lcd_clear_line>
    lcd_line2();
    1742:	38 cf       	rjmp	.-400    	; 0x15b4 <lcd_line2>
    1744:	08 95       	ret

00001746 <reverse_byte>:
}
    1746:	58 2f       	mov	r21, r24
#endif

/* ******************************************************************************* */
#if (LCD_GRAPHIC_TYPE != 0)
unsigned char reverse_byte(unsigned char b)
{
    1748:	28 e0       	ldi	r18, 0x08	; 8
    174a:	30 e0       	ldi	r19, 0x00	; 0
   unsigned char result = 0;
   unsigned char bitin;
   unsigned char bitout;

   for (bitin = 1, bitout = 0x80; bitin != 0; bitin <<= 1, bitout >>= 1) 
    174c:	90 e8       	ldi	r25, 0x80	; 128
    174e:	41 e0       	ldi	r20, 0x01	; 1
   unsigned char result = 0;
    1750:	80 e0       	ldi	r24, 0x00	; 0
      if (b & bitin)
    1752:	65 2f       	mov	r22, r21
    1754:	64 23       	and	r22, r20
    1756:	09 f0       	breq	.+2      	; 0x175a <reverse_byte+0x14>
         result |= bitout;
    1758:	89 2b       	or	r24, r25
   for (bitin = 1, bitout = 0x80; bitin != 0; bitin <<= 1, bitout >>= 1) 
    175a:	44 0f       	add	r20, r20
    175c:	96 95       	lsr	r25
    175e:	21 50       	subi	r18, 0x01	; 1
    1760:	31 09       	sbc	r19, r1
    1762:	b9 f7       	brne	.-18     	; 0x1752 <reverse_byte+0xc>

   return result;
}
    1764:	08 95       	ret

00001766 <lcd_set_pixels>:
/* width and height specifies the dimension of the pixel field.                    */
/* The different controller types uses different ways of loading the pixels.       */
/* For the ST7920 controller the changes are only made in a memory field (RAM).    */
/* ******************************************************************************* */
void lcd_set_pixels(const unsigned char *pdata, unsigned char x, unsigned char y,
unsigned char options, unsigned char width, unsigned char height) {
    1766:	a8 e0       	ldi	r26, 0x08	; 8
    1768:	b0 e0       	ldi	r27, 0x00	; 0
    176a:	e9 eb       	ldi	r30, 0xB9	; 185
    176c:	fb e0       	ldi	r31, 0x0B	; 11
    176e:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>
    1772:	8f 83       	std	Y+7, r24	; 0x07
    1774:	98 87       	std	Y+8, r25	; 0x08
    1776:	44 2e       	mov	r4, r20
#elif ((LCD_ST_TYPE == 7735) || (LCD_ST_TYPE == 9163) || (LCD_ST_TYPE == 9341))
/* ------------------------------------------------------------------------------- */
// void lcd_set_pixels(const unsigned char *pdata, unsigned char x, unsigned char y,
// unsigned char options, unsigned char width, unsigned char height) 
  // support for color display
   if (((x+width) > (SCREEN_WIDTH / (ONE_B/8))) || ((y+height) > (SCREEN_HEIGHT / (ONE_B/8)))) return;
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	70 e0       	ldi	r23, 0x00	; 0
    177c:	cb 01       	movw	r24, r22
    177e:	80 0f       	add	r24, r16
    1780:	91 1f       	adc	r25, r17
    1782:	6d 83       	std	Y+5, r22	; 0x05
    1784:	7e 83       	std	Y+6, r23	; 0x06
    1786:	81 3a       	cpi	r24, 0xA1	; 161
    1788:	91 05       	cpc	r25, r1
    178a:	0c f0       	brlt	.+2      	; 0x178e <lcd_set_pixels+0x28>
    178c:	87 c0       	rjmp	.+270    	; 0x189c <lcd_set_pixels+0x136>
    178e:	8e 2d       	mov	r24, r14
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	ac 01       	movw	r20, r24
    1794:	44 0d       	add	r20, r4
    1796:	51 1d       	adc	r21, r1
    1798:	41 38       	cpi	r20, 0x81	; 129
    179a:	51 05       	cpc	r21, r1
    179c:	0c f0       	brlt	.+2      	; 0x17a0 <lcd_set_pixels+0x3a>
    179e:	7e c0       	rjmp	.+252    	; 0x189c <lcd_set_pixels+0x136>
 #endif
   unsigned char offset;
   unsigned char xx;

   page = y * (ONE_B/8);		
   pagemax = (y + height - 1) * (ONE_B/8);
    17a0:	ea 94       	dec	r14
    17a2:	2e 2c       	mov	r2, r14
    17a4:	24 0c       	add	r2, r4
   if (pagemax >= SCREEN_HEIGHT)
    17a6:	27 fe       	sbrs	r2, 7
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <lcd_set_pixels+0x48>
      pagemax = (SCREEN_HEIGHT - 1);	// limit to last page of screen
    17aa:	5f e7       	ldi	r21, 0x7F	; 127
    17ac:	25 2e       	mov	r2, r21

   if ((options & OPT_VREVERSE) == OPT_VREVERSE)
    17ae:	32 2f       	mov	r19, r18
    17b0:	32 70       	andi	r19, 0x02	; 2
    17b2:	39 83       	std	Y+1, r19	; 0x01
    17b4:	21 ff       	sbrs	r18, 1
    17b6:	13 c0       	rjmp	.+38     	; 0x17de <lcd_set_pixels+0x78>
      pdata += ((height-1)>>3) * width; /* begin of the last line of data */
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	43 e0       	ldi	r20, 0x03	; 3
    17bc:	95 95       	asr	r25
    17be:	87 95       	ror	r24
    17c0:	4a 95       	dec	r20
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <lcd_set_pixels+0x56>
    17c4:	80 9f       	mul	r24, r16
    17c6:	a0 01       	movw	r20, r0
    17c8:	81 9f       	mul	r24, r17
    17ca:	50 0d       	add	r21, r0
    17cc:	90 9f       	mul	r25, r16
    17ce:	50 0d       	add	r21, r0
    17d0:	11 24       	eor	r1, r1
    17d2:	8f 81       	ldd	r24, Y+7	; 0x07
    17d4:	98 85       	ldd	r25, Y+8	; 0x08
    17d6:	84 0f       	add	r24, r20
    17d8:	95 1f       	adc	r25, r21
    17da:	98 87       	std	Y+8, r25	; 0x08
    17dc:	8f 83       	std	Y+7, r24	; 0x07
            lcd_command(CMD_RAMWR);		// write pixel data to RAM

  #if (LCD_ST7565_H_FLIP == 1)
            if (!((options & OPT_HREVERSE) == OPT_HREVERSE))
  #else
            if ((options & OPT_HREVERSE) == OPT_HREVERSE)
    17de:	21 70       	andi	r18, 0x01	; 1
    17e0:	2c 83       	std	Y+4, r18	; 0x04
   for (; page <= pagemax; page+=ONE_B)
    17e2:	24 14       	cp	r2, r4
    17e4:	08 f4       	brcc	.+2      	; 0x17e8 <lcd_set_pixels+0x82>
    17e6:	5a c0       	rjmp	.+180    	; 0x189c <lcd_set_pixels+0x136>
    17e8:	8f 80       	ldd	r8, Y+7	; 0x07
    17ea:	98 84       	ldd	r9, Y+8	; 0x08
    17ec:	80 0e       	add	r8, r16
    17ee:	91 1e       	adc	r9, r17
    17f0:	64 01       	movw	r12, r8
    17f2:	ed 80       	ldd	r14, Y+5	; 0x05
    17f4:	fe 80       	ldd	r15, Y+6	; 0x06
    17f6:	af 80       	ldd	r10, Y+7	; 0x07
    17f8:	b8 84       	ldd	r11, Y+8	; 0x08
         lcd_write_word(((SCREEN_HEIGHT-1) - ONE_B) - page + LCD_ST7565_V_OFFSET);
    17fa:	84 2d       	mov	r24, r4
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	27 e7       	ldi	r18, 0x77	; 119
    1800:	62 2e       	mov	r6, r18
    1802:	71 2c       	mov	r7, r1
    1804:	68 1a       	sub	r6, r24
    1806:	79 0a       	sbc	r7, r25
         lcd_write_word(((SCREEN_HEIGHT-1) - ONE_B) - page + LCD_ST7565_V_OFFSET + (ONE_B-1));
    1808:	ee e7       	ldi	r30, 0x7E	; 126
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	e8 1b       	sub	r30, r24
    180e:	f9 0b       	sbc	r31, r25
    1810:	fb 83       	std	Y+3, r31	; 0x03
    1812:	ea 83       	std	Y+2, r30	; 0x02
    1814:	32 c0       	rjmp	.+100    	; 0x187a <lcd_set_pixels+0x114>
         lcd_command(CMD_RASET);		// set row range
    1816:	8b e2       	ldi	r24, 0x2B	; 43
    1818:	fc de       	rcall	.-520    	; 0x1612 <lcd_command>
         lcd_write_word(((SCREEN_HEIGHT-1) - ONE_B) - page + LCD_ST7565_V_OFFSET);
    181a:	c3 01       	movw	r24, r6
    181c:	f0 de       	rcall	.-544    	; 0x15fe <lcd_write_word>
         lcd_write_word(((SCREEN_HEIGHT-1) - ONE_B) - page + LCD_ST7565_V_OFFSET + (ONE_B-1));
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	9b 81       	ldd	r25, Y+3	; 0x03
            lcd_command(CMD_CASET);		// set column range
    1822:	ed de       	rcall	.-550    	; 0x15fe <lcd_write_word>
    1824:	8a e2       	ldi	r24, 0x2A	; 42
            lcd_write_word((xx + offset)*(ONE_B/8) + dd + LCD_ST7565_H_OFFSET);
    1826:	f5 de       	rcall	.-534    	; 0x1612 <lcd_command>
    1828:	c7 01       	movw	r24, r14
            lcd_write_word((xx + offset)*(ONE_B/8) + dd + LCD_ST7565_H_OFFSET);
    182a:	e9 de       	rcall	.-558    	; 0x15fe <lcd_write_word>
    182c:	c7 01       	movw	r24, r14
    182e:	e7 de       	rcall	.-562    	; 0x15fe <lcd_write_word>
            lcd_command(CMD_RAMWR);		// write pixel data to RAM
    1830:	8c e2       	ldi	r24, 0x2C	; 44
    1832:	ef de       	rcall	.-546    	; 0x1612 <lcd_command>
    1834:	9c 81       	ldd	r25, Y+4	; 0x04
            if ((options & OPT_HREVERSE) == OPT_HREVERSE)
    1836:	f6 01       	movw	r30, r12
  #endif
               { byte = pgm_read_byte(pdata + width - offset - 1);
    1838:	31 97       	sbiw	r30, 0x01	; 1
    183a:	91 11       	cpse	r25, r1
            if ((options & OPT_HREVERSE) == OPT_HREVERSE)
    183c:	01 c0       	rjmp	.+2      	; 0x1840 <lcd_set_pixels+0xda>
            } else {
               byte = pgm_read_byte(pdata + offset);
    183e:	f5 01       	movw	r30, r10
    1840:	54 90       	lpm	r5, Z
            }
  #if (LCD_ST7565_V_FLIP == 1)
            if (((options & OPT_VREVERSE) == OPT_VREVERSE))
    1842:	f9 81       	ldd	r31, Y+1	; 0x01
    1844:	ff 23       	and	r31, r31
    1846:	19 f0       	breq	.+6      	; 0x184e <lcd_set_pixels+0xe8>
  #else
            if (!((options & OPT_VREVERSE) == OPT_VREVERSE))
  #endif
               { byte = reverse_byte(byte);
    1848:	85 2d       	mov	r24, r5
    184a:	7d df       	rcall	.-262    	; 0x1746 <reverse_byte>
    184c:	58 2e       	mov	r5, r24
    184e:	38 e0       	ldi	r19, 0x08	; 8
      pagemax = (SCREEN_HEIGHT - 1);	// limit to last page of screen
    1850:	33 2e       	mov	r3, r19
                 lcd_write_word(lcd_fg_color.w);	// 5 red / 6 green / 5 blue pixel 
   #if ONE_B == 16
                 lcd_write_word(lcd_fg_color.w);	// 5 red / 6 green / 5 blue pixel 
   #endif
  #else
                 lcd_write_word(LCD_FG_COLOR);	// 5 red / 6 green / 5 green pixel 
    1852:	8f ef       	ldi	r24, 0xFF	; 255
    1854:	9f ef       	ldi	r25, 0xFF	; 255
              if ((byte & 0x80) != 0) {
    1856:	57 fc       	sbrc	r5, 7
    1858:	02 c0       	rjmp	.+4      	; 0x185e <lcd_set_pixels+0xf8>
                 lcd_write_word(lcd_bg_color.w);	// 5 red  / 6 green  / 5 blue pixel
   #if ONE_B == 16
                 lcd_write_word(lcd_bg_color.w);	// 5 red  / 6 green  / 5 blue pixel
   #endif
  #else
                 lcd_write_word(LCD_BG_COLOR);	// 5 red  / 6 green  / 5 blue pixel
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	cf de       	rcall	.-610    	; 0x15fe <lcd_write_word>
    1860:	55 0c       	add	r5, r5
   #if ONE_B == 16
                 lcd_write_word(LCD_BG_COLOR);	// 5 red  / 6 green  / 5 blue pixel
   #endif
  #endif
              }
              byte *= 2;		// next bit to 2**7 position
    1862:	3a 94       	dec	r3
            for (bb=0; bb<8; bb++)
    1864:	31 10       	cpse	r3, r1
    1866:	f5 cf       	rjmp	.-22     	; 0x1852 <lcd_set_pixels+0xec>
    1868:	21 e0       	ldi	r18, 0x01	; 1
      for (offset = 0; offset < width; offset++)
    186a:	c2 1a       	sub	r12, r18
    186c:	d1 08       	sbc	r13, r1
    186e:	3f ef       	ldi	r19, 0xFF	; 255
    1870:	a3 1a       	sub	r10, r19
    1872:	b3 0a       	sbc	r11, r19
    1874:	8f ef       	ldi	r24, 0xFF	; 255
    1876:	e8 1a       	sub	r14, r24
    1878:	f8 0a       	sbc	r15, r24
    187a:	ef 81       	ldd	r30, Y+7	; 0x07
    187c:	f8 85       	ldd	r31, Y+8	; 0x08
    187e:	ce 16       	cp	r12, r30
    1880:	df 06       	cpc	r13, r31
    1882:	09 f0       	breq	.+2      	; 0x1886 <lcd_set_pixels+0x120>
    1884:	c8 cf       	rjmp	.-112    	; 0x1816 <lcd_set_pixels+0xb0>
    1886:	f9 81       	ldd	r31, Y+1	; 0x01
            } /* end for bb */
         } /* end for dd */
      } /* end for offset */
      if ((options & OPT_VREVERSE) == OPT_VREVERSE) {
    1888:	ff 23       	and	r31, r31
    188a:	19 f0       	breq	.+6      	; 0x1892 <lcd_set_pixels+0x12c>
    188c:	46 01       	movw	r8, r12
         pdata -= width;
    188e:	80 1a       	sub	r8, r16
    1890:	91 0a       	sbc	r9, r17
    1892:	28 e0       	ldi	r18, 0x08	; 8
   for (; page <= pagemax; page+=ONE_B)
    1894:	42 0e       	add	r4, r18
    1896:	98 86       	std	Y+8, r9	; 0x08
    1898:	8f 82       	std	Y+7, r8	; 0x07
    189a:	a3 cf       	rjmp	.-186    	; 0x17e2 <lcd_set_pixels+0x7c>
    189c:	28 96       	adiw	r28, 0x08	; 8
         pdata += width;
      }
   } /* end for page */
/* ------------------------------------------------------------------------------- */
#endif /* (LCD_ST_TYPE == 7565 || 1306 || 7108 || 7920 || 8812 || 8814 ... */
}
    189e:	e2 e1       	ldi	r30, 0x12	; 18
    18a0:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>

000018a4 <lcd_big_icon>:
    18a4:	ef 92       	push	r14
void lcd_big_icon(unsigned char temp1) {
    18a6:	0f 93       	push	r16
    18a8:	28 2f       	mov	r18, r24
 pfont = (uint8_t *) bigfont[temp1 & 0x3f];	// first byte of character data
    18aa:	8f 73       	andi	r24, 0x3F	; 63
    18ac:	30 e6       	ldi	r19, 0x60	; 96
    18ae:	83 9f       	mul	r24, r19
    18b0:	c0 01       	movw	r24, r0
    18b2:	11 24       	eor	r1, r1
    18b4:	8b 52       	subi	r24, 0x2B	; 43
    18b6:	9c 4f       	sbci	r25, 0xFC	; 252
 icon_xx =  TP_WIDTH;		// left side 
    18b8:	38 e0       	ldi	r19, 0x08	; 8
 if ((temp1 & 0x40) == 0) icon_xx += (SCREEN_WIDTH / (ONE_B/4)); // right side
    18ba:	26 ff       	sbrs	r18, 6
    18bc:	38 e5       	ldi	r19, 0x58	; 88
    18be:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <icon_xx>
 icon_yy = 0;
    18c2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <icon_yy>
 if ((temp1 & 0x80) == 0) {
    18c6:	27 fd       	sbrc	r18, 7
    18c8:	08 c0       	rjmp	.+16     	; 0x18da <lcd_big_icon+0x36>
   icon_xx +=  (SCREEN_WIDTH / (ONE_B/4))  - ICON_WIDTH - TP_WIDTH - TP_WIDTH - DIODE_WIDTH;
    18ca:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <icon_xx>
   icon_yy = HALF_SCREEN_HEIGHT;	// lower half of display
    18ce:	30 e2       	ldi	r19, 0x20	; 32
    18d0:	30 93 00 01 	sts	0x0100, r19	; 0x800100 <icon_yy>
   icon_xx +=  (SCREEN_WIDTH / (ONE_B/4))  - ICON_WIDTH - TP_WIDTH - TP_WIDTH - DIODE_WIDTH;
    18d4:	2d 5d       	subi	r18, 0xDD	; 221
    18d6:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <icon_xx>
 lcd_set_pixels( pfont, icon_xx, icon_yy, 0, ICON_WIDTH, ICON_HEIGHT);	// write the pixel data of the Icon
    18da:	20 e2       	ldi	r18, 0x20	; 32
    18dc:	e2 2e       	mov	r14, r18
    18de:	08 e1       	ldi	r16, 0x18	; 24
    18e0:	20 e0       	ldi	r18, 0x00	; 0
    18e2:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <icon_yy>
    18e6:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <icon_xx>
    18ea:	3d df       	rcall	.-390    	; 0x1766 <lcd_set_pixels>
} /* end lcd_big_icon() */
    18ec:	0f 91       	pop	r16
    18ee:	ef 90       	pop	r14
    18f0:	08 95       	ret

000018f2 <lcd_update_icon_opt>:
void lcd_update_icon_opt(const unsigned char *ubitmap, unsigned char options) {
    18f2:	ef 92       	push	r14
    18f4:	0f 93       	push	r16
    18f6:	dc 01       	movw	r26, r24
    18f8:	26 2f       	mov	r18, r22
 xx = icon_xx + pgm_read_byte(&ubitmap[0]);	// first byte = offset x to left (upper) corner of the Icon
    18fa:	fc 01       	movw	r30, r24
    18fc:	64 91       	lpm	r22, Z
 yy = icon_yy + pgm_read_byte(&ubitmap[1]);	// second byte = offset y to (left) upper corner of the Icon
    18fe:	31 96       	adiw	r30, 0x01	; 1
    1900:	44 91       	lpm	r20, Z
 ww =  pgm_read_byte(&ubitmap[2]);		// the width of the bitfield
    1902:	31 96       	adiw	r30, 0x01	; 1
    1904:	04 91       	lpm	r16, Z
 hh =  pgm_read_byte(&ubitmap[3]);		// the height of the bitfield (must be multiple of 8 for ST7565)
    1906:	31 96       	adiw	r30, 0x01	; 1
    1908:	e4 90       	lpm	r14, Z
 yy = icon_yy + pgm_read_byte(&ubitmap[1]);	// second byte = offset y to (left) upper corner of the Icon
    190a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <icon_yy>
    190e:	4e 0f       	add	r20, r30
 xx = icon_xx + pgm_read_byte(&ubitmap[0]);	// first byte = offset x to left (upper) corner of the Icon
    1910:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <icon_xx>
    1914:	68 0f       	add	r22, r24
 lcd_set_pixels( pfont, xx, yy, options, ww, hh);	// update the icon at the specified position with specified size
    1916:	cd 01       	movw	r24, r26
    1918:	04 96       	adiw	r24, 0x04	; 4
    191a:	25 df       	rcall	.-438    	; 0x1766 <lcd_set_pixels>
} /* end lcd_update_icon_opt() */
    191c:	0f 91       	pop	r16
    191e:	ef 90       	pop	r14
    1920:	08 95       	ret

00001922 <lcd_update_icon>:
 lcd_update_icon_opt(ubitmap, 0);	// call with no special option
    1922:	60 e0       	ldi	r22, 0x00	; 0
    1924:	e6 cf       	rjmp	.-52     	; 0x18f2 <lcd_update_icon_opt>
}
    1926:	08 95       	ret

00001928 <lcd_data>:
void lcd_data(unsigned char temp1) {
    1928:	ef 92       	push	r14
    192a:	0f 93       	push	r16
    192c:	28 2f       	mov	r18, r24
_lcd_column++;
    192e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>
    1932:	8f 5f       	subi	r24, 0xFF	; 255
    1934:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <_lcd_column>
  pfont = (uint8_t *)sfont + (SFONT_WIDTH * PAGES_PER_LINE * temp1);	// first byte of character data
    1938:	82 2f       	mov	r24, r18
    193a:	90 e0       	ldi	r25, 0x00	; 0
  lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)SFONT_WIDTH, (unsigned char)(PAGES_PER_LINE*8));
    193c:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <_page>
    1940:	44 0f       	add	r20, r20
    1942:	44 0f       	add	r20, r20
    1944:	44 0f       	add	r20, r20
    1946:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_xpos>
 if (temp1 < 12) {
    194a:	2c 30       	cpi	r18, 0x0C	; 12
    194c:	a8 f4       	brcc	.+42     	; 0x1978 <lcd_data+0x50>
  pfont = (uint8_t *)sfont + (SFONT_WIDTH * PAGES_PER_LINE * temp1);	// first byte of character data
    194e:	24 e0       	ldi	r18, 0x04	; 4
    1950:	88 0f       	add	r24, r24
    1952:	99 1f       	adc	r25, r25
    1954:	2a 95       	dec	r18
    1956:	e1 f7       	brne	.-8      	; 0x1950 <lcd_data+0x28>
  lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)SFONT_WIDTH, (unsigned char)(PAGES_PER_LINE*8));
    1958:	30 e1       	ldi	r19, 0x10	; 16
    195a:	e3 2e       	mov	r14, r19
    195c:	08 e0       	ldi	r16, 0x08	; 8
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	83 51       	subi	r24, 0x13	; 19
    1962:	94 4f       	sbci	r25, 0xF4	; 244
    1964:	00 df       	rcall	.-512    	; 0x1766 <lcd_set_pixels>
 _xpos += FONT_H_SPACE;		// move pointer to the next character position
    1966:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_xpos>
    196a:	88 5f       	subi	r24, 0xF8	; 248
  _xpos += (FONT_H_SPACE-(FONT_WIDTH-1));
    196c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <_xpos>
 wdt_reset();
    1970:	a8 95       	wdr
} /* end lcd_data() */
    1972:	0f 91       	pop	r16
    1974:	ef 90       	pop	r14
    1976:	08 95       	ret
  pfont = (uint8_t *)nfont + ((FONT_WIDTH-1) * PAGES_PER_LINE * (temp1-12-16));	// first byte of character data
    1978:	4c 97       	sbiw	r24, 0x1c	; 28
    197a:	2e e0       	ldi	r18, 0x0E	; 14
    197c:	28 9f       	mul	r18, r24
    197e:	f0 01       	movw	r30, r0
    1980:	29 9f       	mul	r18, r25
    1982:	f0 0d       	add	r31, r0
    1984:	11 24       	eor	r1, r1
  lcd_set_pixels( pfont, _xpos, _page*8, 0, (unsigned char)(FONT_WIDTH-1), (unsigned char)(PAGES_PER_LINE*8));
    1986:	80 e1       	ldi	r24, 0x10	; 16
    1988:	e8 2e       	mov	r14, r24
    198a:	07 e0       	ldi	r16, 0x07	; 7
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	cf 01       	movw	r24, r30
    1990:	8b 58       	subi	r24, 0x8B	; 139
    1992:	99 4f       	sbci	r25, 0xF9	; 249
    1994:	e8 de       	rcall	.-560    	; 0x1766 <lcd_set_pixels>
 _xpos += (FONT_WIDTH-1);		// move pointer to the next character position
    1996:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <_xpos>
    199a:	69 5f       	subi	r22, 0xF9	; 249
    199c:	60 93 02 01 	sts	0x0102, r22	; 0x800102 <_xpos>
  lcd_set_pixels( &nfont[((unsigned char)(' '-12-16))][0], _xpos, _page*8, 0, (unsigned char)(FONT_H_SPACE-(FONT_WIDTH-1)), (unsigned char)(PAGES_PER_LINE*8));
    19a0:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <_page>
    19a4:	44 0f       	add	r20, r20
    19a6:	44 0f       	add	r20, r20
    19a8:	44 0f       	add	r20, r20
    19aa:	01 e0       	ldi	r16, 0x01	; 1
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	8d ea       	ldi	r24, 0xAD	; 173
    19b0:	96 e0       	ldi	r25, 0x06	; 6
    19b2:	d9 de       	rcall	.-590    	; 0x1766 <lcd_set_pixels>
  _xpos += (FONT_H_SPACE-(FONT_WIDTH-1));
    19b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <_xpos>
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	d8 cf       	rjmp	.-80     	; 0x196c <lcd_data+0x44>

000019bc <lcd_testpin>:
   lcd_data(temp + '1' + TP_OFFSET - TP_MIN);
    19bc:	8f 5c       	subi	r24, 0xCF	; 207
    19be:	b4 cf       	rjmp	.-152    	; 0x1928 <lcd_data>
}
    19c0:	08 95       	ret

000019c2 <lcd_string>:
void lcd_string(char *data) {
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
    19c6:	ec 01       	movw	r28, r24
    while(*data) {
    19c8:	89 91       	ld	r24, Y+
    19ca:	81 11       	cpse	r24, r1
    19cc:	03 c0       	rjmp	.+6      	; 0x19d4 <lcd_string+0x12>
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret
        lcd_data(*data);
    19d4:	a9 df       	rcall	.-174    	; 0x1928 <lcd_data>
        data++;
    19d6:	f8 cf       	rjmp	.-16     	; 0x19c8 <lcd_string+0x6>

000019d8 <lcd_fix_string>:
void lcd_fix_string(const unsigned char *data) {
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	ec 01       	movw	r28, r24
      cc = MEM_read_byte(data);
    19de:	ce 01       	movw	r24, r28
    19e0:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
      if (cc==0)  {
    19e4:	88 23       	and	r24, r24
    19e6:	19 f0       	breq	.+6      	; 0x19ee <lcd_fix_string+0x16>
      lcd_data(cc);
    19e8:	9f df       	rcall	.-194    	; 0x1928 <lcd_data>
      data++;
    19ea:	21 96       	adiw	r28, 0x01	; 1
      cc = MEM_read_byte(data);
    19ec:	f8 cf       	rjmp	.-16     	; 0x19de <lcd_fix_string+0x6>
}
    19ee:	df 91       	pop	r29
    19f0:	cf 91       	pop	r28
    19f2:	08 95       	ret

000019f4 <lcd_pgm_bitmap>:
{
    19f4:	ef 92       	push	r14
    19f6:	0f 93       	push	r16
 dx = (unsigned char)pgm_read_byte(&pbitmap[0]);	// width of the bitmap
    19f8:	fc 01       	movw	r30, r24
    19fa:	04 91       	lpm	r16, Z
 dy = (unsigned char)pgm_read_byte(&pbitmap[1]);	// height of the bitmap
    19fc:	31 96       	adiw	r30, 0x01	; 1
    19fe:	e4 90       	lpm	r14, Z
 lcd_set_pixels( (const unsigned char *)(pbitmap+2), x, y, options, dx, dy);
    1a00:	02 96       	adiw	r24, 0x02	; 2
    1a02:	b1 de       	rcall	.-670    	; 0x1766 <lcd_set_pixels>
}
    1a04:	0f 91       	pop	r16
    1a06:	ef 90       	pop	r14
    1a08:	08 95       	ret

00001a0a <lcd_show_Cg>:
/* ******************************************************************************* */
void lcd_show_Cg(void) {
    1a0a:	0f 93       	push	r16
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	00 d0       	rcall	.+0      	; 0x1a12 <lcd_show_Cg+0x8>
    1a12:	00 d0       	rcall	.+0      	; 0x1a14 <lcd_show_Cg+0xa>
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
       lcd_MEM_string(GateCap_str);             //"Cg="
    1a18:	86 e8       	ldi	r24, 0x86	; 134
    1a1a:	91 e0       	ldi	r25, 0x01	; 1
    1a1c:	dd df       	rcall	.-70     	; 0x19d8 <lcd_fix_string>
#if FLASHEND > 0x1fff
       if (cap.cpre < -3) {
    1a1e:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <cap+0x12>
    1a22:	4d 3f       	cpi	r20, 0xFD	; 253
    1a24:	ac f4       	brge	.+42     	; 0x1a50 <lcd_show_Cg+0x46>
          DisplayValue(cap.cval,cap.cpre,'F',3);
    1a26:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    1a2a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    1a2e:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    1a32:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    1a36:	03 e0       	ldi	r16, 0x03	; 3
    1a38:	26 e4       	ldi	r18, 0x46	; 70
    1a3a:	bc 01       	movw	r22, r24
    1a3c:	cd 01       	movw	r24, r26
    1a3e:	1f d0       	rcall	.+62     	; 0x1a7e <DisplayValue>
          lcd_data('?');
       }
#else
       DisplayValue(cap.cval,cap.cpre,'F',3);
#endif
}
    1a40:	0f 90       	pop	r0
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	df 91       	pop	r29
    1a4a:	cf 91       	pop	r28
    1a4c:	0f 91       	pop	r16
          lcd_data('?');
    1a4e:	08 95       	ret
    1a50:	8f e3       	ldi	r24, 0x3F	; 63
    1a52:	6a df       	rcall	.-300    	; 0x1928 <lcd_data>
}
    1a54:	f5 cf       	rjmp	.-22     	; 0x1a40 <lcd_show_Cg+0x36>

00001a56 <lcd_show_rds>:
#ifdef SHOW_R_DS
void lcd_show_rds(uint8_t xpos)
{
       if ((PartMode&0x0f) == PART_MODE_MOS) {     /* kein JFET or IGBT */
    1a56:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <PartMode>
    1a5a:	9f 70       	andi	r25, 0x0F	; 15
    1a5c:	92 30       	cpi	r25, 0x02	; 2
    1a5e:	71 f4       	brne	.+28     	; 0x1a7c <lcd_show_rds+0x26>
          lcd_next_line_wait(xpos);
    1a60:	67 de       	rcall	.-818    	; 0x1730 <lcd_next_line_wait>
          lcd_MEM_string(RDS_str);		// "RDS=
    1a62:	84 e6       	ldi	r24, 0x64	; 100
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	b8 df       	rcall	.-144    	; 0x19d8 <lcd_fix_string>
          DisplayValue16(_trans->uBE,-1,LCD_CHAR_OMEGA,2);	// Drain-Source resistance
    1a68:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1a6c:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1a70:	22 e0       	ldi	r18, 0x02	; 2
    1a72:	4d e1       	ldi	r20, 0x1D	; 29
    1a74:	6f ef       	ldi	r22, 0xFF	; 255
    1a76:	84 81       	ldd	r24, Z+4	; 0x04
    1a78:	95 81       	ldd	r25, Z+5	; 0x05
    1a7a:	e3 c0       	rjmp	.+454    	; 0x1c42 <DisplayValue16>
       }
}
    1a7c:	08 95       	ret

00001a7e <DisplayValue>:
 *  Flag 0x10 for output with leading zeros
 *  Flag 0x20 for '+' Output, if not '-' 
 */

void DisplayValue(signed long signedValue, int8_t Exponent, unsigned char Unit, uint8_t xdigits)
{
    1a7e:	a2 e1       	ldi	r26, 0x12	; 18
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e4       	ldi	r30, 0x45	; 69
    1a84:	fd e0       	ldi	r31, 0x0D	; 13
    1a86:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__+0x4>
    1a8a:	94 2e       	mov	r9, r20
    1a8c:	b2 2e       	mov	r11, r18
    1a8e:	a0 2e       	mov	r10, r16
  uint8_t           digits;		/* xdigits without option */
  uint8_t           Length;		/* string length */
  uint8_t	    Rshift;		/* right shift of significant bits with leading '0' */


  unsigned long Value=signedValue;
    1a90:	6b 01       	movw	r12, r22
    1a92:	7c 01       	movw	r14, r24
  digits = xdigits & 0x0f;
    1a94:	0f 70       	andi	r16, 0x0F	; 15
  for(Prefix=0;Prefix<6;Prefix++) OutBuffer[Prefix] = '0';
    1a96:	80 e3       	ldi	r24, 0x30	; 48
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	8a 83       	std	Y+2, r24	; 0x02
    1a9c:	8b 83       	std	Y+3, r24	; 0x03
    1a9e:	8c 83       	std	Y+4, r24	; 0x04
    1aa0:	8d 83       	std	Y+5, r24	; 0x05
    1aa2:	8e 83       	std	Y+6, r24	; 0x06

#if FLASHEND > 0x1fff
  if (signedValue<0) {
    1aa4:	f7 fe       	sbrs	r15, 7
    1aa6:	3b c0       	rjmp	.+118    	; 0x1b1e <DisplayValue+0xa0>
     lcd_minus();		// lcd_data('-');
    1aa8:	51 d9       	rcall	.-3422   	; 0xd4c <lcd_minus>
     Value=-signedValue;
    1aaa:	f0 94       	com	r15
    1aac:	e0 94       	com	r14
    1aae:	d0 94       	com	r13
    1ab0:	c0 94       	com	r12
    1ab2:	c1 1c       	adc	r12, r1
    1ab4:	d1 1c       	adc	r13, r1
    1ab6:	e1 1c       	adc	r14, r1
    1ab8:	f1 1c       	adc	r15, r1
     if ((xdigits & 0x20) != 0) lcd_data('+');
  }
#endif

  Limit = 100;				/* scale value down to 2 digits */
  if (digits == 3) Limit = 1000;	/* scale value down to 3 digits */
    1aba:	48 ee       	ldi	r20, 0xE8	; 232
    1abc:	44 2e       	mov	r4, r20
    1abe:	43 e0       	ldi	r20, 0x03	; 3
    1ac0:	54 2e       	mov	r5, r20
    1ac2:	61 2c       	mov	r6, r1
    1ac4:	71 2c       	mov	r7, r1
    1ac6:	03 30       	cpi	r16, 0x03	; 3
    1ac8:	09 f4       	brne	.+2      	; 0x1acc <DisplayValue+0x4e>
    1aca:	42 c0       	rjmp	.+132    	; 0x1b50 <DisplayValue+0xd2>
  if (digits == 4) Limit = 10000;	/* scale value down to 4 digits */
    1acc:	30 e1       	ldi	r19, 0x10	; 16
    1ace:	43 2e       	mov	r4, r19
    1ad0:	37 e2       	ldi	r19, 0x27	; 39
    1ad2:	53 2e       	mov	r5, r19
    1ad4:	61 2c       	mov	r6, r1
    1ad6:	71 2c       	mov	r7, r1
    1ad8:	04 30       	cpi	r16, 0x04	; 4
    1ada:	d1 f1       	breq	.+116    	; 0x1b50 <DisplayValue+0xd2>
#ifdef LONG_OUTPUT
  if (digits == 5) Limit = 100000;	/* scale value down to 5 digits */
    1adc:	20 ea       	ldi	r18, 0xA0	; 160
    1ade:	42 2e       	mov	r4, r18
    1ae0:	26 e8       	ldi	r18, 0x86	; 134
    1ae2:	52 2e       	mov	r5, r18
    1ae4:	66 24       	eor	r6, r6
    1ae6:	63 94       	inc	r6
    1ae8:	71 2c       	mov	r7, r1
    1aea:	05 30       	cpi	r16, 0x05	; 5
    1aec:	89 f1       	breq	.+98     	; 0x1b50 <DisplayValue+0xd2>
  if (digits == 6) Limit = 1000000;	/* scale value down to 6 digits */
    1aee:	90 e4       	ldi	r25, 0x40	; 64
    1af0:	49 2e       	mov	r4, r25
    1af2:	92 e4       	ldi	r25, 0x42	; 66
    1af4:	59 2e       	mov	r5, r25
    1af6:	9f e0       	ldi	r25, 0x0F	; 15
    1af8:	69 2e       	mov	r6, r25
    1afa:	71 2c       	mov	r7, r1
    1afc:	06 30       	cpi	r16, 0x06	; 6
    1afe:	41 f1       	breq	.+80     	; 0x1b50 <DisplayValue+0xd2>
  Limit = 100;				/* scale value down to 2 digits */
    1b00:	54 e6       	ldi	r21, 0x64	; 100
    1b02:	45 2e       	mov	r4, r21
    1b04:	51 2c       	mov	r5, r1
    1b06:	61 2c       	mov	r6, r1
    1b08:	71 2c       	mov	r7, r1
  if (digits == 7) Limit = 10000000;	/* scale value down to 7 digits */
    1b0a:	07 30       	cpi	r16, 0x07	; 7
    1b0c:	09 f5       	brne	.+66     	; 0x1b50 <DisplayValue+0xd2>
    1b0e:	80 e8       	ldi	r24, 0x80	; 128
    1b10:	48 2e       	mov	r4, r24
    1b12:	86 e9       	ldi	r24, 0x96	; 150
    1b14:	58 2e       	mov	r5, r24
    1b16:	88 e9       	ldi	r24, 0x98	; 152
    1b18:	68 2e       	mov	r6, r24
    1b1a:	71 2c       	mov	r7, r1
    1b1c:	19 c0       	rjmp	.+50     	; 0x1b50 <DisplayValue+0xd2>
     if ((xdigits & 0x20) != 0) lcd_data('+');
    1b1e:	a5 fe       	sbrs	r10, 5
    1b20:	cc cf       	rjmp	.-104    	; 0x1aba <DisplayValue+0x3c>
    1b22:	8b e2       	ldi	r24, 0x2B	; 43
    1b24:	01 df       	rcall	.-510    	; 0x1928 <lcd_data>
    1b26:	c9 cf       	rjmp	.-110    	; 0x1aba <DisplayValue+0x3c>
#endif

  while (Value >= Limit)
  {
    Value += 5;				/* for automatic rounding */
    1b28:	d7 01       	movw	r26, r14
    1b2a:	c6 01       	movw	r24, r12
    1b2c:	05 96       	adiw	r24, 0x05	; 5
    1b2e:	a1 1d       	adc	r26, r1
    1b30:	b1 1d       	adc	r27, r1
    1b32:	8f 87       	std	Y+15, r24	; 0x0f
    1b34:	98 8b       	std	Y+16, r25	; 0x10
    1b36:	a9 8b       	std	Y+17, r26	; 0x11
    1b38:	ba 8b       	std	Y+18, r27	; 0x12
    // perhaps TODO: the above is not really correct, can do double rounding (2000.45 -> 2000.5 -> 2001)
    Value = Value / 10;			/* scale down by 10^1 */
    1b3a:	bc 01       	movw	r22, r24
    1b3c:	cd 01       	movw	r24, r26
    1b3e:	2a e0       	ldi	r18, 0x0A	; 10
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e0       	ldi	r20, 0x00	; 0
    1b44:	50 e0       	ldi	r21, 0x00	; 0
    1b46:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    1b4a:	69 01       	movw	r12, r18
    1b4c:	7a 01       	movw	r14, r20
    Exponent++;				/* increase exponent by 1 */
    1b4e:	93 94       	inc	r9
  while (Value >= Limit)
    1b50:	c4 14       	cp	r12, r4
    1b52:	d5 04       	cpc	r13, r5
    1b54:	e6 04       	cpc	r14, r6
    1b56:	f7 04       	cpc	r15, r7
    1b58:	38 f7       	brcc	.-50     	; 0x1b28 <DisplayValue+0xaa>
    }
#endif
  // the following is much more concise
  // also removes the limits checking, since limit errors should never happen, and if they do, they'd show _incorrect_ results;
  // showing a garbage prefix character seems preferable to something correct-looking but off by some power of 10
  Index = ((unsigned char)(Exponent+17))/3;
    1b5a:	11 e1       	ldi	r17, 0x11	; 17
    1b5c:	19 0d       	add	r17, r9
    1b5e:	9b ea       	ldi	r25, 0xAB	; 171
    1b60:	19 9f       	mul	r17, r25
    1b62:	11 2d       	mov	r17, r1
    1b64:	11 24       	eor	r1, r1
    1b66:	16 95       	lsr	r17
  Offset = ((unsigned char)(6-Exponent))%3;
    1b68:	86 e0       	ldi	r24, 0x06	; 6
    1b6a:	89 19       	sub	r24, r9
    1b6c:	89 9f       	mul	r24, r25
    1b6e:	91 2d       	mov	r25, r1
    1b70:	11 24       	eor	r1, r1
    1b72:	79 2e       	mov	r7, r25
    1b74:	76 94       	lsr	r7
    1b76:	9e 7f       	andi	r25, 0xFE	; 254
    1b78:	97 0d       	add	r25, r7
    1b7a:	78 2e       	mov	r7, r24
    1b7c:	79 1a       	sub	r7, r25
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
    1b7e:	4e 01       	movw	r8, r28
    1b80:	97 e0       	ldi	r25, 0x07	; 7
    1b82:	89 0e       	add	r8, r25
    1b84:	91 1c       	adc	r9, r1
    1b86:	2a e0       	ldi	r18, 0x0A	; 10
    1b88:	a4 01       	movw	r20, r8
    1b8a:	c7 01       	movw	r24, r14
    1b8c:	b6 01       	movw	r22, r12
    1b8e:	0e 94 12 3e 	call	0x7c24	; 0x7c24 <__ultoa_ncheck>
  ultoa(Value, &OutBuffer[6], 10);	// sprintf(&OutBuffer[6],"%ld%c",Value,(char)0);
#else
  utoa((uint16_t)Value, &OutBuffer[6], 10);	// sprintf(&OutBuffer[6],"%d%c",Value,(char)0);
#endif

  Length = strlen(&OutBuffer[6]);
    1b92:	f4 01       	movw	r30, r8
    1b94:	01 90       	ld	r0, Z+
    1b96:	00 20       	and	r0, r0
    1b98:	e9 f7       	brne	.-6      	; 0x1b94 <DisplayValue+0x116>
    1b9a:	31 97       	sbiw	r30, 0x01	; 1
    1b9c:	7f 01       	movw	r14, r30
    1b9e:	e8 18       	sub	r14, r8
    1ba0:	f9 08       	sbc	r15, r9
    1ba2:	de 2c       	mov	r13, r14

#ifdef LONG_OUTPUT
 #ifdef NO_NANO
  if ((Length > (4+Offset))  && (Index != 0))
 #else
  if (Length > (4+Offset)) 
    1ba4:	84 e0       	ldi	r24, 0x04	; 4
    1ba6:	87 0d       	add	r24, r7
    1ba8:	8e 15       	cp	r24, r14
    1baa:	1f 04       	cpc	r1, r15
    1bac:	1c f4       	brge	.+6      	; 0x1bb4 <DisplayValue+0x136>
 #endif
    {
      Index++;			/* take next prefix for better readable string */
    1bae:	1f 5f       	subi	r17, 0xFF	; 255
      Offset += 3;		/* decimal point 3 to the left */
    1bb0:	a3 e0       	ldi	r26, 0x03	; 3
    1bb2:	7a 0e       	add	r7, r26
      Index++;				/* use mikro instead of nano */
      Offset += 3;			/* can be 3,4 or 5 */
    }
#endif

  Prefix = MEM_read_byte((unsigned char *)(&PrefixTab[Index]));   /* look up prefix in table */
    1bb4:	81 2f       	mov	r24, r17
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	84 5d       	subi	r24, 0xD4	; 212
    1bba:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbc:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    1bc0:	98 2e       	mov	r9, r24

   */


  /* position of dot */
  if (((xdigits & 0x10) != 0) && (digits > Length)) {
    1bc2:	8a 2d       	mov	r24, r10
    1bc4:	80 71       	andi	r24, 0x10	; 16
    1bc6:	a4 fe       	sbrs	r10, 4
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <DisplayValue+0x156>
     Rshift = (digits - Length);	// use previous filled '0' characters
    1bca:	80 2f       	mov	r24, r16
    1bcc:	8e 19       	sub	r24, r14
  if (((xdigits & 0x10) != 0) && (digits > Length)) {
    1bce:	d0 16       	cp	r13, r16
    1bd0:	08 f0       	brcs	.+2      	; 0x1bd4 <DisplayValue+0x156>
  } else {
     Rshift = 0;
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
  }

  Exponent = (Length + Rshift) - Offset;		/* calculate position */
    1bd4:	0e 2d       	mov	r16, r14
    1bd6:	07 19       	sub	r16, r7
    1bd8:	08 0f       	add	r16, r24

  if (Exponent <= 0)			/* we have to prepend "0." */
    1bda:	10 16       	cp	r1, r16
  {
    /* 0: factor 10 / -1: factor 100 */
//    lcd_data('0');
    lcd_data('.');
    1bdc:	24 f0       	brlt	.+8      	; 0x1be6 <DisplayValue+0x168>
    1bde:	8e e2       	ldi	r24, 0x2E	; 46
    1be0:	a3 de       	rcall	.-698    	; 0x1928 <lcd_data>
      }
#else
    if (Exponent < 0) lcd_data('0');	/* extra 0 for factor 100 */
#endif
#else
    Rshift = Offset - Length;
    1be2:	87 2d       	mov	r24, r7
    1be4:	8e 19       	sub	r24, r14
#endif
  }



  if (Offset == 0) Exponent = -8;	/* disable dot if not needed */
    1be6:	71 10       	cpse	r7, r1
    1be8:	01 c0       	rjmp	.+2      	; 0x1bec <DisplayValue+0x16e>
    1bea:	08 ef       	ldi	r16, 0xF8	; 248

//  Exponent--;


  /* display value and add dot if requested */
  Index = 0;
    1bec:	a1 2c       	mov	r10, r1
  while (Index < (Length+Rshift))		/* loop through string */
    1bee:	c8 2e       	mov	r12, r24
    1bf0:	d1 2c       	mov	r13, r1
    1bf2:	ec 0c       	add	r14, r12
    1bf4:	fd 1c       	adc	r15, r13
  {
    lcd_data(OutBuffer[Index+6-Rshift]);		/* display char */
    Index++;				/* next one */
    if (Index == Exponent) {
    1bf6:	00 2e       	mov	r0, r16
    1bf8:	00 0c       	add	r0, r0
    1bfa:	11 0b       	sbc	r17, r17
  while (Index < (Length+Rshift))		/* loop through string */
    1bfc:	ea 2d       	mov	r30, r10
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	ee 15       	cp	r30, r14
    1c02:	ff 05       	cpc	r31, r15
    1c04:	64 f0       	brlt	.+24     	; 0x1c1e <DisplayValue+0x1a0>



  /* display prefix and unit */

  if (Prefix != 0) {
    1c06:	99 20       	and	r9, r9
     lcd_data(Prefix);
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <DisplayValue+0x190>
    1c0a:	89 2d       	mov	r24, r9
  }

  if (Unit != 0) {
    1c0c:	8d de       	rcall	.-742    	; 0x1928 <lcd_data>
    1c0e:	bb 20       	and	r11, r11
      lcd_data(Unit);
    1c10:	11 f0       	breq	.+4      	; 0x1c16 <DisplayValue+0x198>
    1c12:	8b 2d       	mov	r24, r11
    1c14:	89 de       	rcall	.-750    	; 0x1928 <lcd_data>
  }
  return;
}
    1c16:	62 96       	adiw	r28, 0x12	; 18
    1c18:	e0 e1       	ldi	r30, 0x10	; 16
    1c1a:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__+0x4>
    lcd_data(OutBuffer[Index+6-Rshift]);		/* display char */
    1c1e:	36 96       	adiw	r30, 0x06	; 6
    1c20:	ec 19       	sub	r30, r12
    1c22:	fd 09       	sbc	r31, r13
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	8c 0f       	add	r24, r28
    1c2a:	9d 1f       	adc	r25, r29
    1c2c:	e8 0f       	add	r30, r24
    1c2e:	f9 1f       	adc	r31, r25
    1c30:	80 81       	ld	r24, Z
    Index++;				/* next one */
    1c32:	7a de       	rcall	.-780    	; 0x1928 <lcd_data>
    if (Index == Exponent) {
    1c34:	a3 94       	inc	r10
    1c36:	a0 16       	cp	r10, r16
    1c38:	11 06       	cpc	r1, r17
      lcd_data('.');			/* display dot */
    1c3a:	01 f7       	brne	.-64     	; 0x1bfc <DisplayValue+0x17e>
    1c3c:	8e e2       	ldi	r24, 0x2E	; 46
    1c3e:	74 de       	rcall	.-792    	; 0x1928 <lcd_data>
    1c40:	dd cf       	rjmp	.-70     	; 0x1bfc <DisplayValue+0x17e>

00001c42 <DisplayValue16>:

void DisplayValue16(uint16_t Value, int8_t Exponent, unsigned char Unit, uint8_t digits)
{
    1c42:	cf 92       	push	r12
    1c44:	df 92       	push	r13
    1c46:	ef 92       	push	r14
    1c48:	ff 92       	push	r15
    1c4a:	0f 93       	push	r16
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	00 d0       	rcall	.+0      	; 0x1c52 <DisplayValue16+0x10>
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <DisplayValue16+0x12>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	02 2f       	mov	r16, r18
 DisplayValue((signed long)Value, Exponent, Unit, digits);
    1c5a:	6c 01       	movw	r12, r24
    1c5c:	f1 2c       	mov	r15, r1
    1c5e:	e1 2c       	mov	r14, r1
    1c60:	24 2f       	mov	r18, r20
    1c62:	46 2f       	mov	r20, r22
    1c64:	c7 01       	movw	r24, r14
    1c66:	b6 01       	movw	r22, r12
    1c68:	0a df       	rcall	.-492    	; 0x1a7e <DisplayValue>
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	0f 90       	pop	r0
    1c70:	0f 90       	pop	r0
    1c72:	df 91       	pop	r29
    1c74:	cf 91       	pop	r28
    1c76:	0f 91       	pop	r16
    1c78:	ff 90       	pop	r15
    1c7a:	ef 90       	pop	r14
    1c7c:	df 90       	pop	r13
    1c7e:	cf 90       	pop	r12
    1c80:	08 95       	ret

00001c82 <Display_mV>:

void Display_mV(uint16_t xx, uint8_t ll) {
    1c82:	0f 93       	push	r16
    1c84:	cf 93       	push	r28
    1c86:	df 93       	push	r29
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <Display_mV+0x8>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <Display_mV+0xa>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	06 2f       	mov	r16, r22
 DisplayValue((long)xx,-3,'V',ll);
    1c92:	9c 01       	movw	r18, r24
    1c94:	50 e0       	ldi	r21, 0x00	; 0
    1c96:	40 e0       	ldi	r20, 0x00	; 0
    1c98:	29 83       	std	Y+1, r18	; 0x01
    1c9a:	3a 83       	std	Y+2, r19	; 0x02
    1c9c:	4b 83       	std	Y+3, r20	; 0x03
    1c9e:	5c 83       	std	Y+4, r21	; 0x04
    1ca0:	26 e5       	ldi	r18, 0x56	; 86
    1ca2:	4d ef       	ldi	r20, 0xFD	; 253
    1ca4:	69 81       	ldd	r22, Y+1	; 0x01
    1ca6:	7a 81       	ldd	r23, Y+2	; 0x02
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	e8 de       	rcall	.-560    	; 0x1a7e <DisplayValue>
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	0f 90       	pop	r0
    1cb6:	df 91       	pop	r29
    1cb8:	cf 91       	pop	r28
    1cba:	0f 91       	pop	r16
    1cbc:	08 95       	ret

00001cbe <Display_Hz>:
#if defined(WITH_MENU) || defined(WITH_XTAL)
void Display_Hz(unsigned long xx, uint8_t dd) {
    1cbe:	0f 93       	push	r16
    1cc0:	04 2f       	mov	r16, r20
 DisplayValue(xx,0,'H',dd);
    1cc2:	28 e4       	ldi	r18, 0x48	; 72
    1cc4:	40 e0       	ldi	r20, 0x00	; 0
    1cc6:	db de       	rcall	.-586    	; 0x1a7e <DisplayValue>
 lcd_data('z');
    1cc8:	8a e7       	ldi	r24, 0x7A	; 122
 lcd_space();
    1cca:	2e de       	rcall	.-932    	; 0x1928 <lcd_data>
    1ccc:	3d d8       	rcall	.-3974   	; 0xd48 <lcd_space>
}
    1cce:	0f 91       	pop	r16
    1cd0:	08 95       	ret

00001cd2 <lcd_draw_pin>:

void lcd_draw_pin(unsigned char index, char dx, char dy)
{
   const unsigned char *pbmp;

   pbmp = (const unsigned char *)pgm_read_word(&bmp_number[index]);
    1cd2:	e8 2f       	mov	r30, r24
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	ee 0f       	add	r30, r30
    1cd8:	ff 1f       	adc	r31, r31
    1cda:	e4 57       	subi	r30, 0x74	; 116
    1cdc:	fe 4f       	sbci	r31, 0xFE	; 254
    1cde:	85 91       	lpm	r24, Z+
    1ce0:	94 91       	lpm	r25, Z
   lcd_pgm_bitmap(pbmp, icon_xx + dx, icon_yy + dy, 0);
    1ce2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <icon_yy>
    1ce6:	42 0f       	add	r20, r18
    1ce8:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <icon_xx>
    1cec:	62 0f       	add	r22, r18
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	81 ce       	rjmp	.-766    	; 0x19f4 <lcd_pgm_bitmap>
}
    1cf2:	08 95       	ret

00001cf4 <lcd_draw_trans_pins>:

//*****************************************************************************
// Draw the transistor pin numbers of transistor _trans to the last icon location
// only the position of the base pin is selectable
void lcd_draw_trans_pins( char dxb, char dyb)
{
    1cf4:	cf 93       	push	r28
    1cf6:	df 93       	push	r29
    1cf8:	c8 2f       	mov	r28, r24
    1cfa:	d6 2f       	mov	r29, r22
//   const unsigned char *pbmp;

   lcd_draw_pin(_trans->e, 30, 24);	// relative to icon position
    1cfc:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1d00:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1d04:	48 e1       	ldi	r20, 0x18	; 24
    1d06:	6e e1       	ldi	r22, 0x1E	; 30
    1d08:	86 85       	ldd	r24, Z+14	; 0x0e
    1d0a:	e3 df       	rcall	.-58     	; 0x1cd2 <lcd_draw_pin>
   lcd_draw_pin(_trans->b, dxb, dyb);	// relative to icon position
    1d0c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1d10:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1d14:	4d 2f       	mov	r20, r29
    1d16:	6c 2f       	mov	r22, r28
    1d18:	84 85       	ldd	r24, Z+12	; 0x0c
    1d1a:	db df       	rcall	.-74     	; 0x1cd2 <lcd_draw_pin>
   lcd_draw_pin(_trans->c, 30, 0);	// relative to icon position
    1d1c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    1d20:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    1d24:	40 e0       	ldi	r20, 0x00	; 0
    1d26:	6e e1       	ldi	r22, 0x1E	; 30
    1d28:	85 85       	ldd	r24, Z+13	; 0x0d
    1d2a:	d3 df       	rcall	.-90     	; 0x1cd2 <lcd_draw_pin>
}
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <ShowIcons>:

//*****************************************************************************
 #ifdef SHOW_ICONS
 // not enough Flash space for ShowIcons at ATmega328
// Show all Icons on the screen, up to four at one screen
void ShowIcons(void) {
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
#define ShowTime 15000  /* 15 seconds wait time, or key press, or rotary encoder movement */
 uint8_t cc;
 lcd_clear();
    1d38:	70 dc       	rcall	.-1824   	; 0x161a <lcd_clear>
 lcd_big_icon(BJT_NPN|LCD_UPPER_LEFT);
    1d3a:	80 ec       	ldi	r24, 0xC0	; 192
    1d3c:	b3 dd       	rcall	.-1178   	; 0x18a4 <lcd_big_icon>
 lcd_update_icon_opt(bmp_vakdiode, OPT_VREVERSE);
    1d3e:	62 e0       	ldi	r22, 0x02	; 2
    1d40:	82 e9       	ldi	r24, 0x92	; 146
    1d42:	91 e0       	ldi	r25, 0x01	; 1
 lcd_big_icon(BJT_NPN|LCD_UPPER_RIGHT);
    1d44:	d6 dd       	rcall	.-1108   	; 0x18f2 <lcd_update_icon_opt>
    1d46:	80 e8       	ldi	r24, 0x80	; 128
 lcd_update_icon(bmp_pnp);	// update for PNP
    1d48:	ad dd       	rcall	.-1190   	; 0x18a4 <lcd_big_icon>
    1d4a:	87 ec       	ldi	r24, 0xC7	; 199
    1d4c:	91 e0       	ldi	r25, 0x01	; 1
 lcd_set_cursor(5,0);
    1d4e:	e9 dd       	rcall	.-1070   	; 0x1922 <lcd_update_icon>
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	85 e0       	ldi	r24, 0x05	; 5
 lcd_MEM_string(NPN_str);
    1d54:	1c dc       	rcall	.-1992   	; 0x158e <lcd_set_cursor>
    1d56:	8b e7       	ldi	r24, 0x7B	; 123
    1d58:	91 e0       	ldi	r25, 0x01	; 1
 lcd_set_cursor(5,(LCD_LINE_LENGTH / 2));
    1d5a:	3e de       	rcall	.-900    	; 0x19d8 <lcd_fix_string>
    1d5c:	6a e0       	ldi	r22, 0x0A	; 10
 lcd_MEM_string(PNP_str);
    1d5e:	85 e0       	ldi	r24, 0x05	; 5
    1d60:	16 dc       	rcall	.-2004   	; 0x158e <lcd_set_cursor>
 wait_for_key_ms(ShowTime);
    1d62:	83 e7       	ldi	r24, 0x73	; 115
    1d64:	91 e0       	ldi	r25, 0x01	; 1
    1d66:	38 de       	rcall	.-912    	; 0x19d8 <lcd_fix_string>

 lcd_clear();
    1d68:	88 e9       	ldi	r24, 0x98	; 152
 lcd_big_icon(N_JFET|LCD_LOWER_LEFT);
    1d6a:	9a e3       	ldi	r25, 0x3A	; 58
    1d6c:	1a d1       	rcall	.+564    	; 0x1fa2 <wait_for_key_ms>
 lcd_big_icon(N_JFET|LCD_LOWER_RIGHT);
    1d6e:	55 dc       	rcall	.-1878   	; 0x161a <lcd_clear>
    1d70:	83 e4       	ldi	r24, 0x43	; 67
 lcd_update_icon(bmp_p_jfet);	// update to P_JFET
    1d72:	98 dd       	rcall	.-1232   	; 0x18a4 <lcd_big_icon>
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	96 dd       	rcall	.-1236   	; 0x18a4 <lcd_big_icon>
 lcd_set_cursor(2,1);
    1d78:	80 ed       	ldi	r24, 0xD0	; 208
    1d7a:	91 e0       	ldi	r25, 0x01	; 1
    1d7c:	d2 dd       	rcall	.-1116   	; 0x1922 <lcd_update_icon>
 lcd_data('N');		// N-Type
    1d7e:	61 e0       	ldi	r22, 0x01	; 1
    1d80:	82 e0       	ldi	r24, 0x02	; 2
 lcd_minus();			// lcd_data('-');
    1d82:	05 dc       	rcall	.-2038   	; 0x158e <lcd_set_cursor>
 lcd_MEM_string(jfet_str);
    1d84:	8e e4       	ldi	r24, 0x4E	; 78
    1d86:	d0 dd       	rcall	.-1120   	; 0x1928 <lcd_data>
 lcd_set_cursor(2,1+(LCD_LINE_LENGTH / 2));
    1d88:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
    1d8c:	85 e9       	ldi	r24, 0x95	; 149
 lcd_data('P');		// P-Type
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	23 de       	rcall	.-954    	; 0x19d8 <lcd_fix_string>
 lcd_minus();			// lcd_data('-');
    1d92:	6b e0       	ldi	r22, 0x0B	; 11
 lcd_MEM_string(jfet_str);
    1d94:	82 e0       	ldi	r24, 0x02	; 2
    1d96:	fb db       	rcall	.-2058   	; 0x158e <lcd_set_cursor>
    1d98:	80 e5       	ldi	r24, 0x50	; 80
 wait_for_key_ms(ShowTime);
    1d9a:	c6 dd       	rcall	.-1140   	; 0x1928 <lcd_data>
    1d9c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>

 lcd_clear();
    1da0:	85 e9       	ldi	r24, 0x95	; 149
 lcd_big_icon(N_E_IGBT|LCD_UPPER_LEFT);
    1da2:	91 e0       	ldi	r25, 0x01	; 1
    1da4:	19 de       	rcall	.-974    	; 0x19d8 <lcd_fix_string>
 lcd_big_icon(N_E_IGBT|LCD_UPPER_RIGHT);
    1da6:	88 e9       	ldi	r24, 0x98	; 152
    1da8:	9a e3       	ldi	r25, 0x3A	; 58
 lcd_update_icon(bmp_p_e_igbt);	// update to P-E-IGBT
    1daa:	fb d0       	rcall	.+502    	; 0x1fa2 <wait_for_key_ms>
    1dac:	36 dc       	rcall	.-1940   	; 0x161a <lcd_clear>
    1dae:	81 ec       	ldi	r24, 0xC1	; 193
 lcd_set_cursor(5,0);
    1db0:	79 dd       	rcall	.-1294   	; 0x18a4 <lcd_big_icon>
    1db2:	81 e8       	ldi	r24, 0x81	; 129
 lcd_data('N');		// N-Type
    1db4:	77 dd       	rcall	.-1298   	; 0x18a4 <lcd_big_icon>
    1db6:	89 e2       	ldi	r24, 0x29	; 41
 lcd_minus();			// lcd_data('-');
    1db8:	92 e0       	ldi	r25, 0x02	; 2
 lcd_data('E');		// Enhancement Type
    1dba:	b3 dd       	rcall	.-1178   	; 0x1922 <lcd_update_icon>
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
 lcd_MEM_string(igbt_str);
    1dbe:	85 e0       	ldi	r24, 0x05	; 5
    1dc0:	e6 db       	rcall	.-2100   	; 0x158e <lcd_set_cursor>
    1dc2:	8e e4       	ldi	r24, 0x4E	; 78
 lcd_set_cursor(6,(LCD_LINE_LENGTH / 2));
    1dc4:	b1 dd       	rcall	.-1182   	; 0x1928 <lcd_data>
    1dc6:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
 lcd_data('P');		// P-Type
    1dca:	85 e4       	ldi	r24, 0x45	; 69
    1dcc:	ad dd       	rcall	.-1190   	; 0x1928 <lcd_data>
 lcd_minus();			// lcd_data('-');
    1dce:	8f e8       	ldi	r24, 0x8F	; 143
 lcd_data('E');		// Enhancement Type
    1dd0:	91 e0       	ldi	r25, 0x01	; 1
    1dd2:	02 de       	rcall	.-1020   	; 0x19d8 <lcd_fix_string>
 lcd_MEM_string(igbt_str);
    1dd4:	6a e0       	ldi	r22, 0x0A	; 10
    1dd6:	86 e0       	ldi	r24, 0x06	; 6
    1dd8:	da db       	rcall	.-2124   	; 0x158e <lcd_set_cursor>
 wait_for_key_ms(ShowTime);
    1dda:	80 e5       	ldi	r24, 0x50	; 80
    1ddc:	a5 dd       	rcall	.-1206   	; 0x1928 <lcd_data>
    1dde:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>

 lcd_clear();
 lcd_big_icon(N_E_IGBT|LCD_LOWER_LEFT);
    1de2:	85 e4       	ldi	r24, 0x45	; 69
    1de4:	a1 dd       	rcall	.-1214   	; 0x1928 <lcd_data>
 lcd_update_icon(bmp_n_d_igbt);	// update to N-D-IGBT
    1de6:	8f e8       	ldi	r24, 0x8F	; 143
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	f6 dd       	rcall	.-1044   	; 0x19d8 <lcd_fix_string>
 lcd_big_icon(N_E_IGBT|LCD_LOWER_RIGHT);
    1dec:	88 e9       	ldi	r24, 0x98	; 152
    1dee:	9a e3       	ldi	r25, 0x3A	; 58
 lcd_update_icon(bmp_p_d_igbt);	// update to P-D-IGBT
    1df0:	d8 d0       	rcall	.+432    	; 0x1fa2 <wait_for_key_ms>
    1df2:	13 dc       	rcall	.-2010   	; 0x161a <lcd_clear>
    1df4:	81 e4       	ldi	r24, 0x41	; 65
 lcd_set_cursor(1,0);
    1df6:	56 dd       	rcall	.-1364   	; 0x18a4 <lcd_big_icon>
    1df8:	8d e1       	ldi	r24, 0x1D	; 29
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
 lcd_data('N');		// N-Type
    1dfc:	92 dd       	rcall	.-1244   	; 0x1922 <lcd_update_icon>
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
 lcd_minus();			// lcd_data('-');
    1e00:	51 dd       	rcall	.-1374   	; 0x18a4 <lcd_big_icon>
 lcd_data('D');		// Depletion Type
    1e02:	89 ef       	ldi	r24, 0xF9	; 249
    1e04:	91 e0       	ldi	r25, 0x01	; 1
 lcd_MEM_string(igbt_str);
    1e06:	8d dd       	rcall	.-1254   	; 0x1922 <lcd_update_icon>
    1e08:	60 e0       	ldi	r22, 0x00	; 0
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
 lcd_set_cursor(2,(LCD_LINE_LENGTH / 2));
    1e0c:	c0 db       	rcall	.-2176   	; 0x158e <lcd_set_cursor>
    1e0e:	8e e4       	ldi	r24, 0x4E	; 78
    1e10:	8b dd       	rcall	.-1258   	; 0x1928 <lcd_data>
 lcd_data('P');		// P-Type
    1e12:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
 lcd_minus();			// lcd_data('-');
    1e16:	84 e4       	ldi	r24, 0x44	; 68
 lcd_data('D');		// Depletion Type
    1e18:	87 dd       	rcall	.-1266   	; 0x1928 <lcd_data>
    1e1a:	8f e8       	ldi	r24, 0x8F	; 143
 lcd_MEM_string(igbt_str);
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	dc dd       	rcall	.-1096   	; 0x19d8 <lcd_fix_string>
 wait_for_key_ms(ShowTime);
    1e20:	6a e0       	ldi	r22, 0x0A	; 10
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	b4 db       	rcall	.-2200   	; 0x158e <lcd_set_cursor>

 lcd_clear();
    1e26:	80 e5       	ldi	r24, 0x50	; 80
 lcd_big_icon(N_E_MOS|LCD_UPPER_LEFT);
    1e28:	7f dd       	rcall	.-1282   	; 0x1928 <lcd_data>
    1e2a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
 lcd_big_icon(N_E_MOS|LCD_UPPER_RIGHT);
    1e2e:	84 e4       	ldi	r24, 0x44	; 68
 lcd_update_icon(bmp_p_e_mos);  // update to P-E-MOS
    1e30:	7b dd       	rcall	.-1290   	; 0x1928 <lcd_data>
    1e32:	8f e8       	ldi	r24, 0x8F	; 143
    1e34:	91 e0       	ldi	r25, 0x01	; 1
 lcd_set_cursor(5,0);
    1e36:	d0 dd       	rcall	.-1120   	; 0x19d8 <lcd_fix_string>
    1e38:	88 e9       	ldi	r24, 0x98	; 152
 lcd_data('N');		// N-Type
    1e3a:	9a e3       	ldi	r25, 0x3A	; 58
    1e3c:	b2 d0       	rcall	.+356    	; 0x1fa2 <wait_for_key_ms>
 lcd_minus();			// lcd_data('-');
    1e3e:	ed db       	rcall	.-2086   	; 0x161a <lcd_clear>
    1e40:	82 ec       	ldi	r24, 0xC2	; 194
 lcd_data('E');		// Enhancement Type
    1e42:	30 dd       	rcall	.-1440   	; 0x18a4 <lcd_big_icon>
    1e44:	82 e8       	ldi	r24, 0x82	; 130
 lcd_MEM_string(mosfet_str);
    1e46:	2e dd       	rcall	.-1444   	; 0x18a4 <lcd_big_icon>
    1e48:	8f ee       	ldi	r24, 0xEF	; 239
    1e4a:	91 e0       	ldi	r25, 0x01	; 1
    1e4c:	6a dd       	rcall	.-1324   	; 0x1922 <lcd_update_icon>
 lcd_set_cursor(6,(LCD_LINE_LENGTH / 2));
    1e4e:	60 e0       	ldi	r22, 0x00	; 0
    1e50:	85 e0       	ldi	r24, 0x05	; 5
    1e52:	9d db       	rcall	.-2246   	; 0x158e <lcd_set_cursor>
    1e54:	8e e4       	ldi	r24, 0x4E	; 78
 lcd_data('P');		// P-Type
    1e56:	68 dd       	rcall	.-1328   	; 0x1928 <lcd_data>
    1e58:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
 lcd_minus();			// lcd_data('-');
    1e5c:	85 e4       	ldi	r24, 0x45	; 69
 lcd_data('E');		// Enhancement Type
    1e5e:	64 dd       	rcall	.-1336   	; 0x1928 <lcd_data>
    1e60:	8a e9       	ldi	r24, 0x9A	; 154
    1e62:	91 e0       	ldi	r25, 0x01	; 1
 lcd_MEM_string(mosfet_str);
    1e64:	b9 dd       	rcall	.-1166   	; 0x19d8 <lcd_fix_string>
    1e66:	6a e0       	ldi	r22, 0x0A	; 10
    1e68:	86 e0       	ldi	r24, 0x06	; 6
 wait_for_key_ms(ShowTime);
    1e6a:	91 db       	rcall	.-2270   	; 0x158e <lcd_set_cursor>
    1e6c:	80 e5       	ldi	r24, 0x50	; 80
    1e6e:	5c dd       	rcall	.-1352   	; 0x1928 <lcd_data>
    1e70:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>

 lcd_clear();
 lcd_big_icon(N_E_MOS|LCD_LOWER_LEFT);
    1e74:	85 e4       	ldi	r24, 0x45	; 69
    1e76:	58 dd       	rcall	.-1360   	; 0x1928 <lcd_data>
 lcd_update_icon(bmp_n_d_mos);  // update to N-D-MOS
    1e78:	8a e9       	ldi	r24, 0x9A	; 154
    1e7a:	91 e0       	ldi	r25, 0x01	; 1
    1e7c:	ad dd       	rcall	.-1190   	; 0x19d8 <lcd_fix_string>
    1e7e:	88 e9       	ldi	r24, 0x98	; 152
 lcd_big_icon(N_E_MOS|LCD_LOWER_RIGHT);
    1e80:	9a e3       	ldi	r25, 0x3A	; 58
    1e82:	8f d0       	rcall	.+286    	; 0x1fa2 <wait_for_key_ms>
    1e84:	ca db       	rcall	.-2156   	; 0x161a <lcd_clear>
 lcd_update_icon(bmp_p_d_mos);  // update to P-D-MOS
    1e86:	82 e4       	ldi	r24, 0x42	; 66
    1e88:	0d dd       	rcall	.-1510   	; 0x18a4 <lcd_big_icon>
    1e8a:	89 ee       	ldi	r24, 0xE9	; 233
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
 lcd_set_cursor(1,1);
    1e8e:	49 dd       	rcall	.-1390   	; 0x1922 <lcd_update_icon>
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	08 dd       	rcall	.-1520   	; 0x18a4 <lcd_big_icon>
    1e94:	87 ed       	ldi	r24, 0xD7	; 215
 lcd_data('N');		// N-Type
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	44 dd       	rcall	.-1400   	; 0x1922 <lcd_update_icon>
    1e9a:	61 e0       	ldi	r22, 0x01	; 1
 lcd_minus();			// lcd_data('-');
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	77 db       	rcall	.-2322   	; 0x158e <lcd_set_cursor>
 lcd_data('D');		// Depletion Type
    1ea0:	8e e4       	ldi	r24, 0x4E	; 78
    1ea2:	42 dd       	rcall	.-1404   	; 0x1928 <lcd_data>
    1ea4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
 lcd_MEM_string(mosfet_str);
    1ea8:	84 e4       	ldi	r24, 0x44	; 68
    1eaa:	3e dd       	rcall	.-1412   	; 0x1928 <lcd_data>
    1eac:	8a e9       	ldi	r24, 0x9A	; 154
 lcd_set_cursor(2,1+(LCD_LINE_LENGTH / 2));
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	93 dd       	rcall	.-1242   	; 0x19d8 <lcd_fix_string>
    1eb2:	6b e0       	ldi	r22, 0x0B	; 11
    1eb4:	82 e0       	ldi	r24, 0x02	; 2
 lcd_data('P');		// P-Type
    1eb6:	6b db       	rcall	.-2346   	; 0x158e <lcd_set_cursor>
    1eb8:	80 e5       	ldi	r24, 0x50	; 80
    1eba:	36 dd       	rcall	.-1428   	; 0x1928 <lcd_data>
 lcd_minus();			// lcd_data('-');
    1ebc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
 lcd_data('D');		// Depletion Type
    1ec0:	84 e4       	ldi	r24, 0x44	; 68
    1ec2:	32 dd       	rcall	.-1436   	; 0x1928 <lcd_data>
    1ec4:	8a e9       	ldi	r24, 0x9A	; 154
 lcd_MEM_string(mosfet_str);
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	87 dd       	rcall	.-1266   	; 0x19d8 <lcd_fix_string>
    1eca:	c0 e0       	ldi	r28, 0x00	; 0
    1ecc:	d4 e1       	ldi	r29, 0x14	; 20
  #else
   #define StartChar 0x20
   #define LastChar 0x7f
  #endif

 for (cc=0;cc<(LastChar+1-StartChar);cc++) {
    1ece:	8c 2f       	mov	r24, r28
 lcd_MEM_string(mosfet_str);
    1ed0:	6d 2f       	mov	r22, r29
    1ed2:	0e 94 b8 3c 	call	0x7970	; 0x7970 <__udivmodqi4>
    1ed6:	18 2f       	mov	r17, r24
    1ed8:	91 11       	cpse	r25, r1
    1eda:	0a c0       	rjmp	.+20     	; 0x1ef0 <ShowIcons+0x1be>
   if ((cc%LCD_LINE_LENGTH) == 0) {
    1edc:	c4 31       	cpi	r28, 0x14	; 20
    1ede:	20 f4       	brcc	.+8      	; 0x1ee8 <ShowIcons+0x1b6>
     // begin new line
     if(((cc/LCD_LINE_LENGTH) % LCD_LINES) == 0) {
    1ee0:	88 e9       	ldi	r24, 0x98	; 152
    1ee2:	9a e3       	ldi	r25, 0x3A	; 58
       wait_for_key_ms(ShowTime);
    1ee4:	5e d0       	rcall	.+188    	; 0x1fa2 <wait_for_key_ms>
    1ee6:	99 db       	rcall	.-2254   	; 0x161a <lcd_clear>
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	81 2f       	mov	r24, r17
       lcd_clear();
    1eec:	88 0f       	add	r24, r24
    1eee:	4f db       	rcall	.-2402   	; 0x158e <lcd_set_cursor>
     }
     lcd_set_cursor(((cc/LCD_LINE_LENGTH)%LCD_LINES)*PAGES_PER_LINE,0);
    1ef0:	8c e1       	ldi	r24, 0x1C	; 28
    1ef2:	8c 0f       	add	r24, r28
    1ef4:	19 dd       	rcall	.-1486   	; 0x1928 <lcd_data>
    1ef6:	cf 5f       	subi	r28, 0xFF	; 255
    1ef8:	c4 36       	cpi	r28, 0x64	; 100
   }
  lcd_data(cc+StartChar);
    1efa:	49 f7       	brne	.-46     	; 0x1ece <ShowIcons+0x19c>
    1efc:	88 e9       	ldi	r24, 0x98	; 152
    1efe:	9a e3       	ldi	r25, 0x3A	; 58
    1f00:	50 d0       	rcall	.+160    	; 0x1fa2 <wait_for_key_ms>
 for (cc=0;cc<(LastChar+1-StartChar);cc++) {
    1f02:	8b db       	rcall	.-2282   	; 0x161a <lcd_clear>
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
 } /* end for cc */
 wait_for_key_ms(ShowTime);
    1f08:	1f 91       	pop	r17
    1f0a:	08 95       	ret

00001f0c <check_rotary>:
 #if WITH_ROTARY_SWITCH != 4
  // normal rotary encoder with two switches
  uint8_t new_state;
  uint8_t old_ind;
  new_state = 0;		// reset to A and B switch at low level
  if ((ROTARY_A_REG & (1<<ROTARY_A_PIN)) != 0)  new_state = 1;	// switch A is high
    1f0c:	99 b1       	in	r25, 0x09	; 9
    1f0e:	93 fb       	bst	r25, 3
    1f10:	99 27       	eor	r25, r25
    1f12:	90 f9       	bld	r25, 0
  if ((ROTARY_B_REG & (1<<ROTARY_B_PIN)) != 0)  new_state |= 2;	// switch B is high
    1f14:	49 99       	sbic	0x09, 1	; 9
    1f16:	92 60       	ori	r25, 0x02	; 2
  if (rotary.ind > ROT_MSK) {	// index is out of range, initialize
    1f18:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rotary+0x4>
    1f1c:	84 30       	cpi	r24, 0x04	; 4
    1f1e:	50 f0       	brcs	.+20     	; 0x1f34 <check_rotary+0x28>
//    rotary.state[0] = new_state;
    rotary.state[0] = '>' - '0';
    1f20:	8e e0       	ldi	r24, 0x0E	; 14
    1f22:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rotary>
    rotary.state[1] = new_state;
    1f26:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <rotary+0x1>
//    for (rotary.ind=2; rotary.ind<16;rotary.ind++) rotary.state[rotary.ind] = ' ' - '0';
    rotary.count = 0;	// reset counter to zero
    1f2a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rotary+0x5>
    rotary.ind = 1;	// set initial index to 1
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rotary+0x4>
  }
  if (rotary.state[rotary.ind] != new_state) {
    1f34:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <rotary+0x4>
    1f38:	e8 2f       	mov	r30, r24
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	e3 5f       	subi	r30, 0xF3	; 243
    1f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f40:	30 81       	ld	r19, Z
    1f42:	39 17       	cp	r19, r25
    1f44:	c9 f0       	breq	.+50     	; 0x1f78 <check_rotary+0x6c>
     // There are three states to monitor, the new_state, the last rotary.state[rotary.ind] and
     // the state before rotary.state[old_ind] .
     old_ind = (rotary.ind + ROT_MSK) & ROT_MSK;	// the index of the state before rotary.ind
  #if WITH_ROTARY_SWITCH != 3
     // type 1, 2 and 5
     if ((new_state == 0) && (rotary.state[rotary.ind] == 2) && (rotary.state[old_ind] == 3)) {
    1f46:	91 11       	cpse	r25, r1
    1f48:	0e c0       	rjmp	.+28     	; 0x1f66 <check_rotary+0x5a>
        // 320 +
        rotary.count++;
    1f4a:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <rotary+0x5>
     old_ind = (rotary.ind + ROT_MSK) & ROT_MSK;	// the index of the state before rotary.ind
    1f4e:	e3 e0       	ldi	r30, 0x03	; 3
    1f50:	e8 0f       	add	r30, r24
    1f52:	e3 70       	andi	r30, 0x03	; 3
     if ((new_state == 0) && (rotary.state[rotary.ind] == 2) && (rotary.state[old_ind] == 3)) {
    1f54:	32 30       	cpi	r19, 0x02	; 2
    1f56:	c9 f4       	brne	.+50     	; 0x1f8a <check_rotary+0x7e>
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	e3 5f       	subi	r30, 0xF3	; 243
    1f5c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f5e:	30 81       	ld	r19, Z
        rotary.count++;
    1f60:	2f 5f       	subi	r18, 0xFF	; 255
     if ((new_state == 0) && (rotary.state[rotary.ind] == 2) && (rotary.state[old_ind] == 3)) {
    1f62:	33 30       	cpi	r19, 0x03	; 3
    1f64:	d9 f0       	breq	.+54     	; 0x1f9c <check_rotary+0x90>
        // 102 -
        rotary.count--;
     }
  #endif
    
     rotary.ind = (rotary.ind + 1) & ROT_MSK;	// update to next entry
    1f66:	e1 e0       	ldi	r30, 0x01	; 1
    1f68:	e8 0f       	add	r30, r24
    1f6a:	e3 70       	andi	r30, 0x03	; 3
    1f6c:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <rotary+0x4>
     rotary.state[rotary.ind] = new_state;	// save the new state to the history
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	e3 5f       	subi	r30, 0xF3	; 243
    1f74:	fe 4f       	sbci	r31, 0xFE	; 254
    1f76:	90 83       	st	Z, r25
  if ((ROTARY_B_REG & (1<<ROTARY_B_PIN)) != 0)  rotary.b_state += 1;	// switch B is high
  if (rotary.b_state == 0x80) {
     rotary.count = -1;		// set counter to -1
  }
 #endif	/* WITH_ROTARY_SWITCH == 4 */
  if (rotary.count >= 0) {
    1f78:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    1f7c:	87 fd       	sbrc	r24, 7
    1f7e:	03 c0       	rjmp	.+6      	; 0x1f86 <check_rotary+0x7a>
     rotary.incre = rotary.count;	// absolute value of count
  } else {
     rotary.incre = -rotary.count;	// absolute value of count
    1f80:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <rotary+0x6>
  }
}  /* end check_rotary() */
    1f84:	08 95       	ret
     rotary.incre = -rotary.count;	// absolute value of count
    1f86:	81 95       	neg	r24
    1f88:	fb cf       	rjmp	.-10     	; 0x1f80 <check_rotary+0x74>
     if ((new_state == 0) && (rotary.state[rotary.ind] == 1) && (rotary.state[old_ind] == 3)) {
    1f8a:	31 30       	cpi	r19, 0x01	; 1
    1f8c:	61 f7       	brne	.-40     	; 0x1f66 <check_rotary+0x5a>
    1f8e:	f0 e0       	ldi	r31, 0x00	; 0
    1f90:	e3 5f       	subi	r30, 0xF3	; 243
    1f92:	fe 4f       	sbci	r31, 0xFE	; 254
    1f94:	30 81       	ld	r19, Z
    1f96:	33 30       	cpi	r19, 0x03	; 3
    1f98:	31 f7       	brne	.-52     	; 0x1f66 <check_rotary+0x5a>
        rotary.count--;
    1f9a:	21 50       	subi	r18, 0x01	; 1
    1f9c:	20 93 12 01 	sts	0x0112, r18	; 0x800112 <rotary+0x5>
    1fa0:	e2 cf       	rjmp	.-60     	; 0x1f66 <check_rotary+0x5a>

00001fa2 <wait_for_key_ms>:
uint8_t wait_for_key_ms(int max_time) {
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	a0 e0       	ldi	r26, 0x00	; 0
    1fa6:	e7 ed       	ldi	r30, 0xD7	; 215
    1fa8:	ff e0       	ldi	r31, 0x0F	; 15
    1faa:	0c 94 dc 3d 	jmp	0x7bb8	; 0x7bb8 <__prologue_saves__+0x12>
    1fae:	f8 2e       	mov	r15, r24
    1fb0:	e9 2e       	mov	r14, r25
  ROTARY_A_DDR &= ~(1<<ROTARY_A_PIN);	// switch A to input
    1fb2:	53 98       	cbi	0x0a, 3	; 10
  ROTARY_B_DDR &= ~(1<<ROTARY_B_PIN);	// switch B to input
    1fb4:	51 98       	cbi	0x0a, 1	; 10
  wait1ms();
    1fb6:	0e 94 a3 07 	call	0xf46	; 0xf46 <wait1ms>
  rotary.count = 0;			// clear count, but don't clear the state history
    1fba:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rotary+0x5>
  rotary.state[(rotary.ind+ROT_MSK-2)&ROT_MSK] = ' ' - '0';  // for debugging
    1fbe:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <rotary+0x4>
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	31 96       	adiw	r30, 0x01	; 1
    1fc6:	e3 70       	andi	r30, 0x03	; 3
    1fc8:	ff 27       	eor	r31, r31
    1fca:	e3 5f       	subi	r30, 0xF3	; 243
    1fcc:	fe 4f       	sbci	r31, 0xFE	; 254
    1fce:	80 ef       	ldi	r24, 0xF0	; 240
    1fd0:	80 83       	st	Z, r24
    1fd2:	c5 e6       	ldi	r28, 0x65	; 101
uint8_t wait_for_key_ms(int max_time) {
    1fd4:	d9 e1       	ldi	r29, 0x19	; 25
        check_rotary();		// check for change of switch state of the rotary encoder
    1fd6:	9a df       	rcall	.-204    	; 0x1f0c <check_rotary>
        if ((RST_PIN_REG & (1<<RST_PIN)) != 0)  break; // key is released
    1fd8:	4f 9b       	sbis	0x09, 7	; 9
    1fda:	25 c0       	rjmp	.+74     	; 0x2026 <wait_for_key_ms+0x84>
     if (wait_time > 20) wait_time = 0;		// reset time window
    1fdc:	cf 2d       	mov	r28, r15
    1fde:	de 2d       	mov	r29, r14
    1fe0:	d1 2c       	mov	r13, r1
    1fe2:	15 e5       	ldi	r17, 0x55	; 85
    1fe4:	00 e0       	ldi	r16, 0x00	; 0
           rotary_switch_present = 1;		// set flag for rotary switch detected
    1fe6:	bb 24       	eor	r11, r11
    1fe8:	b3 94       	inc	r11
  while (count_time >= 0) {
    1fea:	d7 fd       	sbrc	r29, 7
    1fec:	16 c0       	rjmp	.+44     	; 0x201a <wait_for_key_ms+0x78>
    1fee:	82 e3       	ldi	r24, 0x32	; 50
        check_rotary();		// check for change of switch state of the rotary encoder
    1ff0:	c8 2e       	mov	r12, r24
    1ff2:	8c df       	rcall	.-232    	; 0x1f0c <check_rotary>
        WaitRotary();		// wait the predefined time, total 10ms
    1ff4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <wait200us>
     for (ww=0; ww < (WWend*2) ;ww++) {
    1ff8:	ca 94       	dec	r12
    1ffa:	c1 10       	cpse	r12, r1
    1ffc:	fa cf       	rjmp	.-12     	; 0x1ff2 <wait_for_key_ms+0x50>
     key_pressed += key_pressed;	// multiply with 2 is shift to left
    1ffe:	11 0f       	add	r17, r17
     if ((RST_PIN_REG & (1<<RST_PIN)) == 0) key_pressed++; // append a 1
    2000:	4f 9b       	sbis	0x09, 7	; 9
    2002:	1f 5f       	subi	r17, 0xFF	; 255
     key_pressed &= 0x3f;
    2004:	1f 73       	andi	r17, 0x3F	; 63
     if(key_pressed == 0x3f) {
    2006:	1f 33       	cpi	r17, 0x3F	; 63
    2008:	a9 f4       	brne	.+42     	; 0x2034 <wait_for_key_ms+0x92>
        if (key_cs == 0) {
    200a:	01 11       	cpse	r16, r1
    200c:	03 c0       	rjmp	.+6      	; 0x2014 <wait_for_key_ms+0x72>
           count_time = max_time;	// begin new time period
    200e:	cf 2d       	mov	r28, r15
    2010:	de 2d       	mov	r29, r14
           key_cs = 4;	// must be 7 times for 10ms hold down
    2012:	04 e0       	ldi	r16, 0x04	; 4
        key_cs++;			// count the time, the key is hold down
    2014:	0f 5f       	subi	r16, 0xFF	; 255
        if (key_cs >= MAX_CS) break;
    2016:	08 3c       	cpi	r16, 0xC8	; 200
    2018:	88 f0       	brcs	.+34     	; 0x203c <wait_for_key_ms+0x9a>
}  /* end wait_for_key_5ms(  ) */
    201a:	80 2f       	mov	r24, r16
    201c:	cd b7       	in	r28, 0x3d	; 61
    201e:	de b7       	in	r29, 0x3e	; 62
    2020:	e9 e0       	ldi	r30, 0x09	; 9
    2022:	0c 94 f8 3d 	jmp	0x7bf0	; 0x7bf0 <__epilogue_restores__+0x12>
        WaitRotary();		// wait the predefined time
    2026:	0e 94 a7 07 	call	0xf4e	; 0xf4e <wait200us>
     for (ww=0; ww < WWend; ww++) {
    202a:	d1 50       	subi	r29, 0x01	; 1
    202c:	a1 f6       	brne	.-88     	; 0x1fd6 <wait_for_key_ms+0x34>
  while (kk >= 0)  { /* wait up to 500ms until key is released */
    202e:	c1 50       	subi	r28, 0x01	; 1
    2030:	89 f6       	brne	.-94     	; 0x1fd4 <wait_for_key_ms+0x32>
    2032:	d4 cf       	rjmp	.-88     	; 0x1fdc <wait_for_key_ms+0x3a>
        if ((key_pressed == 0) && (key_cs != 0)) break;	// return, if key is released again
    2034:	11 11       	cpse	r17, r1
    2036:	02 c0       	rjmp	.+4      	; 0x203c <wait_for_key_ms+0x9a>
    2038:	01 11       	cpse	r16, r1
    203a:	ef cf       	rjmp	.-34     	; 0x201a <wait_for_key_ms+0x78>
     wdt_reset();
    203c:	a8 95       	wdr
     if (count_time > 0) {		// count only, if counter > 0
    203e:	1c 16       	cp	r1, r28
    2040:	1d 06       	cpc	r1, r29
    2042:	24 f4       	brge	.+8      	; 0x204c <wait_for_key_ms+0xaa>
        count_time -= 10;		// 10 ms are done, count down
    2044:	2a 97       	sbiw	r28, 0x0a	; 10
        if (count_time == 0) count_time = -1;	// never count to zero, zero is endless!
    2046:	11 f4       	brne	.+4      	; 0x204c <wait_for_key_ms+0xaa>
    2048:	cf ef       	ldi	r28, 0xFF	; 255
    204a:	df ef       	ldi	r29, 0xFF	; 255
     if (rotary.incre != 0) {
    204c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    2050:	88 23       	and	r24, r24
    2052:	59 f2       	breq	.-106    	; 0x1fea <wait_for_key_ms+0x48>
        wait_time++;	// start time window of 200ms
    2054:	d3 94       	inc	r13
        if (rotary_switch_present == 0) {
    2056:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <rotary_switch_present>
    205a:	81 11       	cpse	r24, r1
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <wait_for_key_ms+0xc0>
           rotary_switch_present = 1;		// set flag for rotary switch detected
    205e:	b0 92 0c 01 	sts	0x010C, r11	; 0x80010c <rotary_switch_present>
     if ((wait_time > 20) && (rotary.count != 0)) break;
    2062:	85 e1       	ldi	r24, 0x15	; 21
    2064:	d8 12       	cpse	r13, r24
    2066:	c1 cf       	rjmp	.-126    	; 0x1fea <wait_for_key_ms+0x48>
    2068:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    206c:	81 11       	cpse	r24, r1
    206e:	d5 cf       	rjmp	.-86     	; 0x201a <wait_for_key_ms+0x78>
     if (wait_time > 20) wait_time = 0;		// reset time window
    2070:	d1 2c       	mov	r13, r1
    2072:	bb cf       	rjmp	.-138    	; 0x1fea <wait_for_key_ms+0x48>

00002074 <wait_for_key_5s_line2>:
#ifdef WAIT_LINE2_CLEAR
/* *********************************************************** */
/* wait 5 seconds or previous key press, then clear last line  of LCD and */
/* set the cursor to the beginning of last line */
/* *********************************************************** */
void wait_for_key_5s_line2(void) {
    2074:	cf 93       	push	r28
  uint8_t current_line;
  current_line = lcd_save_position();
    2076:	b3 da       	rcall	.-2714   	; 0x15de <lcd_save_position>
    2078:	c8 2f       	mov	r28, r24
  if (last_line_used != 0) {
    207a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_line_used>
    207e:	88 23       	and	r24, r24
    2080:	01 f1       	breq	.+64     	; 0x20c2 <wait_for_key_5s_line2+0x4e>
  if ((last_line_used == 1) && (current_line == (LCD_LINES-1))) {
    2082:	81 30       	cpi	r24, 0x01	; 1
    2084:	51 f4       	brne	.+20     	; 0x209a <wait_for_key_5s_line2+0x26>
    2086:	c7 30       	cpi	r28, 0x07	; 7
    2088:	41 f4       	brne	.+16     	; 0x209a <wait_for_key_5s_line2+0x26>
     // add a + sign at the last location of screen
     lcd_set_cursor(((LCD_LINES - 1) * PAGES_PER_LINE), (LCD_LINE_LENGTH - 1));
    208a:	63 e1       	ldi	r22, 0x13	; 19
    208c:	8e e0       	ldi	r24, 0x0E	; 14
    208e:	7f da       	rcall	.-2818   	; 0x158e <lcd_set_cursor>
     lcd_data('+');
    2090:	8b e2       	ldi	r24, 0x2B	; 43
    2092:	4a dc       	rcall	.-1900   	; 0x1928 <lcd_data>
     lcd_set_cursor(((LCD_LINES - 1) * PAGES_PER_LINE), (LCD_LINE_LENGTH - 1));
    2094:	63 e1       	ldi	r22, 0x13	; 19
    2096:	8e e0       	ldi	r24, 0x0E	; 14
    2098:	7a da       	rcall	.-2828   	; 0x158e <lcd_set_cursor>
  };
 #ifdef WITH_ROTARY_SWITCH
  do {
     if (wait_for_key_ms(SHORT_WAIT_TIME) > 0) break;
    209a:	80 e4       	ldi	r24, 0x40	; 64
    209c:	9f e1       	ldi	r25, 0x1F	; 31
    209e:	81 df       	rcall	.-254    	; 0x1fa2 <wait_for_key_ms>
    20a0:	81 11       	cpse	r24, r1
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <wait_for_key_5s_line2+0x38>
    20a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
     // continue waiting, if the key is not pressed, but rotary switch is rotated
  } while (rotary.incre > 0);
    20a8:	81 11       	cpse	r24, r1
    20aa:	f7 cf       	rjmp	.-18     	; 0x209a <wait_for_key_5s_line2+0x26>
    20ac:	c7 30       	cpi	r28, 0x07	; 7
 #else
  wait_for_key_ms(SHORT_WAIT_TIME);	// wait until time is elapsed or key is pressed
 #endif
  if ((current_line == (LCD_LINES - 1)) && (last_line_used == 1)) {
    20ae:	41 f4       	brne	.+16     	; 0x20c0 <wait_for_key_5s_line2+0x4c>
    20b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_line_used>
    20b4:	81 30       	cpi	r24, 0x01	; 1
     lcd_set_cursor((LCD_LINES-1) * PAGES_PER_LINE,0);
    20b6:	21 f4       	brne	.+8      	; 0x20c0 <wait_for_key_5s_line2+0x4c>
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	8e e0       	ldi	r24, 0x0E	; 14
    20bc:	68 da       	rcall	.-2864   	; 0x158e <lcd_set_cursor>
     lcd_clear_line();		// clear the whole line
    20be:	18 db       	rcall	.-2512   	; 0x16f0 <lcd_clear_line>
    20c0:	97 da       	rcall	.-2770   	; 0x15f0 <lcd_restore_position>
  }
  lcd_restore_position();
    20c2:	cf 91       	pop	r28
    20c4:	08 95       	ret

000020c6 <__vector_7>:
	#define MAIN_C
	#include "Transistortester.h"

	#ifndef INHIBIT_SLEEP_MODE
	  // prepare sleep mode
	  EMPTY_INTERRUPT(TIMER2_COMPA_vect);
    20c6:	18 95       	reti

000020c8 <__vector_21>:
	#endif
        #if !defined(INHIBIT_SLEEP_MODE) || defined(SamplingADC)
	  // ADC_vect is always required by samplingADC()
	  EMPTY_INTERRUPT(ADC_vect);
    20c8:	18 95       	reti

000020ca <search_vak_diode>:

// function search_vak_diode try to find a diode, which has no side connected to the transistor base
// returns 20, if no diode found
uint8_t search_vak_diode() {
    uint8_t ii;
    for (ii=0; ii<NumOfDiodes; ii++) {
    20ca:	40 91 85 01 	lds	r20, 0x0185	; 0x800185 <NumOfDiodes>
			if ((diodes.Anode[ii] == _trans->b)
    20ce:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_trans>
    20d2:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_trans+0x1>
    20d6:	e6 e8       	ldi	r30, 0x86	; 134
    20d8:	f1 e0       	ldi	r31, 0x01	; 1
    for (ii=0; ii<NumOfDiodes; ii++) {
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	82 2f       	mov	r24, r18
    20e0:	24 17       	cp	r18, r20
    20e2:	b0 f4       	brcc	.+44     	; 0x2110 <search_vak_diode+0x46>
			if ((diodes.Anode[ii] == _trans->b)
    20e4:	51 91       	ld	r21, Z+
    20e6:	1c 96       	adiw	r26, 0x0c	; 12
    20e8:	9c 91       	ld	r25, X
    20ea:	1c 97       	sbiw	r26, 0x0c	; 12
    20ec:	59 17       	cp	r21, r25
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <search_vak_diode+0x2c>
					|| (diodes.Cathode[ii] == _trans->b))
    20f0:	55 81       	ldd	r21, Z+5	; 0x05
    20f2:	95 13       	cpse	r25, r21
    20f4:	03 c0       	rjmp	.+6      	; 0x20fc <search_vak_diode+0x32>
    for (ii=0; ii<NumOfDiodes; ii++) {
    20f6:	2f 5f       	subi	r18, 0xFF	; 255
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	f1 cf       	rjmp	.-30     	; 0x20de <search_vak_diode+0x14>
				continue;
       // no side of the diode is connected to the base, this must be the protection diode   
       if (diodes.Voltage[ii] > 1000) break; // Voltage is too high for protection diode
    20fc:	22 0f       	add	r18, r18
    20fe:	33 1f       	adc	r19, r19
    2100:	f9 01       	movw	r30, r18
    2102:	ee 56       	subi	r30, 0x6E	; 110
    2104:	fe 4f       	sbci	r31, 0xFE	; 254
    2106:	20 81       	ld	r18, Z
    2108:	31 81       	ldd	r19, Z+1	; 0x01
    210a:	29 3e       	cpi	r18, 0xE9	; 233
    210c:	33 40       	sbci	r19, 0x03	; 3
    210e:	08 f0       	brcs	.+2      	; 0x2112 <search_vak_diode+0x48>
       return ii;
    }
    return 20;
    2110:	84 e1       	ldi	r24, 0x14	; 20
}
    2112:	08 95       	ret

00002114 <init_parts>:

/* init_parts initialize all parts to nothing found */
void init_parts(void) {
  PartFound = PART_NONE;	// no part found
    2114:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>
  NumOfDiodes = 0;		// Number of diodes = 0
    2118:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <NumOfDiodes>
  ptrans.count = 0;		// Number of found P type transistors
    211c:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <ptrans+0xf>
  ntrans.count = 0;		// Number of found N type transistors
    2120:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <ntrans+0xf>
  PartMode = PART_MODE_NONE;
    2124:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <PartMode>
  WithReference = 0;		// no precision reference voltage
    2128:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <WithReference>
  ResistorsFound = 0;		// no resistors found
    212c:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <ResistorsFound>
  ResistorChecked[0] = 0;
    2130:	e4 ea       	ldi	r30, 0xA4	; 164
    2132:	f1 e0       	ldi	r31, 0x01	; 1
    2134:	10 82       	st	Z, r1
  ResistorChecked[1] = 0;
    2136:	11 82       	std	Z+1, r1	; 0x01
  ResistorChecked[2] = 0;
    2138:	12 82       	std	Z+2, r1	; 0x02
  cap.ca = TP1;
    213a:	ec e3       	ldi	r30, 0x3C	; 60
    213c:	f1 e0       	ldi	r31, 0x01	; 1
    213e:	10 8a       	std	Z+16, r1	; 0x10
  cap.cb = TP3;
    2140:	82 e0       	ldi	r24, 0x02	; 2
    2142:	81 8b       	std	Z+17, r24	; 0x11
#if FLASHEND > 0x1fff
  inductor_lpre = 0;		// mark as zero
    2144:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <inductor_lpre>
  cap.v_loss = 0;		// set Vloss to zero
    2148:	17 86       	std	Z+15, r1	; 0x0f
    214a:	16 86       	std	Z+14, r1	; 0x0e
#endif
  cap.cval_max = 0;		// set max to zero
    214c:	14 82       	std	Z+4, r1	; 0x04
    214e:	15 82       	std	Z+5, r1	; 0x05
    2150:	16 82       	std	Z+6, r1	; 0x06
    2152:	17 82       	std	Z+7, r1	; 0x07
  cap.cpre_max = -15;	// set max to fF unit
    2154:	81 ef       	ldi	r24, 0xF1	; 241
    2156:	83 8b       	std	Z+19, r24	; 0x13
}
    2158:	08 95       	ret

0000215a <switch_tester_off>:
  uart_newline();	// MAURO
 #endif
 #if ((LCD_ST_TYPE == 7565) || (LCD_ST_TYPE == 1306))
  lcd_powersave();			// set graphical display to power save mode
 #endif
  ON_PORT &= ~(1<<ON_PIN);		//switch off power
    215a:	5e 98       	cbi	0x0b, 6	; 11
  wait2s();
    215c:	0e 94 92 07 	call	0xf24	; 0xf24 <wait2s>
  wait_for_key_ms(0); //never ending loop 
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	1e cf       	rjmp	.-452    	; 0x1fa2 <wait_for_key_ms>
}
    2166:	08 95       	ret

00002168 <ShortedProbes>:
 *  - 0 if not shorted
 *  - 1 if shorted
 */

uint8_t ShortedProbes(uint8_t Probe1, uint8_t Probe2)
{
    2168:	1f 93       	push	r17
    216a:	cf 93       	push	r28
    216c:	df 93       	push	r29
    216e:	16 2f       	mov	r17, r22
   *  Set up a voltage divider between the two probes:
   *  - Probe1: Rl pull-up
   *  - Probe2: Rl pull-down
   */

  ADC_DDR =  TXD_MSK;		// all-Pins to Input
    2170:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    2172:	18 b8       	out	0x08, r1	; 8
  addr = &PinRLRHADCtab[Probe1];
    2174:	e8 2f       	mov	r30, r24
    2176:	f0 e0       	ldi	r31, 0x00	; 0
    2178:	ef 5b       	subi	r30, 0xBF	; 191
    217a:	fd 4f       	sbci	r31, 0xFD	; 253
  pp = pgm_read_byte(addr);
    217c:	94 91       	lpm	r25, Z
  R_PORT = pp;
    217e:	95 b9       	out	0x05, r25	; 5
  addr += (int8_t)(Probe2-Probe1);
    2180:	26 2f       	mov	r18, r22
    2182:	28 1b       	sub	r18, r24
    2184:	e2 0f       	add	r30, r18
    2186:	f1 1d       	adc	r31, r1
    2188:	27 fd       	sbrc	r18, 7
    218a:	fa 95       	dec	r31
  R_DDR =  pp | pgm_read_byte(addr);	// pgm_read_byte(PinRHtab[Probe1]) | pgm_read_byte(PinRLtab[Probe2]);
    218c:	e4 91       	lpm	r30, Z
    218e:	e9 2b       	or	r30, r25
    2190:	e4 b9       	out	0x04, r30	; 4

  /* read voltages */
  U1 = ReadADC(Probe1);
    2192:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    2196:	ec 01       	movw	r28, r24
  U2 = ReadADC(Probe2);
    2198:	81 2f       	mov	r24, r17
    219a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    219e:	ac 01       	movw	r20, r24
   */
 #ifndef MAX_UH_DIFF
  #define MAX_UH_DIFF 30
 #endif

  URH = ADCconfig.U_AVCC / 2;
    21a0:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    21a4:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    21a8:	36 95       	lsr	r19
    21aa:	27 95       	ror	r18
  URH -= ((long)U_VCC * (long)(PIN_RP-PIN_RM)) / (4*(unsigned long)(R_L_VAL+PIN_RM));			// differenz of Pin resistance high (22) and low (20)
    21ac:	c9 01       	movw	r24, r18
    21ae:	03 97       	sbiw	r24, 0x03	; 3
  if (((U1 + MAX_UH_DIFF) > URH ) && (U1 < (URH + MAX_UH_DIFF)))
    21b0:	be 01       	movw	r22, r28
    21b2:	62 5e       	subi	r22, 0xE2	; 226
    21b4:	7f 4f       	sbci	r23, 0xFF	; 255
    21b6:	86 17       	cp	r24, r22
    21b8:	97 07       	cpc	r25, r23
    21ba:	78 f4       	brcc	.+30     	; 0x21da <ShortedProbes+0x72>
    21bc:	25 5e       	subi	r18, 0xE5	; 229
    21be:	3f 4f       	sbci	r19, 0xFF	; 255
    21c0:	c2 17       	cp	r28, r18
    21c2:	d3 07       	cpc	r29, r19
    21c4:	50 f4       	brcc	.+20     	; 0x21da <ShortedProbes+0x72>
  {
    if (((U2 + MAX_UH_DIFF) > URH) && (U2 < (URH + MAX_UH_DIFF)))
    21c6:	ba 01       	movw	r22, r20
    21c8:	62 5e       	subi	r22, 0xE2	; 226
    21ca:	7f 4f       	sbci	r23, 0xFF	; 255
    21cc:	86 17       	cp	r24, r22
    21ce:	97 07       	cpc	r25, r23
    21d0:	20 f4       	brcc	.+8      	; 0x21da <ShortedProbes+0x72>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	42 17       	cp	r20, r18
    21d6:	53 07       	cpc	r21, r19
    21d8:	08 f0       	brcs	.+2      	; 0x21dc <ShortedProbes+0x74>
  uint8_t           Flag1 = 0;      /* return value */
    21da:	80 e0       	ldi	r24, 0x00	; 0
      Flag1 = 1;
    }
  }

  /* reset port */
  R_DDR = 0;
    21dc:	14 b8       	out	0x04, r1	; 4

  return Flag1;
}
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	08 95       	ret

000021e6 <AllProbesShorted>:
 *  - 0 if no probes are short-circuited
 *  - number of probe pairs short-circuited (3 = all)
 */

uint8_t AllProbesShorted(void)
{
    21e6:	cf 93       	push	r28
  uint8_t           Flag2;      /* return value */

  /* check all possible combinations */
  Flag2 = ShortedProbes(TP1, TP2);
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	bd df       	rcall	.-134    	; 0x2168 <ShortedProbes>
    21ee:	c8 2f       	mov	r28, r24
  Flag2 += ShortedProbes(TP1, TP3);
    21f0:	62 e0       	ldi	r22, 0x02	; 2
    21f2:	80 e0       	ldi	r24, 0x00	; 0
    21f4:	b9 df       	rcall	.-142    	; 0x2168 <ShortedProbes>
    21f6:	c8 0f       	add	r28, r24
  Flag2 += ShortedProbes(TP2, TP3);
    21f8:	62 e0       	ldi	r22, 0x02	; 2
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	b5 df       	rcall	.-150    	; 0x2168 <ShortedProbes>

  return Flag2;
}
    21fe:	8c 0f       	add	r24, r28
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <AutoCheck>:
void AutoCheck(uint8_t test_mode) {
    2204:	a6 e1       	ldi	r26, 0x16	; 22
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e8 e0       	ldi	r30, 0x08	; 8
    220a:	f1 e1       	ldi	r31, 0x11	; 17
    220c:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>
    2210:	b8 2e       	mov	r11, r24
PartFound = PART_NONE;		// no part found before
    2212:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>
if ((test_mode & 0xf0) == 0) {
    2216:	80 7f       	andi	r24, 0xF0	; 240
    2218:	b9 f4       	brne	.+46     	; 0x2248 <AutoCheck+0x44>
  if (AllProbesShorted() != 3) return;
    221a:	e5 df       	rcall	.-54     	; 0x21e6 <AllProbesShorted>
    221c:	83 30       	cpi	r24, 0x03	; 3
  lcd_clear();
    221e:	81 f4       	brne	.+32     	; 0x2240 <AutoCheck+0x3c>
    2220:	fc d9       	rcall	.-3080   	; 0x161a <lcd_clear>
  lcd_MEM_string(SELFTEST);		// "Selftest mode.."
    2222:	8f e4       	ldi	r24, 0x4F	; 79
    2224:	92 e0       	ldi	r25, 0x02	; 2
  lcd_line2();
    2226:	d8 db       	rcall	.-2128   	; 0x19d8 <lcd_fix_string>
    2228:	c5 d9       	rcall	.-3190   	; 0x15b4 <lcd_line2>
  lcd_data('?');			// wait for key pressed for confirmation
    222a:	8f e3       	ldi	r24, 0x3F	; 63
    222c:	7d db       	rcall	.-2310   	; 0x1928 <lcd_data>
  if (wait_for_key_ms(2000) > 10) goto begin_selftest;	// key is pressed again
    222e:	80 ed       	ldi	r24, 0xD0	; 208
    2230:	97 e0       	ldi	r25, 0x07	; 7
    2232:	b7 de       	rcall	.-658    	; 0x1fa2 <wait_for_key_ms>
    2234:	8b 30       	cpi	r24, 0x0B	; 11
    2236:	b0 f4       	brcc	.+44     	; 0x2264 <AutoCheck+0x60>
lcd_clear();
    2238:	f0 d9       	rcall	.-3104   	; 0x161a <lcd_clear>
    223a:	85 ef       	ldi	r24, 0xF5	; 245
lcd_MEM_string(VERSION_str);	//"Version ..."
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	cc db       	rcall	.-2152   	; 0x19d8 <lcd_fix_string>
    2240:	66 96       	adiw	r28, 0x16	; 22
} /* end AutoCheck */ 
    2242:	e2 e1       	ldi	r30, 0x12	; 18
    2244:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>
  ww = 0;
    2248:	06 e9       	ldi	r16, 0x96	; 150
    lcd_clear();
    224a:	10 e0       	ldi	r17, 0x00	; 0
    224c:	e6 d9       	rcall	.-3124   	; 0x161a <lcd_clear>
    lcd_MEM2_string(SHORT_PROBES_str);	// message "Short probes!" to LCD
    224e:	8e eb       	ldi	r24, 0xBE	; 190
    2250:	91 e0       	ldi	r25, 0x01	; 1
    2252:	c2 db       	rcall	.-2172   	; 0x19d8 <lcd_fix_string>
    if (AllProbesShorted() == 3) {
    2254:	c8 df       	rcall	.-112    	; 0x21e6 <AllProbesShorted>
    2256:	83 30       	cpi	r24, 0x03	; 3
    2258:	09 f0       	breq	.+2      	; 0x225c <AutoCheck+0x58>
    225a:	68 c0       	rjmp	.+208    	; 0x232c <AutoCheck+0x128>
       ww++;	// all probes now shorted
    225c:	1f 5f       	subi	r17, 0xFF	; 255
    if (ww > 3) break;	// connection seems to be stable
    225e:	14 30       	cpi	r17, 0x04	; 4
    2260:	08 f4       	brcc	.+2      	; 0x2264 <AutoCheck+0x60>
    2262:	65 c0       	rjmp	.+202    	; 0x232e <AutoCheck+0x12a>
lcd_line2();
    2264:	a7 d9       	rcall	.-3250   	; 0x15b4 <lcd_line2>
    2266:	0e 94 00 29 	call	0x5200	; 0x5200 <Calibrate_UR>
Calibrate_UR();		// get Reference voltage, Pin resistance
    226a:	81 eb       	ldi	r24, 0xB1	; 177
lcd_MEM2_string(R0_str);		// "R0="
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	b4 db       	rcall	.-2200   	; 0x19d8 <lcd_fix_string>
    2270:	60 e0       	ldi	r22, 0x00	; 0
    2272:	89 e1       	ldi	r24, 0x19	; 25
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (uint8_t)0);	// clear zero offset
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	8a e1       	ldi	r24, 0x1A	; 26
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (uint8_t)0);	// clear zero offset
    227e:	93 e0       	ldi	r25, 0x03	; 3
    2280:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	88 e1       	ldi	r24, 0x18	; 24
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (uint8_t)0);	// clear zero offset
    2288:	93 e0       	ldi	r25, 0x03	; 3
    228a:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	82 e0       	ldi	r24, 0x02	; 2
adcmv[0] = GetESR(TP3, TP1);
    2292:	0e 94 1a 09 	call	0x1234	; 0x1234 <GetESR>
    2296:	6c 01       	movw	r12, r24
    2298:	9a 83       	std	Y+2, r25	; 0x02
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	82 e0       	ldi	r24, 0x02	; 2
adcmv[1] = GetESR(TP3, TP2);
    22a0:	0e 94 1a 09 	call	0x1234	; 0x1234 <GetESR>
    22a4:	7c 01       	movw	r14, r24
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
    22aa:	60 e0       	ldi	r22, 0x00	; 0
adcmv[2] = GetESR(TP2, TP1);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	0e 94 1a 09 	call	0x1234	; 0x1234 <GetESR>
    22b2:	8c 01       	movw	r16, r24
    22b4:	9e 83       	std	Y+6, r25	; 0x06
    22b6:	8d 83       	std	Y+5, r24	; 0x05
DisplayValue16(adcmv[0],-2,' ',3);
    22b8:	23 e0       	ldi	r18, 0x03	; 3
    22ba:	40 e2       	ldi	r20, 0x20	; 32
    22bc:	6e ef       	ldi	r22, 0xFE	; 254
    22be:	c6 01       	movw	r24, r12
    22c0:	c0 dc       	rcall	.-1664   	; 0x1c42 <DisplayValue16>
DisplayValue16(adcmv[1],-2,' ',3);
    22c2:	23 e0       	ldi	r18, 0x03	; 3
    22c4:	40 e2       	ldi	r20, 0x20	; 32
    22c6:	6e ef       	ldi	r22, 0xFE	; 254
    22c8:	c7 01       	movw	r24, r14
    22ca:	bb dc       	rcall	.-1674   	; 0x1c42 <DisplayValue16>
    22cc:	23 e0       	ldi	r18, 0x03	; 3
DisplayValue16(adcmv[2],-2,LCD_CHAR_OMEGA,3);
    22ce:	4d e1       	ldi	r20, 0x1D	; 29
    22d0:	6e ef       	ldi	r22, 0xFE	; 254
    22d2:	c8 01       	movw	r24, r16
    22d4:	b6 dc       	rcall	.-1684   	; 0x1c42 <DisplayValue16>
    22d6:	2a e5       	ldi	r18, 0x5A	; 90
    22d8:	c2 16       	cp	r12, r18
if (adcmv[0] >= 90) {
    22da:	d1 04       	cpc	r13, r1
    22dc:	24 f0       	brlt	.+8      	; 0x22e6 <AutoCheck+0xe2>
    22de:	84 e1       	ldi	r24, 0x14	; 20
    22e0:	90 e0       	ldi	r25, 0x00	; 0
  adcmv[0] = ESR_ZERO;	// set back to default value
    22e2:	9a 83       	std	Y+2, r25	; 0x02
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	69 81       	ldd	r22, Y+1	; 0x01
    22e8:	89 e1       	ldi	r24, 0x19	; 25
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[2]), (uint8_t)adcmv[0]);	// fix zero offset
    22ea:	93 e0       	ldi	r25, 0x03	; 3
    22ec:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    22f0:	8a e5       	ldi	r24, 0x5A	; 90
    22f2:	e8 16       	cp	r14, r24
if (adcmv[1] >= 90) {
    22f4:	f1 04       	cpc	r15, r1
    22f6:	24 f0       	brlt	.+8      	; 0x2300 <AutoCheck+0xfc>
    22f8:	84 e1       	ldi	r24, 0x14	; 20
    22fa:	90 e0       	ldi	r25, 0x00	; 0
  adcmv[1] = ESR_ZERO;	// set back to default value
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	6b 81       	ldd	r22, Y+3	; 0x03
    2302:	8a e1       	ldi	r24, 0x1A	; 26
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[3]), (uint8_t)adcmv[1]);	// fix zero offset
    2304:	93 e0       	ldi	r25, 0x03	; 3
    2306:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    230a:	0a 35       	cpi	r16, 0x5A	; 90
if (adcmv[2] >= 90) {
    230c:	11 05       	cpc	r17, r1
    230e:	24 f0       	brlt	.+8      	; 0x2318 <AutoCheck+0x114>
    2310:	84 e1       	ldi	r24, 0x14	; 20
  adcmv[2] = ESR_ZERO;	// set back to default value
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	6d 81       	ldd	r22, Y+5	; 0x05
eeprom_write_byte((uint8_t *)(&EE_ESR_ZEROtab[1]), (uint8_t)adcmv[2]);	// fix zero offset
    231a:	88 e1       	ldi	r24, 0x18	; 24
    231c:	93 e0       	ldi	r25, 0x03	; 3
    231e:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    2322:	82 e0       	ldi	r24, 0x02	; 2
last_line_used = 2;
    2324:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
    2328:	a5 de       	rcall	.-694    	; 0x2074 <wait_for_key_5s_line2>
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    232a:	07 c0       	rjmp	.+14     	; 0x233a <AutoCheck+0x136>
    232c:	10 e0       	ldi	r17, 0x00	; 0
    232e:	88 e2       	ldi	r24, 0x28	; 40
       ww = 0;	// connection not stable, retry
    2330:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
    wait_about200ms();			// wait 200ms and try again
    2334:	01 50       	subi	r16, 0x01	; 1
    2336:	09 f0       	breq	.+2      	; 0x233a <AutoCheck+0x136>
  for (tt=0;tt<150;tt++) {	/* wait about 30 seconds for shorted probes */
    2338:	89 cf       	rjmp	.-238    	; 0x224c <AutoCheck+0x48>
    233a:	1b 2d       	mov	r17, r11
    233c:	1f 70       	andi	r17, 0x0F	; 15
if((test_mode & 0x0f) == 1) {  /* full test requested */
    233e:	11 30       	cpi	r17, 0x01	; 1
    2340:	09 f0       	breq	.+2      	; 0x2344 <AutoCheck+0x140>
    2342:	51 c0       	rjmp	.+162    	; 0x23e6 <AutoCheck+0x1e2>
    2344:	ee 24       	eor	r14, r14
    2346:	e3 94       	inc	r14
    2348:	f1 2c       	mov	r15, r1
    234a:	78 eb       	ldi	r23, 0xB8	; 184
    234c:	87 2e       	mov	r8, r23
      u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + (unsigned long)R_H_VAL*100));
    234e:	72 ed       	ldi	r23, 0xD2	; 210
    2350:	97 2e       	mov	r9, r23
    2352:	77 e4       	ldi	r23, 0x47	; 71
    2354:	a7 2e       	mov	r10, r23
      R_PORT = 1<<PIN_RH1;		//RH1 to VCC
    2356:	b1 2c       	mov	r11, r1
    2358:	e2 e0       	ldi	r30, 0x02	; 2
      R_PORT = 1<<PIN_RH2;		//RH2 to VCC
    235a:	de 2e       	mov	r13, r30
    235c:	f8 e0       	ldi	r31, 0x08	; 8
      R_PORT = 1<<PIN_RH3;		//RH3 to VCC
    235e:	cf 2e       	mov	r12, r31
    2360:	a0 e2       	ldi	r26, 0x20	; 32
for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    2362:	3a 2e       	mov	r3, r26
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
    2364:	1f 86       	std	Y+15, r1	; 0x0f
    2366:	0e 2d       	mov	r16, r14
   lcd_clear_line2();		// clear total line 2
    2368:	5a e0       	ldi	r21, 0x0A	; 10
    236a:	25 2e       	mov	r2, r21
   lcd_clear_line1();		// clear total line 1
    236c:	e8 d9       	rcall	.-3120   	; 0x173e <lcd_clear_line2>
   lcd_data('T');			//output the Testmode "T"
    236e:	e3 d9       	rcall	.-3130   	; 0x1736 <lcd_clear_line1>
    2370:	84 e5       	ldi	r24, 0x54	; 84
   u2lcd(tt);		//lcd_string(utoa(tt, outval, 10));	//output Test number
    2372:	da da       	rcall	.-2636   	; 0x1928 <lcd_data>
    2374:	c7 01       	movw	r24, r14
   lcd_space();
    2376:	0e 94 99 06 	call	0xd32	; 0xd32 <u2lcd>
   if (tt == 1) {   // output of reference voltage and factors for capacity measurement
    237a:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
    237e:	01 30       	cpi	r16, 0x01	; 1
      lcd_MEM2_string(URef_str);	//"URef="
    2380:	09 f0       	breq	.+2      	; 0x2384 <AutoCheck+0x180>
    2382:	d5 c1       	rjmp	.+938    	; 0x272e <AutoCheck+0x52a>
    2384:	84 ee       	ldi	r24, 0xE4	; 228
    2386:	90 e0       	ldi	r25, 0x00	; 0
      Display_mV(ref_mv,4);
    2388:	27 db       	rcall	.-2482   	; 0x19d8 <lcd_fix_string>
    238a:	64 e0       	ldi	r22, 0x04	; 4
    238c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <ref_mv>
    2390:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <ref_mv+0x1>
      lcd_line2();			//Cursor to column 1, row 2
    2394:	76 dc       	rcall	.-1812   	; 0x1c82 <Display_mV>
    2396:	0e d9       	rcall	.-3556   	; 0x15b4 <lcd_line2>
      lcd_MEM2_string(RHfakt_str);	//"RHf="
    2398:	8f ed       	ldi	r24, 0xDF	; 223
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	1d db       	rcall	.-2502   	; 0x19d8 <lcd_fix_string>
    239e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <RHmultip>
      u2lcd(RHmultip);	//lcd_string(utoa(RHmultip, outval, 10));
    23a2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <RHmultip+0x1>
    23a6:	0e 94 99 06 	call	0xd32	; 0xd32 <u2lcd>
      ADCconfig.Samples = R_ANZ_MESS;	// set number of ADC reads near to maximum
    23aa:	8e eb       	ldi	r24, 0xBE	; 190
    23ac:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
   ADC_DDR =  TXD_MSK;		// all-Pins to Input
    23b0:	17 b8       	out	0x07, r1	; 7
   ADC_PORT = TXD_VAL;		// all ADC-Ports to GND
    23b2:	18 b8       	out	0x08, r1	; 8
   R_DDR = 0;			// all R-Ports to Input
    23b4:	14 b8       	out	0x04, r1	; 4
   R_PORT = 0;
    23b6:	15 b8       	out	0x05, r1	; 5
   taste = wait_for_key_ms(1000);	// wait up to 1 second or key is pressed
    23b8:	88 ee       	ldi	r24, 0xE8	; 232
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	f2 dd       	rcall	.-1052   	; 0x1fa2 <wait_for_key_ms>
   if ((tt != 4) && (taste > 10)) {
    23be:	04 30       	cpi	r16, 0x04	; 4
    23c0:	11 f0       	breq	.+4      	; 0x23c6 <AutoCheck+0x1c2>
    23c2:	8b 30       	cpi	r24, 0x0B	; 11
for(ww=0;ww<MAX_REP;ww++) {	// repeat the test MAX_REP times
    23c4:	28 f4       	brcc	.+10     	; 0x23d0 <AutoCheck+0x1cc>
    23c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    23c8:	9f 5f       	subi	r25, 0xFF	; 255
    23ca:	9f 87       	std	Y+15, r25	; 0x0f
    23cc:	94 30       	cpi	r25, 0x04	; 4
wait_for_key_ms(1000);	// wait up to 1 second or key is pressed
    23ce:	71 f6       	brne	.-100    	; 0x236c <AutoCheck+0x168>
    23d0:	88 ee       	ldi	r24, 0xE8	; 232
for(tt=1;tt<TEST_COUNT;tt++) {		// loop for all Tests
    23d2:	93 e0       	ldi	r25, 0x03	; 3
    23d4:	e6 dd       	rcall	.-1076   	; 0x1fa2 <wait_for_key_ms>
    23d6:	af ef       	ldi	r26, 0xFF	; 255
    23d8:	ea 1a       	sub	r14, r26
    23da:	fa 0a       	sbc	r15, r26
    23dc:	b8 e0       	ldi	r27, 0x08	; 8
    23de:	eb 16       	cp	r14, r27
    23e0:	f1 04       	cpc	r15, r1
  if (AllProbesShorted() == 0) break;
    23e2:	09 f0       	breq	.+2      	; 0x23e6 <AutoCheck+0x1e2>
    23e4:	bf cf       	rjmp	.-130    	; 0x2364 <AutoCheck+0x160>
    23e6:	08 e7       	ldi	r16, 0x78	; 120
lcd_clear();
    23e8:	fe de       	rcall	.-516    	; 0x21e6 <AllProbesShorted>
lcd_MEM_string(RIHI_str);	// "RiHi="
    23ea:	81 11       	cpse	r24, r1
    23ec:	a1 c2       	rjmp	.+1346   	; 0x2930 <AutoCheck+0x72c>
    23ee:	15 d9       	rcall	.-3542   	; 0x161a <lcd_clear>
DisplayValue16(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    23f0:	8a ea       	ldi	r24, 0xAA	; 170
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	f1 da       	rcall	.-2590   	; 0x19d8 <lcd_fix_string>
    23f6:	23 e0       	ldi	r18, 0x03	; 3
    23f8:	4d e1       	ldi	r20, 0x1D	; 29
    23fa:	6f ef       	ldi	r22, 0xFF	; 255
    23fc:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pin_rpl>
lcd_line2();
    2400:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pin_rpl+0x1>
lcd_MEM_string(RILO_str);	// "RiLo="
    2404:	1e dc       	rcall	.-1988   	; 0x1c42 <DisplayValue16>
    2406:	d6 d8       	rcall	.-3668   	; 0x15b4 <lcd_line2>
    2408:	83 ea       	ldi	r24, 0xA3	; 163
    240a:	90 e0       	ldi	r25, 0x00	; 0
DisplayValue16(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    240c:	e5 da       	rcall	.-2614   	; 0x19d8 <lcd_fix_string>
    240e:	23 e0       	ldi	r18, 0x03	; 3
    2410:	4d e1       	ldi	r20, 0x1D	; 29
    2412:	6f ef       	ldi	r22, 0xFF	; 255
    2414:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pin_rmi>
    2418:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pin_rmi+0x1>
    241c:	12 dc       	rcall	.-2012   	; 0x1c42 <DisplayValue16>
last_line_used = 2;
    241e:	82 e0       	ldi	r24, 0x02	; 2
    2420:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    2424:	27 de       	rcall	.-946    	; 0x2074 <wait_for_key_5s_line2>
    2426:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>
PartFound = PART_NONE;
    242a:	f7 d8       	rcall	.-3602   	; 0x161a <lcd_clear>
lcd_clear();
    242c:	8f e9       	ldi	r24, 0x9F	; 159
    242e:	90 e0       	ldi	r25, 0x00	; 0
lcd_MEM_string(C0_str);			//output "C0 "
    2430:	d3 da       	rcall	.-2650   	; 0x19d8 <lcd_fix_string>
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
ReadCapacity(TP3, TP1);
    243a:	40 90 44 01 	lds	r4, 0x0144	; 0x800144 <cap+0x8>
    243e:	50 90 45 01 	lds	r5, 0x0145	; 0x800145 <cap+0x9>
adcmv[5] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:3
    2442:	60 90 46 01 	lds	r6, 0x0146	; 0x800146 <cap+0xa>
    2446:	70 90 47 01 	lds	r7, 0x0147	; 0x800147 <cap+0xb>
    244a:	5c 86       	std	Y+12, r5	; 0x0c
    244c:	4b 86       	std	Y+11, r4	; 0x0b
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	82 e0       	ldi	r24, 0x02	; 2
    2452:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
ReadCapacity(TP3, TP2);
    2456:	80 90 44 01 	lds	r8, 0x0144	; 0x800144 <cap+0x8>
    245a:	90 90 45 01 	lds	r9, 0x0145	; 0x800145 <cap+0x9>
adcmv[6] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:3
    245e:	a0 90 46 01 	lds	r10, 0x0146	; 0x800146 <cap+0xa>
    2462:	b0 90 47 01 	lds	r11, 0x0147	; 0x800147 <cap+0xb>
    2466:	9e 86       	std	Y+14, r9	; 0x0e
    2468:	8d 86       	std	Y+13, r8	; 0x0d
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
ReadCapacity(TP2, TP1);
    2472:	c0 90 44 01 	lds	r12, 0x0144	; 0x800144 <cap+0x8>
    2476:	d0 90 45 01 	lds	r13, 0x0145	; 0x800145 <cap+0x9>
adcmv[2] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 1:2
    247a:	de 82       	std	Y+6, r13	; 0x06
    247c:	cd 82       	std	Y+5, r12	; 0x05
    247e:	62 e0       	ldi	r22, 0x02	; 2
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
ReadCapacity(TP1, TP3);
    2486:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cap+0x8>
    248a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cap+0x9>
adcmv[1] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:1
    248e:	9c 83       	std	Y+4, r25	; 0x04
    2490:	8b 83       	std	Y+3, r24	; 0x03
    2492:	62 e0       	ldi	r22, 0x02	; 2
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
ReadCapacity(TP2, TP3);
    249a:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cap+0x8>
    249e:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cap+0x9>
adcmv[4] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 3:2
    24a2:	9a 87       	std	Y+10, r25	; 0x0a
    24a4:	89 87       	std	Y+9, r24	; 0x09
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	80 e0       	ldi	r24, 0x00	; 0
ReadCapacity(TP1, TP2);
    24aa:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    24ae:	e0 90 44 01 	lds	r14, 0x0144	; 0x800144 <cap+0x8>
adcmv[0] = (unsigned int) cap.cval_uncorrected.dw;	//save capacity value of empty Pin 2:1
    24b2:	f0 90 45 01 	lds	r15, 0x0145	; 0x800145 <cap+0x9>
    24b6:	fa 82       	std	Y+2, r15	; 0x02
    24b8:	e9 82       	std	Y+1, r14	; 0x01
    24ba:	c2 01       	movw	r24, r4
    24bc:	0e 94 a3 06 	call	0xd46	; 0xd46 <u2lcd_space>
u2lcd_space(adcmv[5]);	//DisplayValue(adcmv[5],0,' ',3);		//output cap0 1:3
    24c0:	c4 01       	movw	r24, r8
    24c2:	0e 94 a3 06 	call	0xd46	; 0xd46 <u2lcd_space>
u2lcd_space(adcmv[6]);	//DisplayValue(adcmv[6],0,' ',3);		//output cap0 2:3
    24c6:	c6 01       	movw	r24, r12
    24c8:	0d 2c       	mov	r0, r13
DisplayValue(adcmv[2],-12,'F',3);		//output cap0 1:2
    24ca:	00 0c       	add	r0, r0
    24cc:	aa 0b       	sbc	r26, r26
    24ce:	bb 0b       	sbc	r27, r27
    24d0:	8f 87       	std	Y+15, r24	; 0x0f
    24d2:	98 8b       	std	Y+16, r25	; 0x10
    24d4:	a9 8b       	std	Y+17, r26	; 0x11
    24d6:	ba 8b       	std	Y+18, r27	; 0x12
    24d8:	03 e0       	ldi	r16, 0x03	; 3
    24da:	26 e4       	ldi	r18, 0x46	; 70
    24dc:	44 ef       	ldi	r20, 0xF4	; 244
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	cd da       	rcall	.-2662   	; 0x1a7e <DisplayValue>
    24e4:	11 30       	cpi	r17, 0x01	; 1
    24e6:	09 f0       	breq	.+2      	; 0x24ea <AutoCheck+0x2e6>
    24e8:	2f c2       	rjmp	.+1118   	; 0x2948 <AutoCheck+0x744>
if (((test_mode & 0x0f) == 1) || (UnCalibrated == 2))
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	e9 0e       	add	r14, r25
    24ee:	f1 1c       	adc	r15, r1
  adcmv[3] = adcmv[0] + 2;		// mark as uncalibrated until Cap > 100nF has success
    24f0:	f8 86       	std	Y+8, r15	; 0x08
    24f2:	ef 82       	std	Y+7, r14	; 0x07
    24f4:	de 01       	movw	r26, r28
    24f6:	11 96       	adiw	r26, 0x01	; 1
for (ww=0;ww<7;ww++) {			//checking loop
    24f8:	7d 01       	movw	r14, r26
    24fa:	5e 01       	movw	r10, r28
    24fc:	bf e0       	ldi	r27, 0x0F	; 15
    24fe:	ab 0e       	add	r10, r27
    2500:	b1 1c       	adc	r11, r1
    2502:	f7 01       	movw	r30, r14
    2504:	81 91       	ld	r24, Z+
if ((adcmv[ww] > 190) || (adcmv[ww] < 10)) goto no_c0save;
    2506:	91 91       	ld	r25, Z+
    2508:	0a 97       	sbiw	r24, 0x0a	; 10
    250a:	85 3b       	cpi	r24, 0xB5	; 181
    250c:	91 05       	cpc	r25, r1
    250e:	d0 f4       	brcc	.+52     	; 0x2544 <AutoCheck+0x340>
    2510:	ae 16       	cp	r10, r30
for (ww=0;ww<7;ww++) {			//checking loop
    2512:	bf 06       	cpc	r11, r31
    2514:	b9 f7       	brne	.-18     	; 0x2504 <AutoCheck+0x300>
    2516:	48 e3       	ldi	r20, 0x38	; 56
    2518:	c4 2e       	mov	r12, r20
    251a:	43 e0       	ldi	r20, 0x03	; 3
  (void) eeprom_write_byte((uint8_t *)(&c_zero_tab[ww]),adcmv[ww]+(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));
    251c:	d4 2e       	mov	r13, r20
    251e:	f7 01       	movw	r30, r14
    2520:	60 81       	ld	r22, Z
    2522:	f2 e0       	ldi	r31, 0x02	; 2
    2524:	ef 0e       	add	r14, r31
    2526:	f1 1c       	adc	r15, r1
    2528:	6e 5e       	subi	r22, 0xEE	; 238
for (ww=0;ww<7;ww++) {
    252a:	c6 01       	movw	r24, r12
    252c:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    2530:	2f ef       	ldi	r18, 0xFF	; 255
    2532:	c2 1a       	sub	r12, r18
    2534:	d2 0a       	sbc	r13, r18
lcd_line2();
    2536:	ea 14       	cp	r14, r10
    2538:	fb 04       	cpc	r15, r11
lcd_MEM_string(OK_str);		// output "OK"
    253a:	89 f7       	brne	.-30     	; 0x251e <AutoCheck+0x31a>
    253c:	3b d8       	rcall	.-3978   	; 0x15b4 <lcd_line2>
    253e:	8b ea       	ldi	r24, 0xAB	; 171
last_line_used = 2;
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	4a da       	rcall	.-2924   	; 0x19d8 <lcd_fix_string>
    2544:	82 e0       	ldi	r24, 0x02	; 2
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    2546:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
  sampling_cap_calibrate();		// measure zero capacity for samplingADC
    254a:	94 dd       	rcall	.-1240   	; 0x2074 <wait_for_key_5s_line2>
    254c:	0e 94 3f 39 	call	0x727e	; 0x727e <sampling_cap_calibrate>
if (((test_mode & 0x0f) == 1) || (UnCalibrated == 2))
    2550:	11 30       	cpi	r17, 0x01	; 1
    2552:	29 f0       	breq	.+10     	; 0x255e <AutoCheck+0x35a>
    2554:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
    2558:	82 30       	cpi	r24, 0x02	; 2
    255a:	09 f0       	breq	.+2      	; 0x255e <AutoCheck+0x35a>
lcd_clear();
    255c:	d1 c0       	rjmp	.+418    	; 0x2700 <AutoCheck+0x4fc>
    255e:	5d d8       	rcall	.-3910   	; 0x161a <lcd_clear>
lcd_testpin(TP1);
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	2c da       	rcall	.-2984   	; 0x19bc <lcd_testpin>
    2564:	81 e5       	ldi	r24, 0x51	; 81
lcd_MEM_string(CapZeich);	// "-||-"
    2566:	91 e0       	ldi	r25, 0x01	; 1
    2568:	37 da       	rcall	.-2962   	; 0x19d8 <lcd_fix_string>
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	27 da       	rcall	.-2994   	; 0x19bc <lcd_testpin>
lcd_testpin(TP3);
    256e:	84 e2       	ldi	r24, 0x24	; 36
    2570:	90 e0       	ldi	r25, 0x00	; 0
    2572:	32 da       	rcall	.-2972   	; 0x19d8 <lcd_fix_string>
lcd_MEM2_string(MinCap_str);	// " >100nF!"
    2574:	90 e4       	ldi	r25, 0x40	; 64
    2576:	e9 2e       	mov	r14, r25
    2578:	f1 2c       	mov	r15, r1
    257a:	2a e0       	ldi	r18, 0x0A	; 10
    257c:	82 2e       	mov	r8, r18
    257e:	91 2c       	mov	r9, r1
cap_found = 0;
    2580:	a1 2c       	mov	r10, r1
   cap.cval /= 10;
    2582:	b1 2c       	mov	r11, r1
    2584:	37 ef       	ldi	r19, 0xF7	; 247
    2586:	d3 2e       	mov	r13, r19
    2588:	c5 dd       	rcall	.-1142   	; 0x2114 <init_parts>
    258a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>
    258e:	60 e0       	ldi	r22, 0x00	; 0
  init_parts();
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
  PartFound = PART_NONE;
    2596:	10 91 4e 01 	lds	r17, 0x014E	; 0x80014e <cap+0x12>
  ReadCapacity(TP3, TP1);	// look for capacitor > 100nF
    259a:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <cap>
    259e:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <cap+0x1>
  while (cap.cpre < -9) {
    25a2:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <cap+0x2>
    25a6:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <cap+0x3>
    25aa:	01 2f       	mov	r16, r17
    25ac:	07 3f       	cpi	r16, 0xF7	; 247
    25ae:	0c f4       	brge	.+2      	; 0x25b2 <AutoCheck+0x3ae>
    25b0:	d5 c1       	rjmp	.+938    	; 0x295c <AutoCheck+0x758>
    25b2:	8d 2d       	mov	r24, r13
    25b4:	81 1b       	sub	r24, r17
    25b6:	18 3f       	cpi	r17, 0xF8	; 248
    25b8:	0c f0       	brlt	.+2      	; 0x25bc <AutoCheck+0x3b8>
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	18 0f       	add	r17, r24
    25be:	10 93 4e 01 	sts	0x014E, r17	; 0x80014e <cap+0x12>
    25c2:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    25c6:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    25ca:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    25ce:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>
    25d2:	17 3f       	cpi	r17, 0xF7	; 247
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <AutoCheck+0x3d4>
    25d6:	ca c1       	rjmp	.+916    	; 0x296c <AutoCheck+0x768>
  if ((cap.cpre == -9) && (cap.cval > 95) && (cap.cval < 22000) &&
    25d8:	20 56       	subi	r18, 0x60	; 96
    25da:	31 09       	sbc	r19, r1
    25dc:	41 09       	sbc	r20, r1
    25de:	51 09       	sbc	r21, r1
    25e0:	20 39       	cpi	r18, 0x90	; 144
    25e2:	35 45       	sbci	r19, 0x55	; 85
    25e4:	41 05       	cpc	r20, r1
    25e6:	51 05       	cpc	r21, r1
    25e8:	08 f0       	brcs	.+2      	; 0x25ec <AutoCheck+0x3e8>
    25ea:	c0 c1       	rjmp	.+896    	; 0x296c <AutoCheck+0x768>
    25ec:	60 91 31 01 	lds	r22, 0x0131	; 0x800131 <load_diff>
    25f0:	70 91 32 01 	lds	r23, 0x0132	; 0x800132 <load_diff+0x1>
    (load_diff > -150) && (load_diff < 150)) {
    25f4:	cb 01       	movw	r24, r22
    25f6:	8b 56       	subi	r24, 0x6B	; 107
    25f8:	9f 4f       	sbci	r25, 0xFF	; 255
    25fa:	8b 32       	cpi	r24, 0x2B	; 43
    25fc:	91 40       	sbci	r25, 0x01	; 1
    25fe:	08 f0       	brcs	.+2      	; 0x2602 <AutoCheck+0x3fe>
    2600:	b5 c1       	rjmp	.+874    	; 0x296c <AutoCheck+0x768>
    2602:	f3 94       	inc	r15
    2604:	b4 e0       	ldi	r27, 0x04	; 4
    2606:	bf 15       	cp	r27, r15
   cap_found++;
    2608:	08 f0       	brcs	.+2      	; 0x260c <AutoCheck+0x408>
  if (cap_found > 4) {
    260a:	b1 c1       	rjmp	.+866    	; 0x296e <AutoCheck+0x76a>
    260c:	8f e3       	ldi	r24, 0x3F	; 63
    260e:	93 e0       	ldi	r25, 0x03	; 3
    2610:	0e 94 81 3e 	call	0x7d02	; 0x7d02 <eeprom_write_word>
     (void) eeprom_write_word((uint16_t *)(&ref_offset), load_diff);	// hold zero offset + slew rate dependend offset
    2614:	02 d8       	rcall	.-4092   	; 0x161a <lcd_clear>
    2616:	8d e1       	ldi	r24, 0x1D	; 29
    2618:	90 e0       	ldi	r25, 0x00	; 0
     lcd_clear();
    261a:	de d9       	rcall	.-3140   	; 0x19d8 <lcd_fix_string>
    261c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <load_diff>
     lcd_MEM2_string(REF_C_str);	// "REF_C="
    2620:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <load_diff+0x1>
    2624:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
     i2lcd(load_diff);		// lcd_string(itoa(load_diff, outval, 10));	//output REF_C_KORR
    2628:	0e 94 5f 08 	call	0x10be	; 0x10be <RefVoltage>
    262c:	18 b8       	out	0x08, r1	; 8
    262e:	81 e0       	ldi	r24, 0x01	; 1
    2630:	87 b9       	out	0x07, r24	; 7
     RefVoltage();			// new ref_mv_offs and RHmultip
    2632:	80 e2       	ldi	r24, 0x20	; 32
    2634:	84 b9       	out	0x04, r24	; 4
   ADC_PORT =  TXD_VAL;	//ADC-Port 1 to GND
    2636:	82 e0       	ldi	r24, 0x02	; 2
   ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    2638:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
   R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
    263c:	85 3d       	cpi	r24, 0xD5	; 213
    263e:	93 40       	sbci	r25, 0x03	; 3
      adcmv[0] = ReadADC(CAP_ADC);
    2640:	d4 f7       	brge	.-12     	; 0x2636 <AutoCheck+0x432>
    2642:	14 b8       	out	0x04, r1	; 4
    2644:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ADCconfig+0x3>
   } while (adcmv[0] > 980);
    2648:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ADCconfig+0x2>
   ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    264c:	82 e0       	ldi	r24, 0x02	; 2
    264e:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    2652:	8c 01       	movw	r16, r24
   adcmv[0] = ReadADC(CAP_ADC);  // get cap voltage with VCC reference
    2654:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adc_internal_reference>
    2658:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <adc_internal_reference+0x1>
   ADCconfig.U_Bandgap = adc_internal_reference;
    265c:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADCconfig+0x3>
    2660:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADCconfig+0x2>
    2664:	82 e0       	ldi	r24, 0x02	; 2
    2666:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    266a:	6c 01       	movw	r12, r24
   adcmv[1] = ReadADC(CAP_ADC);	// get cap voltage with internal reference
    266c:	cc 0c       	add	r12, r12
    266e:	dd 1c       	adc	r13, r13
    2670:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <ADCconfig+0x3>
   adcmv[1] += adcmv[1];		// double the value
    2674:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <ADCconfig+0x2>
   ADCconfig.U_Bandgap = 0;	// do not use internal Ref
    2678:	82 e0       	ldi	r24, 0x02	; 2
    267a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    267e:	4c 01       	movw	r8, r24
   adcmv[2] = ReadADC(CAP_ADC);  // get cap voltage with VCC reference
    2680:	a0 90 5c 01 	lds	r10, 0x015C	; 0x80015c <adc_internal_reference>
    2684:	b0 90 5d 01 	lds	r11, 0x015D	; 0x80015d <adc_internal_reference+0x1>
   ADCconfig.U_Bandgap = adc_internal_reference;
    2688:	b0 92 21 01 	sts	0x0121, r11	; 0x800121 <ADCconfig+0x3>
    268c:	a0 92 20 01 	sts	0x0120, r10	; 0x800120 <ADCconfig+0x2>
    2690:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
    2694:	86 e1       	ldi	r24, 0x16	; 22
   lcd_line2();
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9f d9       	rcall	.-3266   	; 0x19d8 <lcd_fix_string>
   lcd_MEM2_string(REF_R_str);	// "REF_R="
    269a:	81 e4       	ldi	r24, 0x41	; 65
    269c:	93 e0       	ldi	r25, 0x03	; 3
    269e:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
   udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    26a2:	f8 2e       	mov	r15, r24
    26a4:	d8 01       	movw	r26, r16
    26a6:	a8 0d       	add	r26, r8
    26a8:	b9 1d       	adc	r27, r9
    26aa:	ac 19       	sub	r26, r12
   udiff = (int8_t)(((signed long)(adcmv[0] + adcmv[2] - adcmv[1])) * adc_internal_reference / adcmv[1])+REF_R_KORR;
    26ac:	bd 09       	sbc	r27, r13
    26ae:	95 01       	movw	r18, r10
    26b0:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__usmulhisi3>
    26b4:	96 01       	movw	r18, r12
    26b6:	0d 2c       	mov	r0, r13
    26b8:	00 0c       	add	r0, r0
    26ba:	44 0b       	sbc	r20, r20
    26bc:	55 0b       	sbc	r21, r21
    26be:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <__divmodsi4>
    26c2:	13 e0       	ldi	r17, 0x03	; 3
    26c4:	1f 0d       	add	r17, r15
    26c6:	12 0f       	add	r17, r18
   udiff2 = udiff + (int8_t)eeprom_read_byte((uint8_t *)(&RefDiff));
    26c8:	61 2f       	mov	r22, r17
    26ca:	81 e4       	ldi	r24, 0x41	; 65
   (void) eeprom_write_byte((uint8_t *)(&RefDiff), (uint8_t)udiff2);	// hold offset for true reference Voltage
    26cc:	93 e0       	ldi	r25, 0x03	; 3
    26ce:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    26d2:	81 2f       	mov	r24, r17
   i2lcd(udiff2);		// output correction voltage
    26d4:	01 2e       	mov	r0, r17
    26d6:	00 0c       	add	r0, r0
    26d8:	99 0b       	sbc	r25, r25
    26da:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
    26de:	0e 94 5f 08 	call	0x10be	; 0x10be <RefVoltage>
   RefVoltage();			// set new ADCconfig.U_Bandgap
    26e2:	82 e0       	ldi	r24, 0x02	; 2
   last_line_used = 2;
    26e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
    26e8:	c5 dc       	rcall	.-1654   	; 0x2074 <wait_for_key_5s_line2>
   wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    26ea:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UnCalibrated>
   UnCalibrated = 0;		// clear the UnCalibrated Flag
    26ee:	88 e3       	ldi	r24, 0x38	; 56
    26f0:	93 e0       	ldi	r25, 0x03	; 3
   cap_found = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first capacity zero offset
    26f2:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    26f6:	68 2f       	mov	r22, r24
    26f8:	8b e3       	ldi	r24, 0x3B	; 59
    26fa:	93 e0       	ldi	r25, 0x03	; 3
   eeprom_write_byte((uint8_t *)&c_zero_tab[3], cap_found);	// mark as calibrated permanent
    26fc:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    2700:	89 e1       	ldi	r24, 0x19	; 25
    2702:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <sampling_lc_calibrate>
  sampling_lc_calibrate(0);	// Cap for L-meas
    270c:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
lcd_clear();
    2710:	85 ef       	ldi	r24, 0xF5	; 245
    2712:	90 e0       	ldi	r25, 0x00	; 0
lcd_MEM_string(VERSION_str);	//"Version ..."
    2714:	61 d9       	rcall	.-3390   	; 0x19d8 <lcd_fix_string>
    2716:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
    271a:	86 e3       	ldi	r24, 0x36	; 54
lcd_line2();
    271c:	92 e0       	ldi	r25, 0x02	; 2
    271e:	5c d9       	rcall	.-3400   	; 0x19d8 <lcd_fix_string>
lcd_MEM_string(ATE);		//"Selftest End"
    2720:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>
    2724:	82 e0       	ldi	r24, 0x02	; 2
    2726:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
PartFound = PART_NONE;
    272a:	a4 dc       	rcall	.-1720   	; 0x2074 <wait_for_key_5s_line2>
     last_line_used = 2;
    272c:	89 cd       	rjmp	.-1262   	; 0x2240 <AutoCheck+0x3c>
    272e:	02 30       	cpi	r16, 0x02	; 2
    2730:	c9 f5       	brne	.+114    	; 0x27a4 <AutoCheck+0x5a0>
wait_for_key_5s_line2();		// wait up to 5 seconds and clear line 2
    2732:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    2736:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
   if (tt == 2) { // how equal are the RL resistors? 
    273a:	a8 e5       	ldi	r26, 0x58	; 88
      u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + R_L_VAL + PIN_RP));
    273c:	bb e1       	ldi	r27, 0x1B	; 27
    273e:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    2742:	6b 8b       	std	Y+19, r22	; 0x13
    2744:	7c 8b       	std	Y+20, r23	; 0x14
    2746:	8d 8b       	std	Y+21, r24	; 0x15
    2748:	9e 8b       	std	Y+22, r25	; 0x16
    274a:	24 ec       	ldi	r18, 0xC4	; 196
    274c:	36 e3       	ldi	r19, 0x36	; 54
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	50 e0       	ldi	r21, 0x00	; 0
    2752:	0e 94 0d 3d 	call	0x7a1a	; 0x7a1a <__divmodsi4>
    2756:	29 01       	movw	r4, r18
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	85 b9       	out	0x05, r24	; 5
    275c:	95 e0       	ldi	r25, 0x05	; 5
    275e:	94 b9       	out	0x04, r25	; 4
      R_PORT = 1<<PIN_RL1;		//RL1 to VCC
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2);	//RL2 to -
    2766:	9c 01       	movw	r18, r24
      adcmv[0] = W20msReadADC(TP1);
    2768:	24 19       	sub	r18, r4
    276a:	35 09       	sbc	r19, r5
    276c:	3a 83       	std	Y+2, r19	; 0x02
    276e:	29 83       	std	Y+1, r18	; 0x01
      adcmv[0] -= u680;
    2770:	81 e1       	ldi	r24, 0x11	; 17
    2772:	84 b9       	out	0x04, r24	; 4
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);	//RL3 to -
    277a:	9c 01       	movw	r18, r24
      adcmv[1] = W20msReadADC(TP1);
    277c:	24 19       	sub	r18, r4
    277e:	35 09       	sbc	r19, r5
    2780:	3c 83       	std	Y+4, r19	; 0x04
    2782:	2b 83       	std	Y+3, r18	; 0x03
      adcmv[1] -= u680;
    2784:	84 e0       	ldi	r24, 0x04	; 4
    2786:	85 b9       	out	0x05, r24	; 5
    2788:	84 e1       	ldi	r24, 0x14	; 20
    278a:	84 b9       	out	0x04, r24	; 4
      R_PORT = 1<<PIN_RL2;		//RL2 to VCC
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RL2) | (1<<PIN_RL3);	//RL3 to -
    2792:	9c 01       	movw	r18, r24
      adcmv[2] = W20msReadADC(TP2);
    2794:	24 19       	sub	r18, r4
    2796:	35 09       	sbc	r19, r5
    2798:	3e 83       	std	Y+6, r19	; 0x06
    279a:	2d 83       	std	Y+5, r18	; 0x05
      adcmv[2] -= u680;
    279c:	89 ec       	ldi	r24, 0xC9	; 201
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	1b d9       	rcall	.-3530   	; 0x19d8 <lcd_fix_string>
    27a2:	37 c0       	rjmp	.+110    	; 0x2812 <AutoCheck+0x60e>
      lcd_MEM_string(RLRL_str);	// "RLRL"
    27a4:	03 30       	cpi	r16, 0x03	; 3
    27a6:	59 f5       	brne	.+86     	; 0x27fe <AutoCheck+0x5fa>
      lcd_MEM_string(RHRL_str);	// "RH/RL"
    27a8:	d5 b8       	out	0x05, r13	; 5
    27aa:	24 b8       	out	0x04, r2	; 4
   if (tt == 3) { // how equal are the RH resistors
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH2);	//RH2 to -
    27b2:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
      adcmv[0] = W20msReadADC(TP1);
    27b6:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
      adcmv[3] = ADCconfig.U_AVCC / 2;
    27ba:	36 95       	lsr	r19
    27bc:	27 95       	ror	r18
    27be:	38 87       	std	Y+8, r19	; 0x08
    27c0:	2f 83       	std	Y+7, r18	; 0x07
    27c2:	82 1b       	sub	r24, r18
    27c4:	93 0b       	sbc	r25, r19
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
      adcmv[0] -= adcmv[3];
    27ca:	a2 e2       	ldi	r26, 0x22	; 34
    27cc:	a4 b9       	out	0x04, r26	; 4
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RH3);	//RH3 to -
    27d4:	2f 81       	ldd	r18, Y+7	; 0x07
      adcmv[1] = W20msReadADC(TP1);
    27d6:	38 85       	ldd	r19, Y+8	; 0x08
    27d8:	82 1b       	sub	r24, r18
    27da:	93 0b       	sbc	r25, r19
      adcmv[1] -= adcmv[3];
    27dc:	9c 83       	std	Y+4, r25	; 0x04
    27de:	8b 83       	std	Y+3, r24	; 0x03
    27e0:	c5 b8       	out	0x05, r12	; 5
    27e2:	b8 e2       	ldi	r27, 0x28	; 40
    27e4:	b4 b9       	out	0x04, r27	; 4
    27e6:	81 e0       	ldi	r24, 0x01	; 1
      R_PORT = 1<<PIN_RH2;		//RH2 to VCC
    27e8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RH2) | (1<<PIN_RH3);	//RH3 to -
    27ec:	2f 81       	ldd	r18, Y+7	; 0x07
      adcmv[2] = W20msReadADC(TP2);
    27ee:	38 85       	ldd	r19, Y+8	; 0x08
    27f0:	82 1b       	sub	r24, r18
    27f2:	93 0b       	sbc	r25, r19
      adcmv[2] -= adcmv[3];
    27f4:	9e 83       	std	Y+6, r25	; 0x06
    27f6:	8d 83       	std	Y+5, r24	; 0x05
    27f8:	8b eb       	ldi	r24, 0xBB	; 187
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	d1 cf       	rjmp	.-94     	; 0x27a0 <AutoCheck+0x59c>
    27fe:	04 30       	cpi	r16, 0x04	; 4
      lcd_MEM_string(RHRH_str);	// "RHRH"
    2800:	d9 f4       	brne	.+54     	; 0x2838 <AutoCheck+0x634>
    2802:	8f e3       	ldi	r24, 0x3F	; 63
    2804:	92 e0       	ldi	r25, 0x02	; 2
   if (tt == 4) { // Text release probes
    2806:	e8 d8       	rcall	.-3632   	; 0x19d8 <lcd_fix_string>
    2808:	ee dc       	rcall	.-1572   	; 0x21e6 <AllProbesShorted>
      lcd_MEM_string(RELPROBE);	// "Release Probes"
    280a:	88 23       	and	r24, r24
    280c:	11 f0       	breq	.+4      	; 0x2812 <AutoCheck+0x60e>
    280e:	e2 e0       	ldi	r30, 0x02	; 2
    2810:	ef 87       	std	Y+15, r30	; 0x0f
      if (AllProbesShorted() != 0) ww = MAX_REP-2;
    2812:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
      lcd_line2();			//Cursor to column 1, row 2
    281e:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
      i2lcd(adcmv[0]);		// lcd_string(itoa(adcmv[0], outval, 10));	//output voltage 1
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
      lcd_space();
    282a:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
      i2lcd(adcmv[1]);		// lcd_string(itoa(adcmv[1], outval, 10));	//output voltage 2
    282e:	8d 81       	ldd	r24, Y+5	; 0x05
    2830:	9e 81       	ldd	r25, Y+6	; 0x06
    2832:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
      lcd_space();
    2836:	bc cd       	rjmp	.-1160   	; 0x23b0 <AutoCheck+0x1ac>
    2838:	05 30       	cpi	r16, 0x05	; 5
      i2lcd(adcmv[2]);		// lcd_string(itoa(adcmv[2], outval, 10));	//output voltage 3
    283a:	b1 f4       	brne	.+44     	; 0x2868 <AutoCheck+0x664>
    283c:	15 b8       	out	0x05, r1	; 5
    283e:	d4 b8       	out	0x04, r13	; 4
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
   if (tt == 5) { // can we switch the ADC pins to GND across R_H resistor?
    2846:	9a 83       	std	Y+2, r25	; 0x02
      R_PORT = 0;
    2848:	89 83       	std	Y+1, r24	; 0x01
      R_DDR = 1<<PIN_RH1;		//Pin 1 over R_H to GND
    284a:	c4 b8       	out	0x04, r12	; 4
      adcmv[0] = W20msReadADC(TP1);
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
    2852:	9c 83       	std	Y+4, r25	; 0x04
    2854:	8b 83       	std	Y+3, r24	; 0x03
      R_DDR = 1<<PIN_RH2;		//Pin 2 over R_H to GND
    2856:	34 b8       	out	0x04, r3	; 4
      adcmv[1] = W20msReadADC(TP2);
    2858:	82 e0       	ldi	r24, 0x02	; 2
    285a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
    285e:	9e 83       	std	Y+6, r25	; 0x06
    2860:	8d 83       	std	Y+5, r24	; 0x05
      R_DDR = 1<<PIN_RH3;		//Pin 3 over R_H to GND
    2862:	8b ed       	ldi	r24, 0xDB	; 219
      adcmv[2] = W20msReadADC(TP3);
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9c cf       	rjmp	.-200    	; 0x27a0 <AutoCheck+0x59c>
    2868:	06 30       	cpi	r16, 0x06	; 6
    286a:	51 f5       	brne	.+84     	; 0x28c0 <AutoCheck+0x6bc>
    286c:	d4 b8       	out	0x04, r13	; 4
      lcd_MEM_string(RH1L_str);	// "RH_Lo="
    286e:	d5 b8       	out	0x05, r13	; 5
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
   if (tt == 6) { // can we switch the ADC pins to VCC across the R_H resistor?
    2876:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
      R_PORT = 1<<PIN_RH1;
    287a:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
      adcmv[0] = W20msReadADC(TP1) - ADCconfig.U_AVCC;
    287e:	82 1b       	sub	r24, r18
    2880:	93 0b       	sbc	r25, r19
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	c4 b8       	out	0x04, r12	; 4
    2888:	c5 b8       	out	0x05, r12	; 5
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
    2890:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
      R_PORT = 1<<PIN_RH2;
    2894:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
      adcmv[1] = W20msReadADC(TP2) - ADCconfig.U_AVCC;
    2898:	82 1b       	sub	r24, r18
    289a:	93 0b       	sbc	r25, r19
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
    28a0:	34 b8       	out	0x04, r3	; 4
    28a2:	35 b8       	out	0x05, r3	; 5
    28a4:	82 e0       	ldi	r24, 0x02	; 2
    28a6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
    28aa:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
      R_PORT = 1<<PIN_RH3;
    28ae:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
      adcmv[2] = W20msReadADC(TP3) - ADCconfig.U_AVCC;
    28b2:	82 1b       	sub	r24, r18
    28b4:	93 0b       	sbc	r25, r19
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	87 ed       	ldi	r24, 0xD7	; 215
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	70 cf       	rjmp	.-288    	; 0x27a0 <AutoCheck+0x59c>
    28c0:	07 30       	cpi	r16, 0x07	; 7
    28c2:	09 f0       	breq	.+2      	; 0x28c6 <AutoCheck+0x6c2>
    28c4:	a6 cf       	rjmp	.-180    	; 0x2812 <AutoCheck+0x60e>
      lcd_MEM_string(RH1H_str);	// "RH_Hi="
    28c6:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    28ca:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
   if (tt == 7) { // is the voltage of all R_H / R_L dividers correct?
    28ce:	a8 e5       	ldi	r26, 0x58	; 88
    28d0:	bb e1       	ldi	r27, 0x1B	; 27
      u680 = ((long)ADCconfig.U_AVCC * (PIN_RM + R_L_VAL) / (PIN_RM + R_L_VAL + (unsigned long)R_H_VAL*100));
    28d2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    28d6:	6b 8b       	std	Y+19, r22	; 0x13
    28d8:	7c 8b       	std	Y+20, r23	; 0x14
    28da:	8d 8b       	std	Y+21, r24	; 0x15
    28dc:	9e 8b       	std	Y+22, r25	; 0x16
    28de:	a5 01       	movw	r20, r10
    28e0:	94 01       	movw	r18, r8
    28e2:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    28e6:	29 01       	movw	r4, r18
    28e8:	d5 b8       	out	0x05, r13	; 5
    28ea:	f3 e0       	ldi	r31, 0x03	; 3
    28ec:	f4 b9       	out	0x04, r31	; 4
    28ee:	80 e0       	ldi	r24, 0x00	; 0
    28f0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RH1) | (1<<PIN_RL1);	//RH1 to +, RL1 to -
    28f4:	9c 01       	movw	r18, r24
    28f6:	24 19       	sub	r18, r4
      adcmv[0] = W20msReadADC(TP1);
    28f8:	35 09       	sbc	r19, r5
    28fa:	3a 83       	std	Y+2, r19	; 0x02
    28fc:	29 83       	std	Y+1, r18	; 0x01
    28fe:	c5 b8       	out	0x05, r12	; 5
      adcmv[0] -= u680;
    2900:	2c e0       	ldi	r18, 0x0C	; 12
    2902:	24 b9       	out	0x04, r18	; 4
    2904:	81 e0       	ldi	r24, 0x01	; 1
    2906:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RH2) | (1<<PIN_RL2);	//RH2 to +, RL2 to -
    290a:	9c 01       	movw	r18, r24
    290c:	24 19       	sub	r18, r4
      adcmv[1] = W20msReadADC(TP2);
    290e:	35 09       	sbc	r19, r5
    2910:	3c 83       	std	Y+4, r19	; 0x04
    2912:	2b 83       	std	Y+3, r18	; 0x03
    2914:	35 b8       	out	0x05, r3	; 5
      adcmv[1] -= u680;
    2916:	80 e3       	ldi	r24, 0x30	; 48
    2918:	84 b9       	out	0x04, r24	; 4
    291a:	82 e0       	ldi	r24, 0x02	; 2
    291c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
      R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3);	//RH3 to +, RL3 to -
    2920:	9c 01       	movw	r18, r24
    2922:	24 19       	sub	r18, r4
      adcmv[2] = W20msReadADC(TP3);
    2924:	35 09       	sbc	r19, r5
    2926:	3e 83       	std	Y+6, r19	; 0x06
    2928:	2d 83       	std	Y+5, r18	; 0x05
      adcmv[2] -= u680;
    292a:	85 eb       	ldi	r24, 0xB5	; 181
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	38 cf       	rjmp	.-400    	; 0x27a0 <AutoCheck+0x59c>
    2930:	0e 94 9f 0b 	call	0x173e	; 0x173e <lcd_clear_line2>
      lcd_MEM_string(RHRL_str);	// "RH/RL"
    2934:	8f e3       	ldi	r24, 0x3F	; 63
    2936:	92 e0       	ldi	r25, 0x02	; 2
  lcd_clear_line2();		// clear total line2
    2938:	4f d8       	rcall	.-3938   	; 0x19d8 <lcd_fix_string>
    293a:	84 e6       	ldi	r24, 0x64	; 100
  lcd_MEM_string(RELPROBE);	// "Release Probes"
    293c:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
    2940:	01 50       	subi	r16, 0x01	; 1
    2942:	09 f0       	breq	.+2      	; 0x2946 <AutoCheck+0x742>
  wait_about500ms();
    2944:	51 cd       	rjmp	.-1374   	; 0x23e8 <AutoCheck+0x1e4>
    2946:	53 cd       	rjmp	.-1370   	; 0x23ee <AutoCheck+0x1ea>
    2948:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
for (ww=0;ww<120;ww++) {
    294c:	82 30       	cpi	r24, 0x02	; 2
    294e:	09 f4       	brne	.+2      	; 0x2952 <AutoCheck+0x74e>
    2950:	cc cd       	rjmp	.-1128   	; 0x24ea <AutoCheck+0x2e6>
if (((test_mode & 0x0f) == 1) || (UnCalibrated == 2))
    2952:	f8 86       	std	Y+8, r15	; 0x08
    2954:	ef 82       	std	Y+7, r14	; 0x07
    2956:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <UnCalibrated>
    295a:	cc cd       	rjmp	.-1128   	; 0x24f4 <AutoCheck+0x2f0>
  adcmv[3] = adcmv[0];			// mark as calibrated, short calibration is finished
    295c:	ca 01       	movw	r24, r20
    295e:	b9 01       	movw	r22, r18
  UnCalibrated = 0;			// clear the UnCalibrated Flag
    2960:	a5 01       	movw	r20, r10
    2962:	94 01       	movw	r18, r8
    2964:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
   cap.cval /= 10;
    2968:	0f 5f       	subi	r16, 0xFF	; 255
    296a:	20 ce       	rjmp	.-960    	; 0x25ac <AutoCheck+0x3a8>
    296c:	f1 2c       	mov	r15, r1
    296e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
    2972:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
   cap_found = 0;		// wait for stable connection
    2976:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
  lcd_line2();
    297a:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
  DisplayValue(cap.cval,cap.cpre,'F',4);
    297e:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    2982:	04 e0       	ldi	r16, 0x04	; 4
    2984:	26 e4       	ldi	r18, 0x46	; 70
    2986:	40 91 4e 01 	lds	r20, 0x014E	; 0x80014e <cap+0x12>
    298a:	bc 01       	movw	r22, r24
    298c:	cd 01       	movw	r24, r26
    298e:	77 d8       	rcall	.-3858   	; 0x1a7e <DisplayValue>
    2990:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
    2994:	88 e2       	ldi	r24, 0x28	; 40
    2996:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
    299a:	ea 94       	dec	r14
  lcd_clear_line();
    299c:	e1 10       	cpse	r14, r1
    299e:	f4 cd       	rjmp	.-1048   	; 0x2588 <AutoCheck+0x384>
  wait_about200ms();			// wait additional time
    29a0:	af ce       	rjmp	.-674    	; 0x2700 <AutoCheck+0x4fc>

000029a2 <mark_as_uncalibrated>:
    29a2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
for (ww=0;ww<64;ww++) {
    29a6:	81 11       	cpse	r24, r1
    29a8:	0d c0       	rjmp	.+26     	; 0x29c4 <mark_as_uncalibrated+0x22>
    29aa:	88 e3       	ldi	r24, 0x38	; 56
    29ac:	93 e0       	ldi	r25, 0x03	; 3
void mark_as_uncalibrated( void) {
 uint8_t ii;
 if (!UnCalibrated) {
    // equipment has changed, zero capacity value is too high or zero resistance is too high
    // but the device is marked as Calibrated.
    ii = eeprom_read_byte((uint8_t *)&c_zero_tab[0]);	// read first zero offset
    29ae:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    ii++;
    29b2:	61 e0       	ldi	r22, 0x01	; 1
    29b4:	68 0f       	add	r22, r24
    // make the unused c_zero_tab[3] different to c_zero_tab[0] to mark uncalibrated 
    eeprom_write_byte((uint8_t *)&c_zero_tab[3], ii);	// mark uncalibrated permanent
    29b6:	8b e3       	ldi	r24, 0x3B	; 59
    29b8:	93 e0       	ldi	r25, 0x03	; 3
    29ba:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
    UnCalibrated = 1;		// set back to uncalibrated
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <UnCalibrated>
 }
}
    29c4:	08 95       	ret

000029c6 <GetIr>:
/* Get residual current in reverse direction of a diode */ 



//=================================================================
void GetIr(uint8_t hipin, uint8_t lopin) {
    29c6:	a5 e0       	ldi	r26, 0x05	; 5
    29c8:	b0 e0       	ldi	r27, 0x00	; 0
    29ca:	e9 ee       	ldi	r30, 0xE9	; 233
    29cc:	f4 e1       	ldi	r31, 0x14	; 20
    29ce:	0c 94 dd 3d 	jmp	0x7bba	; 0x7bba <__prologue_saves__+0x14>
    29d2:	6d 83       	std	Y+5, r22	; 0x05
  ADC_PORT = HiADC;		 	// switch ADC port to high level
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
  R_PORT = 0;				// switch R-Port to GND
  LoPinR_L = pgm_read_byte(&PinRHRLADCtab[lopin-TP_MIN]);  //R_L mask for LowPin R_L load
#else
  HiADC = pgm_read_byte(&PinRLRHADCtab[hipin-TP_MIN]+3);	// Table of ADC pins including | TXD_VAL
    29d4:	e8 2f       	mov	r30, r24
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	ec 5b       	subi	r30, 0xBC	; 188
    29da:	fd 4f       	sbci	r31, 0xFD	; 253
    29dc:	e4 91       	lpm	r30, Z
  ADC_PORT = HiADC;		 	// switch ADC port to high level
    29de:	e8 b9       	out	0x08, r30	; 8
  ADC_DDR = HiADC | TXD_MSK;		// switch High Pin direct to VCC
    29e0:	e7 b9       	out	0x07, r30	; 7
  R_PORT = 0;				// switch R-Port to GND
    29e2:	15 b8       	out	0x05, r1	; 5
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[lopin-TP_MIN]);  //R_L mask for LowPin R_L load
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	e8 2f       	mov	r30, r24
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	ef 5b       	subi	r30, 0xBF	; 191
    29ec:	fd 4f       	sbci	r31, 0xFD	; 253
    29ee:	e4 91       	lpm	r30, Z
  // R_H Pin must always be one pin number higher
#endif
  R_DDR = LoPinR_L;		// switch R_L port for LowPin to output (GND)
    29f0:	e4 b9       	out	0x04, r30	; 4
     u_res_old = u_res;
     u_res = W20msReadADC(lopin);		// read voltage
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
     R_DDR = pgm_read_byte(&PinRHRLADCtab[lopin-TP_MIN+3]);  //R_H mask for LowPin R_H load
#else
     R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    29f2:	ee 0f       	add	r30, r30
    29f4:	e9 83       	std	Y+1, r30	; 0x01
  u_res = U_VCC;
    29f6:	08 e8       	ldi	r16, 0x88	; 136
    29f8:	13 e1       	ldi	r17, 0x13	; 19
     u_res = W20msReadADC(lopin);		// read voltage
    29fa:	78 01       	movw	r14, r16
    29fc:	8d 81       	ldd	r24, Y+5	; 0x05
    29fe:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
    2a02:	8c 01       	movw	r16, r24
     R_DDR = LoPinR_L + LoPinR_L;		// switch R_H port for LowPin to output (GND)
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	84 b9       	out	0x04, r24	; 4
#endif
  } while (u_res < u_res_old);
    2a08:	0e 15       	cp	r16, r14
    2a0a:	1f 05       	cpc	r17, r15
    2a0c:	b0 f3       	brcs	.-20     	; 0x29fa <GetIr+0x34>
  if (u_res == 0) return;		// no Output, if no current in reverse direction
    2a0e:	01 15       	cp	r16, r1
    2a10:	11 05       	cpc	r17, r1
    2a12:	e9 f0       	breq	.+58     	; 0x2a4e <GetIr+0x88>
#if (LCD_LINES > 3)
 #define IR_DIGITS 3
  lcd_line4();				// use Line 4 for Ir output
    2a14:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <lcd_line4>
  lcd_MEM_string(Ir_str);		// output text "Ir="
    2a18:	81 e3       	ldi	r24, 0x31	; 49
    2a1a:	91 e0       	ldi	r25, 0x01	; 1
    2a1c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
#ifdef WITH_IRMICRO
  unsigned int ir_micro;
  if (u_res < 2500) {
#endif
     /* R_H_VAL has units of 10 Ohm, u_res has units of mV, ir_nano has units of nA */
     ir_nano = (unsigned long)(u_res * 100000UL) / R_H_VAL;
    2a20:	d8 01       	movw	r26, r16
    2a22:	20 ea       	ldi	r18, 0xA0	; 160
    2a24:	36 e8       	ldi	r19, 0x86	; 134
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	50 e0       	ldi	r21, 0x00	; 0
    2a2a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    2a2e:	28 e9       	ldi	r18, 0x98	; 152
    2a30:	37 eb       	ldi	r19, 0xB7	; 183
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    2a3a:	69 01       	movw	r12, r18
    2a3c:	7a 01       	movw	r14, r20
     DisplayValue16(ir_nano,-9,'A',2);	// output two digits of current with nA units
    2a3e:	22 e0       	ldi	r18, 0x02	; 2
    2a40:	41 e4       	ldi	r20, 0x41	; 65
    2a42:	67 ef       	ldi	r22, 0xF7	; 247
    2a44:	c6 01       	movw	r24, r12
    2a46:	fd d8       	rcall	.-3590   	; 0x1c42 <DisplayValue16>
     /* RR680MI has units of 0.1 Ohm, u_res has units of mV, ir_micro has units of uA */
     ir_micro = (unsigned long)(u_res * 10000UL) / RR680MI;
     DisplayValue16(ir_micro,-6,'A',IR_DIGITS);	// output 2 or 3 digits of current in uA units
  }
#endif
  ADC_DDR = TXD_MSK;			// switch off
    2a48:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;			// switch off
    2a4a:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;				// switch off current
    2a4c:	14 b8       	out	0x04, r1	; 4

  return ;
}
    2a4e:	25 96       	adiw	r28, 0x05	; 5
    2a50:	e8 e0       	ldi	r30, 0x08	; 8
    2a52:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <__epilogue_restores__+0x14>

00002a56 <main>:
	int main(void) {
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <main+0x2>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <main+0x4>
    2a5a:	0f 92       	push	r0
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	  ON_DDR = (1<<ON_PIN);			// switch to output
    2a60:	80 e4       	ldi	r24, 0x40	; 64
    2a62:	8a b9       	out	0x0a, r24	; 10
	  ON_PORT = (1<<ON_PIN); 		// switch power on 
    2a64:	8b b9       	out	0x0b, r24	; 11
	  ADCSRA = (1<<ADEN) | AUTO_CLOCK_DIV;	//prescaler=8 or 64 (if 8Mhz clock)
    2a66:	87 e8       	ldi	r24, 0x87	; 135
    2a68:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	  UCSR0B = 0;		// disable UART, if started with bootloader
    2a6c:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
          wait500ms();
    2a70:	0e 94 94 07 	call	0xf28	; 0xf28 <wait500ms>
	  tmp = (WDRF_HOME & ((1<<WDRF)));	// save Watch Dog Flag
    2a74:	24 b7       	in	r18, 0x34	; 52
    2a76:	28 70       	andi	r18, 0x08	; 8
    2a78:	29 83       	std	Y+1, r18	; 0x01
	  WDRF_HOME &= ~(1<<WDRF);	 	//reset Watch Dog flag
    2a7a:	84 b7       	in	r24, 0x34	; 52
    2a7c:	87 7f       	andi	r24, 0xF7	; 247
    2a7e:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	a8 95       	wdr
    2a86:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a8a:	88 61       	ori	r24, 0x18	; 24
    2a8c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a90:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2a94:	0f be       	out	0x3f, r0	; 63
	  PRR = (1<<PRTWI) | (1<<PRSPI) | (1<<PRUSART0);
    2a96:	86 e8       	ldi	r24, 0x86	; 134
    2a98:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	  DIDR0 = ((1<<ADC5D) | (1<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (1<<ADC0D)) & ~((1<<TP3) | (1<<TP2) | (1<<TP1));	
    2a9c:	88 e3       	ldi	r24, 0x38	; 56
    2a9e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
	  TCCR2A = (0<<WGM21) | (0<<WGM20);		// Counter 2 normal mode
    2aa2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	  TCCR2B = CNTR2_PRESCALER;	//prescaler set in autoconf
    2aa6:	87 e0       	ldi	r24, 0x07	; 7
    2aa8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
	  sei();				// enable interrupts
    2aac:	78 94       	sei
	  lcd_init();				//initialize LCD
    2aae:	0e 94 2f 0b 	call	0x165e	; 0x165e <lcd_init>
	  if(tmp) { 
    2ab2:	39 81       	ldd	r19, Y+1	; 0x01
    2ab4:	31 11       	cpse	r19, r1
    2ab6:	e0 c5       	rjmp	.+3008   	; 0x3678 <main+0xc22>
	  MCUCR = (1<<PUD);		// disable Pull-Up Resistors mega168 family
    2ab8:	80 e1       	ldi	r24, 0x10	; 16
    2aba:	85 bf       	out	0x35, r24	; 53
	  rotary.ind = ROT_MSK+1;		//initilize state history with next call of check_rotary()
    2abc:	84 e0       	ldi	r24, 0x04	; 4
    2abe:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <rotary+0x4>
	  for (ii=0; ii<60; ii++) {
    2ac2:	19 82       	std	Y+1, r1	; 0x01
		if (RST_PIN_REG & (1 << RST_PIN))
    2ac4:	4f 99       	sbic	0x09, 7	; 9
    2ac6:	0b c0       	rjmp	.+22     	; 0x2ade <main+0x88>
	     wait_about10ms();
    2ac8:	82 e0       	ldi	r24, 0x02	; 2
    2aca:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
	  for (ii=0; ii<60; ii++) {
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	8f 5f       	subi	r24, 0xFF	; 255
    2ad2:	89 83       	std	Y+1, r24	; 0x01
    2ad4:	8c 33       	cpi	r24, 0x3C	; 60
    2ad6:	b1 f7       	brne	.-20     	; 0x2ac4 <main+0x6e>
	     display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    2ad8:	80 e6       	ldi	r24, 0x60	; 96
    2ada:	9d e6       	ldi	r25, 0x6D	; 109
    2adc:	05 c0       	rjmp	.+10     	; 0x2ae8 <main+0x92>
	  if (ii > 30) {
    2ade:	99 81       	ldd	r25, Y+1	; 0x01
    2ae0:	9f 31       	cpi	r25, 0x1F	; 31
    2ae2:	d0 f7       	brcc	.-12     	; 0x2ad8 <main+0x82>
	  display_time = OFF_WAIT_TIME;		// LONG_WAIT_TIME for single mode, else SHORT_WAIT_TIME
    2ae4:	8f e5       	ldi	r24, 0x5F	; 95
    2ae6:	9d e6       	ldi	r25, 0x6D	; 109
	     display_time = LONG_WAIT_TIME;	// ... set long time display anyway
    2ae8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <display_time+0x1>
    2aec:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <display_time>
	  ADCconfig.RefFlag = 0;
    2af0:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <ADCconfig+0x1>
	  Calibrate_UR();		// get Ref Voltages and Pin resistance
    2af4:	0e 94 00 29 	call	0x5200	; 0x5200 <Calibrate_UR>
		__asm__ __volatile__ (
    2af8:	88 e1       	ldi	r24, 0x18	; 24
    2afa:	9f e0       	ldi	r25, 0x0F	; 15
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	f8 94       	cli
    2b00:	a8 95       	wdr
    2b02:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	  if (ii >= 60) {
    2b0c:	a9 81       	ldd	r26, Y+1	; 0x01
    2b0e:	ac 33       	cpi	r26, 0x3C	; 60
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <main+0xbe>
    2b12:	5e c0       	rjmp	.+188    	; 0x2bd0 <main+0x17a>
	     Display_mV(Vext*EXT_NUMERATOR/EXT_DENOMINATOR,3);	// Display 3 Digits of this mV units
    2b14:	4a e0       	ldi	r20, 0x0A	; 10
    2b16:	94 2e       	mov	r9, r20
	  _trans = &ntrans;			// default transistor structure to show
    2b18:	54 e6       	ldi	r21, 0x64	; 100
    2b1a:	c5 2e       	mov	r12, r21
    2b1c:	51 e0       	ldi	r21, 0x01	; 1
    2b1e:	d5 2e       	mov	r13, r21
       _trans = &ptrans;
    2b20:	64 e7       	ldi	r22, 0x74	; 116
    2b22:	e6 2e       	mov	r14, r22
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	f6 2e       	mov	r15, r22
          PartMode = PART_MODE_NPN;
    2b28:	7c e0       	ldi	r23, 0x0C	; 12
    2b2a:	87 2e       	mov	r8, r23
          PartMode = PART_MODE_PNP;
    2b2c:	ed e0       	ldi	r30, 0x0D	; 13
    2b2e:	7e 2e       	mov	r7, r30
	  lcd_clear();			// clear the LCD
    2b30:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
	  ADC_DDR = TXD_MSK;		// activate Software-UART 
    2b34:	17 b8       	out	0x07, r1	; 7
          init_parts();			// reset parts info to nothing found
    2b36:	ee da       	rcall	.-2596   	; 0x2114 <init_parts>
	  Calibrate_UR();		// get Ref Voltages and Pin resistance
    2b38:	0e 94 00 29 	call	0x5200	; 0x5200 <Calibrate_UR>
	  lcd_line1();			// Cursor to 1. row, column 1
    2b3c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
        Battery_check();
    2b40:	ae d5       	rcall	.+2908   	; 0x369e <Battery_check>
	  if (WithReference) {
    2b42:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <WithReference>
    2b46:	88 23       	and	r24, r24
    2b48:	79 f0       	breq	.+30     	; 0x2b68 <main+0x112>
		 lcd_line2();
    2b4a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
		 lcd_MEM_string(VCC_str);		// VCC=
    2b4e:	86 e4       	ldi	r24, 0x46	; 70
    2b50:	91 e0       	ldi	r25, 0x01	; 1
    2b52:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
		 Display_mV(ADCconfig.U_AVCC,3);	// Display 3 Digits of this mV units
    2b56:	63 e0       	ldi	r22, 0x03	; 3
    2b58:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCconfig+0x4>
    2b5c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADCconfig+0x5>
    2b60:	90 d8       	rcall	.-3808   	; 0x1c82 <Display_mV>
		 wait_about1s();		// time to read the VCC= message
    2b62:	88 ec       	ldi	r24, 0xC8	; 200
	     wait_about300ms();		// delay to read the Vext= message
    2b64:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
	  while (!(RST_PIN_REG & (1<<RST_PIN))) {
    2b68:	4f 9b       	sbis	0x09, 7	; 9
    2b6a:	37 c0       	rjmp	.+110    	; 0x2bda <main+0x184>
	  lcd_line2();			//LCD position row 2, column 1
    2b6c:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
	  EntladePins();		// discharge all capacitors!
    2b70:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>
	  if(PartFound == PART_CELL) {
    2b74:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    2b78:	89 30       	cpi	r24, 0x09	; 9
    2b7a:	09 f0       	breq	.+2      	; 0x2b7e <main+0x128>
    2b7c:	42 c0       	rjmp	.+132    	; 0x2c02 <main+0x1ac>
	    lcd_clear();
    2b7e:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
	    lcd_MEM_string(Cell_str);	// display "Cell!"
    2b82:	8b e4       	ldi	r24, 0x4B	; 75
    2b84:	91 e0       	ldi	r25, 0x01	; 1
    2b86:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
	    lcd_line2();		// use LCD line 2
    2b8a:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
	    Display_mV(cell_mv[0],3);
    2b8e:	63 e0       	ldi	r22, 0x03	; 3
    2b90:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <cell_mv>
    2b94:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <cell_mv+0x1>
    2b98:	74 d8       	rcall	.-3864   	; 0x1c82 <Display_mV>
	    lcd_space();
    2b9a:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
	    Display_mV(cell_mv[1],3);
    2b9e:	63 e0       	ldi	r22, 0x03	; 3
    2ba0:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <cell_mv+0x2>
    2ba4:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <cell_mv+0x3>
    2ba8:	6c d8       	rcall	.-3880   	; 0x1c82 <Display_mV>
	    lcd_space();
    2baa:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
	    Display_mV(cell_mv[2],3);
    2bae:	63 e0       	ldi	r22, 0x03	; 3
    2bb0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <cell_mv+0x4>
    2bb4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <cell_mv+0x5>
    2bb8:	64 d8       	rcall	.-3896   	; 0x1c82 <Display_mV>
	    wait_about2s();
    2bba:	8a ec       	ldi	r24, 0xCA	; 202
    2bbc:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
	    AutoCheck(0x11);		// full Selftest with "Short probes" message
    2bc0:	81 e1       	ldi	r24, 0x11	; 17
    2bc2:	20 db       	rcall	.-2496   	; 0x2204 <AutoCheck>
  max_time = display_time;	// full specified wait time
    2bc4:	b0 91 06 01 	lds	r27, 0x0106	; 0x800106 <display_time>
    2bc8:	b9 83       	std	Y+1, r27	; 0x01
    2bca:	10 91 07 01 	lds	r17, 0x0107	; 0x800107 <display_time+0x1>
    2bce:	aa c1       	rjmp	.+852    	; 0x2f24 <main+0x4ce>
		while(function_menu());		// selection of function
    2bd0:	0e 94 09 33 	call	0x6612	; 0x6612 <function_menu>
    2bd4:	81 11       	cpse	r24, r1
    2bd6:	fc cf       	rjmp	.-8      	; 0x2bd0 <main+0x17a>
    2bd8:	9d cf       	rjmp	.-198    	; 0x2b14 <main+0xbe>
	     lcd_clear_line2();
    2bda:	0e 94 9f 0b 	call	0x173e	; 0x173e <lcd_clear_line2>
	     lcd_MEM_string(Vext_str);		// Vext=
    2bde:	8b e2       	ldi	r24, 0x2B	; 43
    2be0:	91 e0       	ldi	r25, 0x01	; 1
    2be2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
	     ADC_DDR = 0;		//deactivate Software-UART
    2be6:	17 b8       	out	0x07, r1	; 7
	     Vext = W5msReadADC(TPext);	// read external voltage 
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
	     Display_mV(Vext*EXT_NUMERATOR/EXT_DENOMINATOR,3);	// Display 3 Digits of this mV units
    2bee:	63 e0       	ldi	r22, 0x03	; 3
    2bf0:	fc 01       	movw	r30, r24
    2bf2:	9e 9e       	mul	r9, r30
    2bf4:	c0 01       	movw	r24, r0
    2bf6:	9f 9e       	mul	r9, r31
    2bf8:	90 0d       	add	r25, r0
    2bfa:	11 24       	eor	r1, r1
    2bfc:	42 d8       	rcall	.-3964   	; 0x1c82 <Display_mV>
	     wait_about300ms();		// delay to read the Vext= message
    2bfe:	8c e3       	ldi	r24, 0x3C	; 60
    2c00:	b1 cf       	rjmp	.-158    	; 0x2b64 <main+0x10e>
	  UnCalibrated = (eeprom_read_byte(&c_zero_tab[3]) - eeprom_read_byte(&c_zero_tab[0]));
    2c02:	8b e3       	ldi	r24, 0x3B	; 59
    2c04:	93 e0       	ldi	r25, 0x03	; 3
    2c06:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    2c0a:	89 83       	std	Y+1, r24	; 0x01
    2c0c:	88 e3       	ldi	r24, 0x38	; 56
    2c0e:	93 e0       	ldi	r25, 0x03	; 3
    2c10:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    2c14:	f9 81       	ldd	r31, Y+1	; 0x01
    2c16:	f8 1b       	sub	r31, r24
    2c18:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <UnCalibrated>
	  AutoCheck(0x00);			//check, if selftest should be done, only calibration
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	f2 da       	rcall	.-2588   	; 0x2204 <AutoCheck>
          lcd_clear_line2();			//LCD position row2, column 1
    2c20:	0e 94 9f 0b 	call	0x173e	; 0x173e <lcd_clear_line2>
	  lcd_MEM_string(TestRunning);		//String: testing...
    2c24:	84 eb       	ldi	r24, 0xB4	; 180
    2c26:	92 e0       	ldi	r25, 0x02	; 2
    2c28:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
	  CheckPins(TP1, TP2, TP3);
    2c2c:	42 e0       	ldi	r20, 0x02	; 2
    2c2e:	61 e0       	ldi	r22, 0x01	; 1
    2c30:	80 e0       	ldi	r24, 0x00	; 0
	  CheckPins(TP2, TP1, TP3);
    2c32:	a5 d5       	rcall	.+2890   	; 0x377e <CheckPins>
    2c34:	42 e0       	ldi	r20, 0x02	; 2
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	81 e0       	ldi	r24, 0x01	; 1
	  CheckPins(TP1, TP3, TP2);
    2c3a:	a1 d5       	rcall	.+2882   	; 0x377e <CheckPins>
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	62 e0       	ldi	r22, 0x02	; 2
    2c40:	80 e0       	ldi	r24, 0x00	; 0
	  CheckPins(TP3, TP1, TP2);
    2c42:	9d d5       	rcall	.+2874   	; 0x377e <CheckPins>
    2c44:	41 e0       	ldi	r20, 0x01	; 1
    2c46:	60 e0       	ldi	r22, 0x00	; 0
    2c48:	82 e0       	ldi	r24, 0x02	; 2
	  CheckPins(TP2, TP3, TP1);
    2c4a:	99 d5       	rcall	.+2866   	; 0x377e <CheckPins>
    2c4c:	40 e0       	ldi	r20, 0x00	; 0
    2c4e:	62 e0       	ldi	r22, 0x02	; 2
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	95 d5       	rcall	.+2858   	; 0x377e <CheckPins>
	  CheckPins(TP3, TP2, TP1);
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	61 e0       	ldi	r22, 0x01	; 1
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	91 d5       	rcall	.+2850   	; 0x377e <CheckPins>
    2c5c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
	  if(PartFound == PART_NONE) {
    2c60:	81 11       	cpse	r24, r1
    2c62:	0e c0       	rjmp	.+28     	; 0x2c80 <main+0x22a>
    2c64:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>
	     EntladePins();		// discharge capacities
    2c68:	60 e0       	ldi	r22, 0x00	; 0
	     ReadCapacity(TP3, TP1);
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    2c70:	61 e0       	ldi	r22, 0x01	; 1
	     ReadCapacity(TP3, TP2);
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    2c78:	60 e0       	ldi	r22, 0x00	; 0
	     ReadCapacity(TP2, TP1);
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    2c80:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
	  _trans = &ntrans;			// default transistor structure to show
    2c84:	d0 92 63 01 	sts	0x0163, r13	; 0x800163 <_trans+0x1>
    2c88:	c0 92 62 01 	sts	0x0162, r12	; 0x800162 <_trans>
	  if (PartFound == PART_THYRISTOR) {
    2c8c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    2c90:	86 30       	cpi	r24, 0x06	; 6
    2c92:	f1 f4       	brne	.+60     	; 0x2cd0 <main+0x27a>
            lcd_big_icon(THYRISTOR|LCD_UPPER_LEFT);
    2c94:	85 ec       	ldi	r24, 0xC5	; 197
    2c96:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
            lcd_draw_trans_pins(-8, 16);
    2c9a:	60 e1       	ldi	r22, 0x10	; 16
    2c9c:	88 ef       	ldi	r24, 0xF8	; 248
    2c9e:	2a d8       	rcall	.-4012   	; 0x1cf4 <lcd_draw_trans_pins>
    2ca0:	66 e0       	ldi	r22, 0x06	; 6
            lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);		// position behind the icon, Line 1
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    2ca8:	8b e8       	ldi	r24, 0x8B	; 139
	    lcd_MEM_string(Thyristor);		//"Thyristor"
    2caa:	92 e0       	ldi	r25, 0x02	; 2
    2cac:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    lcd_MEM_string(Triac);		//"Triac"
    2cb0:	66 e0       	ldi	r22, 0x06	; 6
  lcd_set_cursor(1*PAGES_PER_LINE,TEXT_RIGHT_TO_ICON);		// position behind the icon,line 2
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    2cb8:	8f e5       	ldi	r24, 0x5F	; 95
  lcd_MEM_string(Uf_str);		// "Uf="
    2cba:	91 e0       	ldi	r25, 0x01	; 1
    2cbc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  Display_mV(ntrans.uBE,2);
    2cc0:	62 e0       	ldi	r22, 0x02	; 2
    2cc2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ntrans+0x4>
    2cc6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ntrans+0x5>
    2cca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
    2cce:	7a cf       	rjmp	.-268    	; 0x2bc4 <main+0x16e>
  if (PartFound == PART_TRIAC) {
    2cd0:	87 30       	cpi	r24, 0x07	; 7
    2cd2:	69 f4       	brne	.+26     	; 0x2cee <main+0x298>
    lcd_big_icon(TRIAC|LCD_UPPER_LEFT);
    2cd4:	84 ec       	ldi	r24, 0xC4	; 196
    2cd6:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
    lcd_draw_trans_pins(-8, 16);
    2cda:	60 e1       	ldi	r22, 0x10	; 16
    2cdc:	88 ef       	ldi	r24, 0xF8	; 248
    2cde:	0a d8       	rcall	.-4076   	; 0x1cf4 <lcd_draw_trans_pins>
    2ce0:	66 e0       	ldi	r22, 0x06	; 6
    lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);		// position behind the icon, Line 1
    2ce2:	80 e0       	ldi	r24, 0x00	; 0
    2ce4:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    2ce8:	84 e9       	ldi	r24, 0x94	; 148
    lcd_MEM_string(Triac);		//"Triac"
    2cea:	92 e0       	ldi	r25, 0x02	; 2
    2cec:	df cf       	rjmp	.-66     	; 0x2cac <main+0x256>
    2cee:	88 30       	cpi	r24, 0x08	; 8
  if (PartFound == PART_CAPACITOR) {
    2cf0:	a9 f4       	brne	.+42     	; 0x2d1c <main+0x2c6>
    2cf2:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cap+0x10>
     if ((cap.ca + cap.cb) == (TP1 + TP3)) {
    2cf6:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <cap+0x11>
    2cfa:	89 0f       	add	r24, r25
    2cfc:	99 27       	eor	r25, r25
    2cfe:	99 1f       	adc	r25, r25
    2d00:	02 97       	sbiw	r24, 0x02	; 2
    2d02:	41 f4       	brne	.+16     	; 0x2d14 <main+0x2be>
        show_Cap13();		// repeated capacity measurement
    2d04:	0e 94 72 2b 	call	0x56e4	; 0x56e4 <show_Cap13>
#if defined(AUTO_CAL) && (FLASHEND > 0x3fff)
// Check is direct included in the main source of the TransistorTester
// a function with a call from main will use additional 38 bytes of flash
  // define additional variables , ii is already defined in main
 #define TIME_TO_READ 10000
  if (UnCalibrated) {
    2d08:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <UnCalibrated>
    2d0c:	81 11       	cpse	r24, r1
    2d0e:	5c c4       	rjmp	.+2232   	; 0x35c8 <main+0xb72>
  switch_tester_off();
    2d10:	24 da       	rcall	.-3000   	; 0x215a <switch_tester_off>
    2d12:	0e cf       	rjmp	.-484    	; 0x2b30 <main+0xda>
	goto loop_start;
    2d14:	80 e0       	ldi	r24, 0x00	; 0
     show_cap(0);		// show capacity in normal way and measure additional parameters
    2d16:	0e 94 9a 2a 	call	0x5534	; 0x5534 <show_cap>
    2d1a:	54 cf       	rjmp	.-344    	; 0x2bc4 <main+0x16e>
     goto tt_end;
    2d1c:	83 30       	cpi	r24, 0x03	; 3
  if(PartFound == PART_DIODE) {
    2d1e:	09 f0       	breq	.+2      	; 0x2d22 <main+0x2cc>
    2d20:	14 c1       	rjmp	.+552    	; 0x2f4a <main+0x4f4>
    2d22:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
     if(NumOfDiodes == 1) {		//single Diode
    2d26:	81 30       	cpi	r24, 0x01	; 1
    2d28:	09 f0       	breq	.+2      	; 0x2d2c <main+0x2d6>
    2d2a:	6d c0       	rjmp	.+218    	; 0x2e06 <main+0x3b0>
        DiodeSymbol_withPins(0);
    2d2c:	80 e0       	ldi	r24, 0x00	; 0
    2d2e:	0e 94 63 07 	call	0xec6	; 0xec6 <DiodeSymbol_withPins>
	GetIr(diodes.Cathode[0],diodes.Anode[0]);	// measure and output Ir=x.xuA
    2d32:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <diodes>
    2d36:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>
    2d3a:	45 de       	rcall	.-886    	; 0x29c6 <GetIr>
    2d3c:	80 e7       	ldi	r24, 0x70	; 112
        UfAusgabe(0x70);		// mark for additional resistor and output Uf= in line 2
    2d3e:	0e 94 3b 07 	call	0xe76	; 0xe76 <UfAusgabe>
    2d42:	40 e0       	ldi	r20, 0x00	; 0
        cap.cval=sampling_cap(diodes.Cathode[0],diodes.Anode[0],0);   // at low voltage
    2d44:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <diodes>
    2d48:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>
    2d4c:	0e 94 51 38 	call	0x70a2	; 0x70a2 <sampling_cap>
    2d50:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    2d54:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    2d58:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    2d5c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>
    2d60:	80 e0       	ldi	r24, 0x00	; 0
        lcd_next_line_wait(0);		// next line, wait 5s and clear line 2
    2d62:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    2d66:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
        DisplayValue(cap.cval,sampling_cap_pre,'F',2);
    2d6a:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    2d6e:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    2d72:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	9a 83       	std	Y+2, r25	; 0x02
    2d7a:	ab 83       	std	Y+3, r26	; 0x03
    2d7c:	bc 83       	std	Y+4, r27	; 0x04
    2d7e:	02 e0       	ldi	r16, 0x02	; 2
    2d80:	26 e4       	ldi	r18, 0x46	; 70
    2d82:	42 ef       	ldi	r20, 0xF2	; 242
    2d84:	bc 01       	movw	r22, r24
    2d86:	cd 01       	movw	r24, r26
    2d88:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
    2d8c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
        lcd_minus();			// lcd_data('-');
    2d90:	41 e0       	ldi	r20, 0x01	; 1
        cap.cval=sampling_cap(diodes.Cathode[0],diodes.Anode[0],1);   // at high voltage
    2d92:	60 91 86 01 	lds	r22, 0x0186	; 0x800186 <diodes>
    2d96:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>
    2d9a:	0e 94 51 38 	call	0x70a2	; 0x70a2 <sampling_cap>
    2d9e:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    2da2:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    2da6:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    2daa:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>
    2dae:	26 e4       	ldi	r18, 0x46	; 70
        DisplayValue(cap.cval,sampling_cap_pre,'F',2);
    2db0:	42 ef       	ldi	r20, 0xF2	; 242
    2db2:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
    2db6:	8c e1       	ldi	r24, 0x1C	; 28
        lcd_MEM_string(AT05volt);	// " @0-5V"
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    2dbe:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
	if (ResistorsFound == 0)
    2dc2:	88 23       	and	r24, r24
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <main+0x372>
    2dc6:	fe ce       	rjmp	.-516    	; 0x2bc4 <main+0x16e>
    2dc8:	b0 e1       	ldi	r27, 0x10	; 16
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2dca:	b7 b9       	out	0x07, r27	; 7
    2dcc:	17 b8       	out	0x07, r1	; 7
  ADC_DDR =  TXD_MSK; 	// switch pin with reference to input, activate relay
    2dce:	80 e0       	ldi	r24, 0x00	; 0
  lcd_next_line_wait(0);
    2dd0:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    2dd4:	20 91 a3 01 	lds	r18, 0x01A3	; 0x8001a3 <ResistorsFound>
  if (ResistorsFound != 0) {
    2dd8:	22 23       	and	r18, r18
    2dda:	09 f4       	brne	.+2      	; 0x2dde <main+0x388>
    2ddc:	d9 c3       	rjmp	.+1970   	; 0x3590 <main+0xb3a>
    2dde:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <ResistorList>
       rpins.pw = Rnum2pins(ResistorList[0]);	// get pin numbers for resistor 1
    2de2:	21 30       	cpi	r18, 0x01	; 1
    if (ResistorsFound == 1) { // single resistor
    2de4:	09 f0       	breq	.+2      	; 0x2de8 <main+0x392>
    2de6:	69 c3       	rjmp	.+1746   	; 0x34ba <main+0xa64>
    2de8:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Rnum2pins>
       rpins.pw = Rnum2pins(ResistorList[0]);	// get pin numbers for resistor 1
    2dec:	69 2f       	mov	r22, r25
    2dee:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <ResistorList>
       if ((ResistorList[0] == 1) && (NumOfDiodes == 0)) {
    2df2:	91 30       	cpi	r25, 0x01	; 1
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <main+0x3a2>
    2df6:	5d c3       	rjmp	.+1722   	; 0x34b2 <main+0xa5c>
    2df8:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <NumOfDiodes>
    2dfc:	91 11       	cpse	r25, r1
    2dfe:	59 c3       	rjmp	.+1714   	; 0x34b2 <main+0xa5c>
    2e00:	0e 94 28 2b 	call	0x5650	; 0x5650 <show_Resis13>
          show_Resis13();		// call of the special resistor measurement
    2e04:	81 cf       	rjmp	.-254    	; 0x2d08 <main+0x2b2>
          goto shut_off;		// key is pressed or timeout
    2e06:	82 30       	cpi	r24, 0x02	; 2
     } else if(NumOfDiodes == 2) { // double diode
    2e08:	81 f5       	brne	.+96     	; 0x2e6a <main+0x414>
    2e0a:	82 e3       	ldi	r24, 0x32	; 50
        lcd_data('2');
    2e0c:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    2e10:	8d e0       	ldi	r24, 0x0D	; 13
        lcd_MEM_string(Dioden);		//"diodes "
    2e12:	91 e0       	ldi	r25, 0x01	; 1
    2e14:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    2e18:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <diodes>
        if(diodes.Anode[0] == diodes.Anode[1]) { //Common Anode
    2e1c:	30 91 87 01 	lds	r19, 0x0187	; 0x800187 <diodes+0x1>
    2e20:	93 13       	cpse	r25, r19
    2e22:	08 c0       	rjmp	.+16     	; 0x2e34 <main+0x3de>
    2e24:	80 e0       	ldi	r24, 0x00	; 0
           DiodeSymbol_CpinApin(0);	// 1-|<-2
    2e26:	0e 94 7f 07 	call	0xefe	; 0xefe <DiodeSymbol_CpinApin>
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
           DiodeSymbol_ACpin(1);	//  ->|-3
    2e2c:	0e 94 76 07 	call	0xeec	; 0xeec <DiodeSymbol_ACpin>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
           UfAusgabe(0x01);
    2e32:	85 cf       	rjmp	.-246    	; 0x2d3e <main+0x2e8>
    2e34:	20 91 8c 01 	lds	r18, 0x018C	; 0x80018c <diodes+0x6>
        if(diodes.Cathode[0] == diodes.Cathode[1]) { //Common Cathode
    2e38:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <diodes+0x7>
    2e3c:	28 13       	cpse	r18, r24
    2e3e:	07 c0       	rjmp	.+14     	; 0x2e4e <main+0x3f8>
    2e40:	80 e0       	ldi	r24, 0x00	; 0
           DiodeSymbol_ApinCpin(0);	// 1->|-2
    2e42:	0e 94 6f 07 	call	0xede	; 0xede <DiodeSymbol_ApinCpin>
    2e46:	81 e0       	ldi	r24, 0x01	; 1
           DiodeSymbol_CApin(1);	//  -|<-3
    2e48:	0e 94 86 07 	call	0xf0c	; 0xf0c <DiodeSymbol_CApin>
    2e4c:	f1 cf       	rjmp	.-30     	; 0x2e30 <main+0x3da>
    2e4e:	32 13       	cpse	r19, r18
        if (diodes.Cathode[0] == diodes.Anode[1]) {
    2e50:	06 c0       	rjmp	.+12     	; 0x2e5e <main+0x408>
    2e52:	81 e0       	ldi	r24, 0x01	; 1
           diode_sequence = 0x01;	// 0 1
    2e54:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <diode_sequence>
    2e58:	0e 94 51 07 	call	0xea2	; 0xea2 <SerienDiodenAusgabe>
           SerienDiodenAusgabe();
    2e5c:	b0 cf       	rjmp	.-160    	; 0x2dbe <main+0x368>
           goto end3;
    2e5e:	98 13       	cpse	r25, r24
        if (diodes.Cathode[1] == diodes.Anode[0]) {
    2e60:	41 c0       	rjmp	.+130    	; 0x2ee4 <main+0x48e>
    2e62:	90 e1       	ldi	r25, 0x10	; 16
           diode_sequence = 0x10;	// 1 0
    2e64:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <diode_sequence>
    2e68:	f7 cf       	rjmp	.-18     	; 0x2e58 <main+0x402>
           SerienDiodenAusgabe();
    2e6a:	83 30       	cpi	r24, 0x03	; 3
     } else if(NumOfDiodes == 3) {
    2e6c:	d9 f5       	brne	.+118    	; 0x2ee4 <main+0x48e>
    2e6e:	83 e3       	ldi	r24, 0x33	; 51
        diode_sequence = 0x33;	// 3 3
    2e70:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <diode_sequence>
    2e74:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <diodes+0x6>
			if (diodes.Cathode[0] == diodes.Anode[1]) {
    2e78:	90 91 87 01 	lds	r25, 0x0187	; 0x800187 <diodes+0x1>
    2e7c:	89 13       	cpse	r24, r25
    2e7e:	03 c0       	rjmp	.+6      	; 0x2e86 <main+0x430>
    2e80:	21 e0       	ldi	r18, 0x01	; 1
           diode_sequence = 0x01;	// 0 1
    2e82:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <diode_sequence>
    2e86:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <diodes>
			if (diodes.Anode[0] == diodes.Cathode[1]) {
    2e8a:	30 91 8d 01 	lds	r19, 0x018D	; 0x80018d <diodes+0x7>
    2e8e:	43 13       	cpse	r20, r19
    2e90:	03 c0       	rjmp	.+6      	; 0x2e98 <main+0x442>
    2e92:	a0 e1       	ldi	r26, 0x10	; 16
           diode_sequence = 0x10;	// 1 0
    2e94:	a0 93 84 01 	sts	0x0184, r26	; 0x800184 <diode_sequence>
    2e98:	20 91 88 01 	lds	r18, 0x0188	; 0x800188 <diodes+0x2>
			if (diodes.Cathode[0] == diodes.Anode[2]) {
    2e9c:	82 13       	cpse	r24, r18
    2e9e:	03 c0       	rjmp	.+6      	; 0x2ea6 <main+0x450>
    2ea0:	82 e0       	ldi	r24, 0x02	; 2
           diode_sequence = 0x02;	// 0 2
    2ea2:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <diode_sequence>
    2ea6:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <diodes+0x8>
			if (diodes.Anode[0] == diodes.Cathode[2]) {
    2eaa:	48 13       	cpse	r20, r24
    2eac:	03 c0       	rjmp	.+6      	; 0x2eb4 <main+0x45e>
    2eae:	40 e2       	ldi	r20, 0x20	; 32
           diode_sequence = 0x20;	// 2 0
    2eb0:	40 93 84 01 	sts	0x0184, r20	; 0x800184 <diode_sequence>
    2eb4:	32 13       	cpse	r19, r18
			if (diodes.Cathode[1] == diodes.Anode[2]) {
    2eb6:	10 c0       	rjmp	.+32     	; 0x2ed8 <main+0x482>
    2eb8:	22 e1       	ldi	r18, 0x12	; 18
           diode_sequence = 0x12;	// 1 2
    2eba:	20 93 84 01 	sts	0x0184, r18	; 0x800184 <diode_sequence>
    2ebe:	98 13       	cpse	r25, r24
			if (diodes.Anode[1] == diodes.Cathode[2]) {
    2ec0:	03 c0       	rjmp	.+6      	; 0x2ec8 <main+0x472>
    2ec2:	81 e2       	ldi	r24, 0x21	; 33
           diode_sequence = 0x21;	// 2 1
    2ec4:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <diode_sequence>
    2ec8:	83 e3       	ldi	r24, 0x33	; 51
           lcd_data('3');
    2eca:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    2ece:	8d e0       	ldi	r24, 0x0D	; 13
           lcd_MEM_string(Dioden);	//"Diodes "
    2ed0:	91 e0       	ldi	r25, 0x01	; 1
    2ed2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    2ed6:	c0 cf       	rjmp	.-128    	; 0x2e58 <main+0x402>
    2ed8:	98 17       	cp	r25, r24
			if (diodes.Anode[1] == diodes.Cathode[2]) {
    2eda:	99 f3       	breq	.-26     	; 0x2ec2 <main+0x46c>
    2edc:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <diode_sequence>
        if(diode_sequence < 0x22) {
    2ee0:	82 32       	cpi	r24, 0x22	; 34
    2ee2:	90 f3       	brcs	.-28     	; 0x2ec8 <main+0x472>
    2ee4:	8a e9       	ldi	r24, 0x9A	; 154
     lcd_MEM_string(Bauteil);		//"Bauteil"
    2ee6:	92 e0       	ldi	r25, 0x02	; 2
    2ee8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    2eec:	82 e8       	ldi	r24, 0x82	; 130
     lcd_MEM_string(Unknown); 		//" unbek."
    2eee:	92 e0       	ldi	r25, 0x02	; 2
    2ef0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    2ef4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
     lcd_line2(); //2. row 
    2ef8:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
     lcd_data(NumOfDiodes + '0');
    2efc:	80 5d       	subi	r24, 0xD0	; 208
    2efe:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    2f02:	8a e2       	ldi	r24, 0x2A	; 42
     lcd_data('*');
    2f04:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    2f08:	87 e2       	ldi	r24, 0x27	; 39
     lcd_MEM_string(AnKat_str);		//"->|-"
    2f0a:	91 e0       	ldi	r25, 0x01	; 1
    2f0c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
     lcd_MEM_string(Detected);		//" detected"
    2f10:	88 e6       	ldi	r24, 0x68	; 104
    2f12:	92 e0       	ldi	r25, 0x02	; 2
  lcd_MEM_string(Bauteil);		//"Bauteil"
    2f14:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
     lcd_big_icon(QUESTION);		// show big question mark
    2f18:	86 e0       	ldi	r24, 0x06	; 6
    2f1a:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    2f1e:	a0 e4       	ldi	r26, 0x40	; 64
    2f20:	a9 83       	std	Y+1, r26	; 0x01
    2f22:	1f e1       	ldi	r17, 0x1F	; 31
  ADC_DDR = (1<<TPRELAY) | TXD_MSK; 	// switch pin with reference to GND, release relay
    2f24:	e0 e1       	ldi	r30, 0x10	; 16
    2f26:	e7 b9       	out	0x07, r30	; 7
	while (!(RST_PIN_REG & (1 << RST_PIN)))
    2f28:	4f 9b       	sbis	0x09, 7	; 9
    2f2a:	fe cf       	rjmp	.-4      	; 0x2f28 <main+0x4d2>
  ii = wait_for_key_ms(max_time);
    2f2c:	89 81       	ldd	r24, Y+1	; 0x01
    2f2e:	91 2f       	mov	r25, r17
    2f30:	38 d8       	rcall	.-3984   	; 0x1fa2 <wait_for_key_ms>
    2f32:	82 33       	cpi	r24, 0x32	; 50
  if ((ii >=50) || (rotary.incre > 2))
    2f34:	28 f4       	brcc	.+10     	; 0x2f40 <main+0x4ea>
    2f36:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    2f3a:	93 30       	cpi	r25, 0x03	; 3
    2f3c:	08 f4       	brcc	.+2      	; 0x2f40 <main+0x4ea>
    2f3e:	35 c3       	rjmp	.+1642   	; 0x35aa <main+0xb54>
    2f40:	0e 94 09 33 	call	0x6612	; 0x6612 <function_menu>
		while(function_menu());// start the function menu
    2f44:	81 11       	cpse	r24, r1
    2f46:	fc cf       	rjmp	.-8      	; 0x2f40 <main+0x4ea>
    2f48:	f3 cd       	rjmp	.-1050   	; 0x2b30 <main+0xda>
    2f4a:	84 30       	cpi	r24, 0x04	; 4
  } else if (PartFound == PART_TRANSISTOR) {
    2f4c:	09 f0       	breq	.+2      	; 0x2f50 <main+0x4fa>
    2f4e:	61 c1       	rjmp	.+706    	; 0x3212 <main+0x7bc>
    2f50:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    if ((ptrans.count != 0) && (ntrans.count !=0)) {
    2f54:	88 23       	and	r24, r24
    2f56:	09 f4       	brne	.+2      	; 0x2f5a <main+0x504>
    2f58:	69 c0       	rjmp	.+210    	; 0x302c <main+0x5d6>
    2f5a:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    2f5e:	88 23       	and	r24, r24
    2f60:	09 f4       	brne	.+2      	; 0x2f64 <main+0x50e>
    2f62:	64 c0       	rjmp	.+200    	; 0x302c <main+0x5d6>
    2f64:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <ntrans+0xc>
       ReadCapacity(ntrans.e, ntrans.b);	// read capacity of NPN base-emitter
    2f68:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <ntrans+0xe>
    2f6c:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    2f70:	20 90 3c 01 	lds	r2, 0x013C	; 0x80013c <cap>
       n_cval = cap.cval;			// save the found capacity value
    2f74:	30 90 3d 01 	lds	r3, 0x013D	; 0x80013d <cap+0x1>
    2f78:	40 90 3e 01 	lds	r4, 0x013E	; 0x80013e <cap+0x2>
    2f7c:	50 90 3f 01 	lds	r5, 0x013F	; 0x80013f <cap+0x3>
    2f80:	b0 91 4e 01 	lds	r27, 0x014E	; 0x80014e <cap+0x12>
       n_cpre  = cap.cpre;			// and dimension
    2f84:	b9 83       	std	Y+1, r27	; 0x01
    2f86:	60 91 82 01 	lds	r22, 0x0182	; 0x800182 <ptrans+0xe>
       ReadCapacity(ptrans.b, ptrans.e);	// read capacity of PNP base-emitter
    2f8a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ptrans+0xc>
    2f8e:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    2f92:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ntrans>
       if ((ntrans.hfe < 500) && (ptrans.hfe >= 500)) n_cpre = -16; // set NPN BE capacity to low value
    2f96:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ntrans+0x1>
    2f9a:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ntrans+0x2>
    2f9e:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ntrans+0x3>
    2fa2:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <ptrans>
    2fa6:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <ptrans+0x1>
    2faa:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <ptrans+0x2>
    2fae:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <ptrans+0x3>
    2fb2:	84 3f       	cpi	r24, 0xF4	; 244
    2fb4:	e1 e0       	ldi	r30, 0x01	; 1
    2fb6:	9e 07       	cpc	r25, r30
    2fb8:	a1 05       	cpc	r26, r1
    2fba:	b1 05       	cpc	r27, r1
    2fbc:	40 f4       	brcc	.+16     	; 0x2fce <main+0x578>
    2fbe:	44 3f       	cpi	r20, 0xF4	; 244
    2fc0:	f1 e0       	ldi	r31, 0x01	; 1
    2fc2:	5f 07       	cpc	r21, r31
    2fc4:	61 05       	cpc	r22, r1
    2fc6:	71 05       	cpc	r23, r1
    2fc8:	10 f0       	brcs	.+4      	; 0x2fce <main+0x578>
    2fca:	20 ef       	ldi	r18, 0xF0	; 240
    2fcc:	29 83       	std	Y+1, r18	; 0x01
    2fce:	44 3f       	cpi	r20, 0xF4	; 244
       if ((ptrans.hfe < 500) && (ntrans.hfe >= 500)) cap.cpre = -16; // set PNP BE capacity to low value
    2fd0:	51 40       	sbci	r21, 0x01	; 1
    2fd2:	61 05       	cpc	r22, r1
    2fd4:	71 05       	cpc	r23, r1
    2fd6:	40 f4       	brcc	.+16     	; 0x2fe8 <main+0x592>
    2fd8:	84 3f       	cpi	r24, 0xF4	; 244
    2fda:	91 40       	sbci	r25, 0x01	; 1
    2fdc:	a1 05       	cpc	r26, r1
    2fde:	b1 05       	cpc	r27, r1
    2fe0:	18 f0       	brcs	.+6      	; 0x2fe8 <main+0x592>
    2fe2:	80 ef       	ldi	r24, 0xF0	; 240
    2fe4:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
    2fe8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
       if (((n_cpre == cap.cpre) && (cap.cval > n_cval))
    2fec:	f9 81       	ldd	r31, Y+1	; 0x01
    2fee:	8f 13       	cpse	r24, r31
    2ff0:	10 c0       	rjmp	.+32     	; 0x3012 <main+0x5bc>
    2ff2:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    2ff6:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    2ffa:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    2ffe:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    3002:	28 16       	cp	r2, r24
    3004:	39 06       	cpc	r3, r25
    3006:	4a 06       	cpc	r4, r26
    3008:	5b 06       	cpc	r5, r27
    300a:	30 f0       	brcs	.+12     	; 0x3018 <main+0x5c2>
    300c:	80 92 2e 01 	sts	0x012E, r8	; 0x80012e <PartMode>
          PartMode = PART_MODE_NPN;
    3010:	05 c0       	rjmp	.+10     	; 0x301c <main+0x5c6>
    3012:	29 81       	ldd	r18, Y+1	; 0x01
					|| (cap.cpre > n_cpre)) {
    3014:	28 17       	cp	r18, r24
    3016:	d4 f7       	brge	.-12     	; 0x300c <main+0x5b6>
    3018:	70 92 2e 01 	sts	0x012E, r7	; 0x80012e <PartMode>
          PartMode = PART_MODE_PNP;
    301c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
		if ((ptrans.count != 0) && (ntrans.count != 0)
    3020:	88 23       	and	r24, r24
    3022:	21 f0       	breq	.+8      	; 0x302c <main+0x5d6>
    3024:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    3028:	81 11       	cpse	r24, r1
    302a:	d3 c0       	rjmp	.+422    	; 0x31d2 <main+0x77c>
    302c:	66 e0       	ldi	r22, 0x06	; 6
    lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);			// position behind the icon, Line 1
    302e:	80 e0       	ldi	r24, 0x00	; 0
    3030:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    lcd_big_icon(BJT_NPN|LCD_UPPER_LEFT);	// show the NPN Icon at lower left corner
    3034:	80 ec       	ldi	r24, 0xC0	; 192
    3036:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
    if(PartMode == PART_MODE_NPN) {
    303a:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    303e:	8c 30       	cpi	r24, 0x0C	; 12
    3040:	09 f0       	breq	.+2      	; 0x3044 <main+0x5ee>
    3042:	d0 c0       	rjmp	.+416    	; 0x31e4 <main+0x78e>
       lcd_MEM_string(NPN_str);		//"NPN "
    3044:	8b e7       	ldi	r24, 0x7B	; 123
    3046:	91 e0       	ldi	r25, 0x01	; 1
    3048:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
       if (ptrans.count != 0) {
    304c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    3050:	88 23       	and	r24, r24
    3052:	19 f0       	breq	.+6      	; 0x305a <main+0x604>
          lcd_data('p');		// mark for parasitic PNp
    3054:	80 e7       	ldi	r24, 0x70	; 112
          lcd_data('n');		// mark for parasitic NPn
    3056:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    vak_diode_nr = search_vak_diode();
    305a:	37 d8       	rcall	.-3986   	; 0x20ca <search_vak_diode>
    305c:	8d 83       	std	Y+5, r24	; 0x05
    305e:	85 30       	cpi	r24, 0x05	; 5
    if (vak_diode_nr < 5) {
    3060:	98 f4       	brcc	.+38     	; 0x3088 <main+0x632>
    3062:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_trans>
       if (_trans->c != diodes.Anode[vak_diode_nr])
    3066:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_trans+0x1>
    306a:	e8 2f       	mov	r30, r24
    306c:	f0 e0       	ldi	r31, 0x00	; 0
    306e:	ea 57       	subi	r30, 0x7A	; 122
    3070:	fe 4f       	sbci	r31, 0xFE	; 254
    3072:	1d 96       	adiw	r26, 0x0d	; 13
    3074:	9c 91       	ld	r25, X
    3076:	80 81       	ld	r24, Z
    3078:	62 e0       	ldi	r22, 0x02	; 2
          options |= OPT_VREVERSE;
    307a:	98 13       	cpse	r25, r24
       if (_trans->c != diodes.Anode[vak_diode_nr])
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <main+0x62a>
    307e:	60 e0       	ldi	r22, 0x00	; 0
       options = 0;
    3080:	82 e9       	ldi	r24, 0x92	; 146
       lcd_update_icon_opt(bmp_vakdiode,options);	// show the protection diode right to the Icon
    3082:	91 e0       	ldi	r25, 0x01	; 1
    3084:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <lcd_update_icon_opt>
    3088:	60 e1       	ldi	r22, 0x10	; 16
    lcd_draw_trans_pins(-7, 16);	// show the pin numbers
    308a:	89 ef       	ldi	r24, 0xF9	; 249
    308c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_draw_trans_pins>
    3090:	86 e0       	ldi	r24, 0x06	; 6
    lcd_next_line(TEXT_RIGHT_TO_ICON);	// position behind the icon, Line 2
    3092:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    3096:	8a e8       	ldi	r24, 0x8A	; 138
    lcd_MEM_string(hfe_str);		//"B="  (hFE)
    3098:	91 e0       	ldi	r25, 0x01	; 1
    309a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    309e:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    DisplayValue(_trans->hfe,-2,0,3);
    30a2:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    30a6:	80 81       	ld	r24, Z
    30a8:	91 81       	ldd	r25, Z+1	; 0x01
    30aa:	a2 81       	ldd	r26, Z+2	; 0x02
    30ac:	b3 81       	ldd	r27, Z+3	; 0x03
    30ae:	89 83       	std	Y+1, r24	; 0x01
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	ab 83       	std	Y+3, r26	; 0x03
    30b4:	bc 83       	std	Y+4, r27	; 0x04
    30b6:	03 e0       	ldi	r16, 0x03	; 3
    30b8:	20 e0       	ldi	r18, 0x00	; 0
    30ba:	4e ef       	ldi	r20, 0xFE	; 254
    30bc:	bc 01       	movw	r22, r24
    30be:	cd 01       	movw	r24, r26
    30c0:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
    30c4:	87 e0       	ldi	r24, 0x07	; 7
    lcd_next_line(TEXT_RIGHT_TO_ICON+1-LOW_H_SPACE); // position behind the icon+1, Line 3
    30c6:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    30ca:	89 e4       	ldi	r24, 0x49	; 73
    lcd_data('I');
    30cc:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    30d0:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    if (_trans->current >= 10000) {
    30d4:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    30d8:	86 81       	ldd	r24, Z+6	; 0x06
    30da:	97 81       	ldd	r25, Z+7	; 0x07
    30dc:	80 31       	cpi	r24, 0x10	; 16
    30de:	97 42       	sbci	r25, 0x27	; 39
    30e0:	08 f4       	brcc	.+2      	; 0x30e4 <main+0x68e>
    30e2:	93 c0       	rjmp	.+294    	; 0x320a <main+0x7b4>
    30e4:	85 e6       	ldi	r24, 0x65	; 101
       lcd_data('e');				// emitter current has 10mA offset
    30e6:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    30ea:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       _trans->current -= 10000;
    30ee:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    30f2:	86 81       	ldd	r24, Z+6	; 0x06
    30f4:	97 81       	ldd	r25, Z+7	; 0x07
    30f6:	80 51       	subi	r24, 0x10	; 16
    30f8:	97 42       	sbci	r25, 0x27	; 39
    30fa:	97 83       	std	Z+7, r25	; 0x07
    30fc:	86 83       	std	Z+6, r24	; 0x06
    30fe:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
    lcd_equal();			// lcd_data('=');
    3102:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    DisplayValue16(_trans->current,-6,'A',2);	// display Ic or Ie current
    3106:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    310a:	22 e0       	ldi	r18, 0x02	; 2
    310c:	41 e4       	ldi	r20, 0x41	; 65
    310e:	6a ef       	ldi	r22, 0xFA	; 250
    3110:	86 81       	ldd	r24, Z+6	; 0x06
    3112:	97 81       	ldd	r25, Z+7	; 0x07
    3114:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    3118:	86 e0       	ldi	r24, 0x06	; 6
    lcd_next_line(TEXT_RIGHT_TO_ICON); // position behind the icon, Line 4
    311a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    311e:	83 e6       	ldi	r24, 0x63	; 99
    lcd_MEM_string(Ube_str);		//"Ube="
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3126:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    Display_mV(_trans->uBE,3-LOW_H_SPACE);
    312a:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    312e:	63 e0       	ldi	r22, 0x03	; 3
    3130:	84 81       	ldd	r24, Z+4	; 0x04
    3132:	95 81       	ldd	r25, Z+5	; 0x05
    3134:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
    3138:	81 e0       	ldi	r24, 0x01	; 1
    last_line_used = 1;
    313a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <last_line_used>
    313e:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    if (_trans->ice0 > 0) {
    3142:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    3146:	80 85       	ldd	r24, Z+8	; 0x08
    3148:	91 85       	ldd	r25, Z+9	; 0x09
    314a:	89 2b       	or	r24, r25
    314c:	91 f0       	breq	.+36     	; 0x3172 <main+0x71c>
    314e:	85 e0       	ldi	r24, 0x05	; 5
       lcd_next_line_wait(TEXT_RIGHT_TO_ICON-1-LOW_H_SPACE); // position behind the icon, Line 4 & wait and clear last line
    3150:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    3154:	8f ee       	ldi	r24, 0xEF	; 239
       lcd_MEM2_string(ICE0_str);		// "ICE0="
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    315c:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       DisplayValue16(_trans->ice0,-6,'A',2);	// display ICEO
    3160:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    3164:	22 e0       	ldi	r18, 0x02	; 2
    3166:	41 e4       	ldi	r20, 0x41	; 65
    3168:	6a ef       	ldi	r22, 0xFA	; 250
    316a:	80 85       	ldd	r24, Z+8	; 0x08
    316c:	91 85       	ldd	r25, Z+9	; 0x09
    316e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    3172:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
    if (_trans->ices > 0) {
    3176:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    317a:	82 85       	ldd	r24, Z+10	; 0x0a
    317c:	93 85       	ldd	r25, Z+11	; 0x0b
    317e:	89 2b       	or	r24, r25
    3180:	91 f0       	breq	.+36     	; 0x31a6 <main+0x750>
    3182:	85 e0       	ldi	r24, 0x05	; 5
       lcd_next_line_wait(TEXT_RIGHT_TO_ICON-1-LOW_H_SPACE); // position behind the icon, Line 4 & wait and clear last line
    3184:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    3188:	89 ee       	ldi	r24, 0xE9	; 233
       lcd_MEM2_string(ICEs_str);		// "ICEs="
    318a:	90 e0       	ldi	r25, 0x00	; 0
    318c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3190:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       DisplayValue16(_trans->ices,-6,'A',2);	// display ICEs
    3194:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    3198:	22 e0       	ldi	r18, 0x02	; 2
    319a:	41 e4       	ldi	r20, 0x41	; 65
    319c:	6a ef       	ldi	r22, 0xFA	; 250
    319e:	82 85       	ldd	r24, Z+10	; 0x0a
    31a0:	93 85       	ldd	r25, Z+11	; 0x0b
    31a2:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    31a6:	bd 81       	ldd	r27, Y+5	; 0x05
    if (vak_diode_nr < 5) {
    31a8:	b5 30       	cpi	r27, 0x05	; 5
    31aa:	68 f4       	brcc	.+26     	; 0x31c6 <main+0x770>
    31ac:	80 e0       	ldi	r24, 0x00	; 0
       lcd_next_line_wait(0); 		// next line, wait 5s and clear line 2/4
    31ae:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    31b2:	8d 81       	ldd	r24, Y+5	; 0x05
       DiodeSymbol_withPins(vak_diode_nr);
    31b4:	0e 94 63 07 	call	0xec6	; 0xec6 <DiodeSymbol_withPins>
    31b8:	8f e5       	ldi	r24, 0x5F	; 95
       lcd_MEM_string(Uf_str);			//"Uf="
    31ba:	91 e0       	ldi	r25, 0x01	; 1
    31bc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    31c0:	8d 81       	ldd	r24, Y+5	; 0x05
       mVAusgabe(vak_diode_nr);
    31c2:	0e 94 2d 07 	call	0xe5a	; 0xe5a <mVAusgabe>
    31c6:	43 e4       	ldi	r20, 0x43	; 67
    PinLayoutLine('E','B','C'); 		//  Pin 1=E ...
    31c8:	62 e4       	ldi	r22, 0x42	; 66
    31ca:	85 e4       	ldi	r24, 0x45	; 69
       PinLayoutLine('E','G','C'); 		//  Pin 1=...
    31cc:	0e 94 d1 06 	call	0xda2	; 0xda2 <PinLayoutLine>
       PinLayoutLine('?','G','?'); 		//  Pin 1=...
    31d0:	f9 cc       	rjmp	.-1550   	; 0x2bc4 <main+0x16e>
    31d2:	4f 99       	sbic	0x09, 7	; 9
				&& (!(RST_PIN_REG & (1 << RST_PIN)))) {
    31d4:	2b cf       	rjmp	.-426    	; 0x302c <main+0x5d6>
    31d6:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
       PartMode ^= (PART_MODE_PNP - PART_MODE_NPN);
    31da:	91 e0       	ldi	r25, 0x01	; 1
    31dc:	89 27       	eor	r24, r25
    31de:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
    31e2:	24 cf       	rjmp	.-440    	; 0x302c <main+0x5d6>
    31e4:	f0 92 63 01 	sts	0x0163, r15	; 0x800163 <_trans+0x1>
       _trans = &ptrans;		// change transistor structure
    31e8:	e0 92 62 01 	sts	0x0162, r14	; 0x800162 <_trans>
    31ec:	87 ec       	ldi	r24, 0xC7	; 199
       lcd_update_icon(bmp_pnp);	// update for PNP
    31ee:	91 e0       	ldi	r25, 0x01	; 1
    31f0:	0e 94 91 0c 	call	0x1922	; 0x1922 <lcd_update_icon>
    31f4:	83 e7       	ldi	r24, 0x73	; 115
       lcd_MEM_string(PNP_str);		//"PNP "
    31f6:	91 e0       	ldi	r25, 0x01	; 1
    31f8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    31fc:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
       if (ntrans.count != 0) {
    3200:	88 23       	and	r24, r24
    3202:	09 f4       	brne	.+2      	; 0x3206 <main+0x7b0>
    3204:	2a cf       	rjmp	.-428    	; 0x305a <main+0x604>
    3206:	8e e6       	ldi	r24, 0x6E	; 110
          lcd_data('n');		// mark for parasitic NPn
    3208:	26 cf       	rjmp	.-436    	; 0x3056 <main+0x600>
    320a:	83 e6       	ldi	r24, 0x63	; 99
       lcd_data('c');
    320c:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    3210:	76 cf       	rjmp	.-276    	; 0x30fe <main+0x6a8>
    3212:	85 30       	cpi	r24, 0x05	; 5
  } else if (PartFound == PART_FET) {	/* JFET or MOSFET */
    3214:	09 f0       	breq	.+2      	; 0x3218 <main+0x7c2>
    3216:	de cd       	rjmp	.-1092   	; 0x2dd4 <main+0x37e>
    3218:	66 e0       	ldi	r22, 0x06	; 6
    lcd_set_cursor(0,TEXT_RIGHT_TO_ICON);	// position behind the icon, Line 1
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    3220:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    if((PartMode&P_CHANNEL) == P_CHANNEL) {
    3224:	e8 2f       	mov	r30, r24
    3226:	e0 71       	andi	r30, 0x10	; 16
    3228:	e9 83       	std	Y+1, r30	; 0x01
    322a:	84 ff       	sbrs	r24, 4
    322c:	68 c0       	rjmp	.+208    	; 0x32fe <main+0x8a8>
    322e:	80 e5       	ldi	r24, 0x50	; 80
       lcd_data('P');			//P-channel
    3230:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    3234:	f0 92 63 01 	sts	0x0163, r15	; 0x800163 <_trans+0x1>
       _trans = &ptrans;
    3238:	e0 92 62 01 	sts	0x0162, r14	; 0x800162 <_trans>
    323c:	f2 e0       	ldi	r31, 0x02	; 2
       fetidx = 2;
    323e:	f9 83       	std	Y+1, r31	; 0x01
    3240:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
    lcd_minus();	// lcd_data('-');		// minus is used for JFET, D-MOS, E-MOS ...
    3244:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    part_code = PartMode&0x0f;
    3248:	18 2f       	mov	r17, r24
    324a:	1f 70       	andi	r17, 0x0F	; 15
    324c:	14 30       	cpi	r17, 0x04	; 4
    if (part_code == PART_MODE_JFET) {
    324e:	09 f0       	breq	.+2      	; 0x3252 <main+0x7fc>
    3250:	5a c0       	rjmp	.+180    	; 0x3306 <main+0x8b0>
    3252:	85 e9       	ldi	r24, 0x95	; 149
       lcd_MEM_string(jfet_str);	//"JFET"
    3254:	91 e0       	ldi	r25, 0x01	; 1
    3256:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    325a:	83 ec       	ldi	r24, 0xC3	; 195
       lcd_big_icon(N_JFET|LCD_UPPER_LEFT);
    325c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
    3260:	29 81       	ldd	r18, Y+1	; 0x01
       if (fetidx != 0) {
    3262:	80 ed       	ldi	r24, 0xD0	; 208
          lcd_update_icon(bmp_p_jfet); // update the n_jfet bitmap to p_jfet
    3264:	91 e0       	ldi	r25, 0x01	; 1
    3266:	21 11       	cpse	r18, r1
       if (fetidx != 0) {
    3268:	64 c0       	rjmp	.+200    	; 0x3332 <main+0x8dc>
    326a:	0e 94 65 10 	call	0x20ca	; 0x20ca <search_vak_diode>
    vak_diode_nr = search_vak_diode();
    326e:	85 30       	cpi	r24, 0x05	; 5
    if(vak_diode_nr < 5) {
    3270:	98 f4       	brcc	.+38     	; 0x3298 <main+0x842>
    3272:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <_trans>
       if (_trans->c != diodes.Anode[vak_diode_nr])
    3276:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <_trans+0x1>
    327a:	e8 2f       	mov	r30, r24
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	ea 57       	subi	r30, 0x7A	; 122
    3280:	fe 4f       	sbci	r31, 0xFE	; 254
    3282:	1d 96       	adiw	r26, 0x0d	; 13
    3284:	9c 91       	ld	r25, X
    3286:	80 81       	ld	r24, Z
    3288:	62 e0       	ldi	r22, 0x02	; 2
          options |= OPT_VREVERSE;
    328a:	98 13       	cpse	r25, r24
       if (_trans->c != diodes.Anode[vak_diode_nr])
    328c:	01 c0       	rjmp	.+2      	; 0x3290 <main+0x83a>
    328e:	60 e0       	ldi	r22, 0x00	; 0
       options = 0;
    3290:	82 e9       	ldi	r24, 0x92	; 146
       lcd_update_icon_opt(bmp_vakdiode,options);	// update Icon with protection diode
    3292:	91 e0       	ldi	r25, 0x01	; 1
    3294:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <lcd_update_icon_opt>
    3298:	60 e1       	ldi	r22, 0x10	; 16
    lcd_draw_trans_pins(-7, 16);	// update of pin numbers must be done after diode update
    329a:	89 ef       	ldi	r24, 0xF9	; 249
    329c:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <lcd_draw_trans_pins>
    32a0:	86 e0       	ldi	r24, 0x06	; 6
    lcd_next_line(TEXT_RIGHT_TO_ICON);	// position text behind the icon, Line 2
    32a2:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    32a6:	86 e0       	ldi	r24, 0x06	; 6
       lcd_next_line(TEXT_RIGHT_TO_ICON);	// double line
    32a8:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    32ac:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    if((PartMode&D_MODE) != D_MODE) {	//enhancement-MOSFET
    32b0:	85 fd       	sbrc	r24, 5
    32b2:	6a c0       	rjmp	.+212    	; 0x3388 <main+0x932>
    32b4:	8b e5       	ldi	r24, 0x5B	; 91
       lcd_MEM_string(vt_str+1);		// "Vt="
    32b6:	91 e0       	ldi	r25, 0x01	; 1
    32b8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    32bc:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       Display_mV(_trans->gthvoltage,2);	//Gate-threshold voltage
    32c0:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    32c4:	62 e0       	ldi	r22, 0x02	; 2
    32c6:	82 85       	ldd	r24, Z+10	; 0x0a
    32c8:	93 85       	ldd	r25, Z+11	; 0x0b
    32ca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
    32ce:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       ReadCapacity(_trans->b,_trans->e);	//measure capacity
    32d2:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    32d6:	66 85       	ldd	r22, Z+14	; 0x0e
    32d8:	84 85       	ldd	r24, Z+12	; 0x0c
    32da:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    32de:	86 e0       	ldi	r24, 0x06	; 6
       lcd_next_line(TEXT_RIGHT_TO_ICON);	// position text behind the icon, Line 3
    32e0:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    32e4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_show_Cg>
       lcd_show_Cg();	// show Cg=xxxpF
    32e8:	85 e0       	ldi	r24, 0x05	; 5
       lcd_show_rds(TEXT_RIGHT_TO_ICON-1); 	// show RDS at column behind the icon -1
    32ea:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <lcd_show_rds>
       lcd_show_rds(0);                // show Drain-Source resistance RDS at column 0
    32ee:	4f e3       	ldi	r20, 0x3F	; 63
       PinLayoutLine('?','G','?'); 		//  Pin 1=...
    32f0:	67 e4       	ldi	r22, 0x47	; 71
    32f2:	8f e3       	ldi	r24, 0x3F	; 63
    32f4:	14 30       	cpi	r17, 0x04	; 4
    if (part_code != PART_MODE_JFET) {
    32f6:	09 f4       	brne	.+2      	; 0x32fa <main+0x8a4>
    32f8:	69 cf       	rjmp	.-302    	; 0x31cc <main+0x776>
    32fa:	19 82       	std	Y+1, r1	; 0x01
       for (ii=0;ii<NumOfDiodes;ii++) {
    32fc:	cc c0       	rjmp	.+408    	; 0x3496 <main+0xa40>
    32fe:	8e e4       	ldi	r24, 0x4E	; 78
       lcd_data('N');			//N-channel
    3300:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    3304:	9d cf       	rjmp	.-198    	; 0x3240 <main+0x7ea>
    3306:	85 ff       	sbrs	r24, 5
       if ((PartMode&D_MODE) == D_MODE) {
    3308:	17 c0       	rjmp	.+46     	; 0x3338 <main+0x8e2>
    330a:	84 e4       	ldi	r24, 0x44	; 68
          lcd_data('D');			// N-D or P-D
    330c:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    3310:	39 81       	ldd	r19, Y+1	; 0x01
          fetidx += 1;
    3312:	3f 5f       	subi	r19, 0xFF	; 255
    3314:	39 83       	std	Y+1, r19	; 0x01
    3316:	13 30       	cpi	r17, 0x03	; 3
       if (part_code == (PART_MODE_IGBT)) {
    3318:	f9 f4       	brne	.+62     	; 0x3358 <main+0x902>
    331a:	8f e8       	ldi	r24, 0x8F	; 143
          lcd_MEM_string(igbt_str);	//"-IGBT"
    331c:	91 e0       	ldi	r25, 0x01	; 1
    331e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3322:	81 ec       	ldi	r24, 0xC1	; 193
          lcd_big_icon(N_E_IGBT|LCD_UPPER_LEFT);
    3324:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
    3328:	89 81       	ldd	r24, Y+1	; 0x01
          if (fetidx == 1)  lcd_update_icon(bmp_n_d_igbt);
    332a:	81 30       	cpi	r24, 0x01	; 1
    332c:	49 f4       	brne	.+18     	; 0x3340 <main+0x8ea>
    332e:	8d e1       	ldi	r24, 0x1D	; 29
    3330:	92 e0       	ldi	r25, 0x02	; 2
    3332:	0e 94 91 0c 	call	0x1922	; 0x1922 <lcd_update_icon>
          if (fetidx == 3)  lcd_update_icon(bmp_p_d_mos);
    3336:	99 cf       	rjmp	.-206    	; 0x326a <main+0x814>
    3338:	85 e4       	ldi	r24, 0x45	; 69
          lcd_data('E');			// N-E or P-E
    333a:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    333e:	eb cf       	rjmp	.-42     	; 0x3316 <main+0x8c0>
    3340:	99 81       	ldd	r25, Y+1	; 0x01
          if (fetidx == 2)  lcd_update_icon(bmp_p_e_igbt);
    3342:	92 30       	cpi	r25, 0x02	; 2
    3344:	31 f0       	breq	.+12     	; 0x3352 <main+0x8fc>
    3346:	93 30       	cpi	r25, 0x03	; 3
          if (fetidx == 3)  lcd_update_icon(bmp_p_d_igbt);
    3348:	09 f0       	breq	.+2      	; 0x334c <main+0x8f6>
    334a:	8f cf       	rjmp	.-226    	; 0x326a <main+0x814>
    334c:	89 ef       	ldi	r24, 0xF9	; 249
    334e:	91 e0       	ldi	r25, 0x01	; 1
    3350:	f0 cf       	rjmp	.-32     	; 0x3332 <main+0x8dc>
    3352:	89 e2       	ldi	r24, 0x29	; 41
          if (fetidx == 2)  lcd_update_icon(bmp_p_e_igbt);
    3354:	92 e0       	ldi	r25, 0x02	; 2
    3356:	ed cf       	rjmp	.-38     	; 0x3332 <main+0x8dc>
    3358:	8a e9       	ldi	r24, 0x9A	; 154
          lcd_MEM_string(mosfet_str);	//"-MOS "
    335a:	91 e0       	ldi	r25, 0x01	; 1
    335c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3360:	82 ec       	ldi	r24, 0xC2	; 194
          lcd_big_icon(N_E_MOS|LCD_UPPER_LEFT);
    3362:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <lcd_big_icon>
    3366:	a9 81       	ldd	r26, Y+1	; 0x01
          if (fetidx == 1)  lcd_update_icon(bmp_n_d_mos);
    3368:	89 ee       	ldi	r24, 0xE9	; 233
    336a:	91 e0       	ldi	r25, 0x01	; 1
    336c:	a1 30       	cpi	r26, 0x01	; 1
    336e:	09 f3       	breq	.-62     	; 0x3332 <main+0x8dc>
    3370:	b9 81       	ldd	r27, Y+1	; 0x01
          if (fetidx == 2)  lcd_update_icon(bmp_p_e_mos);
    3372:	b2 30       	cpi	r27, 0x02	; 2
    3374:	31 f0       	breq	.+12     	; 0x3382 <main+0x92c>
    3376:	b3 30       	cpi	r27, 0x03	; 3
          if (fetidx == 3)  lcd_update_icon(bmp_p_d_mos);
    3378:	09 f0       	breq	.+2      	; 0x337c <main+0x926>
    337a:	77 cf       	rjmp	.-274    	; 0x326a <main+0x814>
    337c:	87 ed       	ldi	r24, 0xD7	; 215
    337e:	91 e0       	ldi	r25, 0x01	; 1
    3380:	d8 cf       	rjmp	.-80     	; 0x3332 <main+0x8dc>
    3382:	8f ee       	ldi	r24, 0xEF	; 239
          if (fetidx == 2)  lcd_update_icon(bmp_p_e_mos);
    3384:	91 e0       	ldi	r25, 0x01	; 1
    3386:	d5 cf       	rjmp	.-86     	; 0x3332 <main+0x8dc>
    3388:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
          ReadCapacity(_trans->b,_trans->e);	//measure capacity
    338c:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    3390:	8f 70       	andi	r24, 0x0F	; 15
       if ((PartMode&0x0f)  != PART_MODE_JFET) {     /* kein JFET */
    3392:	84 30       	cpi	r24, 0x04	; 4
    3394:	09 f4       	brne	.+2      	; 0x3398 <main+0x942>
    3396:	54 c0       	rjmp	.+168    	; 0x3440 <main+0x9ea>
    3398:	66 85       	ldd	r22, Z+14	; 0x0e
          ReadCapacity(_trans->b,_trans->e);	//measure capacity
    339a:	84 85       	ldd	r24, Z+12	; 0x0c
    339c:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
    33a0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <lcd_show_Cg>
          lcd_show_Cg();	// show Cg=xxxpF
    33a4:	60 e0       	ldi	r22, 0x00	; 0
       lcd_set_cursor((LINE_BELOW_ICON + 1) * PAGES_PER_LINE,0);
    33a6:	86 e0       	ldi	r24, 0x06	; 6
    33a8:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    33ac:	89 e4       	ldi	r24, 0x49	; 73
       lcd_data('I');
    33ae:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    33b2:	84 e6       	ldi	r24, 0x64	; 100
       lcd_data('d');
    33b4:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    33b8:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
       lcd_equal();			// lcd_data('=');
    33bc:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       DisplayValue16(_trans->current,-6,'A',2);
    33c0:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    33c4:	22 e0       	ldi	r18, 0x02	; 2
    33c6:	41 e4       	ldi	r20, 0x41	; 65
    33c8:	6a ef       	ldi	r22, 0xFA	; 250
    33ca:	86 81       	ldd	r24, Z+6	; 0x06
    33cc:	97 81       	ldd	r25, Z+7	; 0x07
    33ce:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    33d2:	85 e5       	ldi	r24, 0x55	; 85
       lcd_MEM_string(Vgs_str);		// "@Vg="
    33d4:	91 e0       	ldi	r25, 0x01	; 1
    33d6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    33da:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       Display_mV(_trans->gthvoltage,2);	//Gate-threshold voltage
    33de:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    33e2:	62 e0       	ldi	r22, 0x02	; 2
    33e4:	82 85       	ldd	r24, Z+10	; 0x0a
    33e6:	93 85       	ldd	r25, Z+11	; 0x0b
    33e8:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
    33ec:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
       if (_trans->ice0<4800) { // can't trust cutoff voltage if close to 5V supply voltage, since then the transistor may not have been cut off at all
    33f0:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    33f4:	80 85       	ldd	r24, Z+8	; 0x08
    33f6:	91 85       	ldd	r25, Z+9	; 0x09
    33f8:	80 3c       	cpi	r24, 0xC0	; 192
    33fa:	92 41       	sbci	r25, 0x12	; 18
    33fc:	f8 f4       	brcc	.+62     	; 0x343c <main+0x9e6>
    33fe:	80 e0       	ldi	r24, 0x00	; 0
          lcd_next_line_wait(0);
    3400:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    3404:	89 e4       	ldi	r24, 0x49	; 73
          lcd_data('I');
    3406:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    340a:	84 e6       	ldi	r24, 0x64	; 100
          lcd_data('d');
    340c:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    3410:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
          lcd_equal();			// lcd_data('=');
    3414:	22 e0       	ldi	r18, 0x02	; 2
          DisplayValue16(0,-5,'A',2);
    3416:	41 e4       	ldi	r20, 0x41	; 65
    3418:	6b ef       	ldi	r22, 0xFB	; 251
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	80 e0       	ldi	r24, 0x00	; 0
    341e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    3422:	85 e5       	ldi	r24, 0x55	; 85
          lcd_MEM_string(Vgs_str);		// "@Vg="
    3424:	91 e0       	ldi	r25, 0x01	; 1
    3426:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    342a:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
          Display_mV(_trans->ice0,2);	// cutoff Gate voltage
    342e:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    3432:	62 e0       	ldi	r22, 0x02	; 2
    3434:	80 85       	ldd	r24, Z+8	; 0x08
    3436:	91 85       	ldd	r25, Z+9	; 0x09
    3438:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
    343c:	80 e0       	ldi	r24, 0x00	; 0
       lcd_show_rds(0);                // show Drain-Source resistance RDS at column 0
    343e:	55 cf       	rjmp	.-342    	; 0x32ea <main+0x894>
    3440:	84 81       	ldd	r24, Z+4	; 0x04
          if (_trans->uBE!=0) {
    3442:	95 81       	ldd	r25, Z+5	; 0x05
    3444:	89 2b       	or	r24, r25
    3446:	09 f4       	brne	.+2      	; 0x344a <main+0x9f4>
    3448:	ad cf       	rjmp	.-166    	; 0x33a4 <main+0x94e>
    344a:	80 e0       	ldi	r24, 0x00	; 0
             lcd_MEM_string(str_Idss);
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3452:	e0 91 62 01 	lds	r30, 0x0162	; 0x800162 <_trans>
             DisplayValue16(_trans->uBE,-6,'A',2);
    3456:	f0 91 63 01 	lds	r31, 0x0163	; 0x800163 <_trans+0x1>
    345a:	22 e0       	ldi	r18, 0x02	; 2
    345c:	41 e4       	ldi	r20, 0x41	; 65
    345e:	6a ef       	ldi	r22, 0xFA	; 250
    3460:	84 81       	ldd	r24, Z+4	; 0x04
    3462:	95 81       	ldd	r25, Z+5	; 0x05
    3464:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    3468:	9d cf       	rjmp	.-198    	; 0x33a4 <main+0x94e>
    346a:	f9 81       	ldd	r31, Y+1	; 0x01
          if (ii == 0) lcd_next_line(0);		// line 5 , if possible
    346c:	f1 11       	cpse	r31, r1
    346e:	03 c0       	rjmp	.+6      	; 0x3476 <main+0xa20>
    3470:	80 e0       	ldi	r24, 0x00	; 0
    3472:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    3476:	80 e0       	ldi	r24, 0x00	; 0
          lcd_next_line_wait(0);		// line 4, if possible & wait 5s and clear last line 
    3478:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
    347c:	89 81       	ldd	r24, Y+1	; 0x01
          DiodeSymbol_withPins(ii);
    347e:	0e 94 63 07 	call	0xec6	; 0xec6 <DiodeSymbol_withPins>
    3482:	8f e5       	ldi	r24, 0x5F	; 95
          lcd_MEM_string(Uf_str);			//"Uf="
    3484:	91 e0       	ldi	r25, 0x01	; 1
    3486:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    348a:	89 81       	ldd	r24, Y+1	; 0x01
          mVAusgabe(ii);
    348c:	0e 94 2d 07 	call	0xe5a	; 0xe5a <mVAusgabe>
    3490:	29 81       	ldd	r18, Y+1	; 0x01
       for (ii=0;ii<NumOfDiodes;ii++) {
    3492:	2f 5f       	subi	r18, 0xFF	; 255
    3494:	29 83       	std	Y+1, r18	; 0x01
    3496:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
    349a:	39 81       	ldd	r19, Y+1	; 0x01
    349c:	38 17       	cp	r19, r24
    349e:	28 f3       	brcs	.-54     	; 0x346a <main+0xa14>
    34a0:	44 e4       	ldi	r20, 0x44	; 68
       PinLayoutLine('S','G','D'); 		//  Pin 1=...
    34a2:	67 e4       	ldi	r22, 0x47	; 71
    34a4:	83 e5       	ldi	r24, 0x53	; 83
    34a6:	13 30       	cpi	r17, 0x03	; 3
    if (part_code == PART_MODE_IGBT) {
    34a8:	09 f0       	breq	.+2      	; 0x34ac <main+0xa56>
    34aa:	90 ce       	rjmp	.-736    	; 0x31cc <main+0x776>
    34ac:	43 e4       	ldi	r20, 0x43	; 67
       PinLayoutLine('E','G','C'); 		//  Pin 1=...
    34ae:	67 e4       	ldi	r22, 0x47	; 71
    34b0:	8c ce       	rjmp	.-744    	; 0x31ca <main+0x774>
    34b2:	40 e0       	ldi	r20, 0x00	; 0
       show_resis(rpins.pb[0],rpins.pb[1],0);
    34b4:	0e 94 d6 29 	call	0x53ac	; 0x53ac <show_resis>
    34b8:	85 cb       	rjmp	.-2294   	; 0x2bc4 <main+0x16e>
    34ba:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <ResistorList+0x1>
       if (ResistorVal[ResistorList[1]] > ResistorVal[ii])
    34be:	e4 e0       	ldi	r30, 0x04	; 4
    34c0:	9e 9f       	mul	r25, r30
    34c2:	d0 01       	movw	r26, r0
    34c4:	11 24       	eor	r1, r1
    34c6:	a6 55       	subi	r26, 0x56	; 86
    34c8:	be 4f       	sbci	r27, 0xFE	; 254
    34ca:	34 e0       	ldi	r19, 0x04	; 4
    34cc:	83 9f       	mul	r24, r19
    34ce:	f0 01       	movw	r30, r0
    34d0:	11 24       	eor	r1, r1
    34d2:	e6 55       	subi	r30, 0x56	; 86
    34d4:	fe 4f       	sbci	r31, 0xFE	; 254
    34d6:	2d 90       	ld	r2, X+
    34d8:	3d 90       	ld	r3, X+
    34da:	4d 90       	ld	r4, X+
    34dc:	5c 90       	ld	r5, X
    34de:	40 81       	ld	r20, Z
    34e0:	51 81       	ldd	r21, Z+1	; 0x01
    34e2:	62 81       	ldd	r22, Z+2	; 0x02
    34e4:	73 81       	ldd	r23, Z+3	; 0x03
    34e6:	42 15       	cp	r20, r2
    34e8:	53 05       	cpc	r21, r3
    34ea:	64 05       	cpc	r22, r4
    34ec:	75 05       	cpc	r23, r5
    34ee:	08 f0       	brcs	.+2      	; 0x34f2 <main+0xa9c>
    34f0:	4d c0       	rjmp	.+154    	; 0x358c <main+0xb36>
    34f2:	99 83       	std	Y+1, r25	; 0x01
          ii = ResistorList[1]; // second resistor in the list with number 0,1,2
    34f4:	98 0f       	add	r25, r24
          ii = (3 - ResistorList[0] - ResistorList[1]);
    34f6:	83 e0       	ldi	r24, 0x03	; 3
    34f8:	89 1b       	sub	r24, r25
    34fa:	22 30       	cpi	r18, 0x02	; 2
       if (ResistorsFound == 2) {
    34fc:	e1 f0       	breq	.+56     	; 0x3536 <main+0xae0>
    34fe:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <ResistorList+0x2>
          if (ResistorVal[ResistorList[2]] > ResistorVal[ii]) {
    3502:	94 e0       	ldi	r25, 0x04	; 4
    3504:	89 9f       	mul	r24, r25
    3506:	d0 01       	movw	r26, r0
    3508:	11 24       	eor	r1, r1
    350a:	a6 55       	subi	r26, 0x56	; 86
    350c:	be 4f       	sbci	r27, 0xFE	; 254
    350e:	39 81       	ldd	r19, Y+1	; 0x01
    3510:	24 e0       	ldi	r18, 0x04	; 4
    3512:	32 9f       	mul	r19, r18
    3514:	f0 01       	movw	r30, r0
    3516:	11 24       	eor	r1, r1
    3518:	e6 55       	subi	r30, 0x56	; 86
    351a:	fe 4f       	sbci	r31, 0xFE	; 254
    351c:	0d 91       	ld	r16, X+
    351e:	1d 91       	ld	r17, X+
    3520:	2d 91       	ld	r18, X+
    3522:	3c 91       	ld	r19, X
    3524:	40 81       	ld	r20, Z
    3526:	51 81       	ldd	r21, Z+1	; 0x01
    3528:	62 81       	ldd	r22, Z+2	; 0x02
    352a:	73 81       	ldd	r23, Z+3	; 0x03
    352c:	40 17       	cp	r20, r16
    352e:	51 07       	cpc	r21, r17
    3530:	62 07       	cpc	r22, r18
    3532:	73 07       	cpc	r23, r19
    3534:	08 f4       	brcc	.+2      	; 0x3538 <main+0xae2>
    3536:	89 83       	std	Y+1, r24	; 0x01
             ii = ResistorList[2];
    3538:	09 81       	ldd	r16, Y+1	; 0x01
       x = TP1+(ii>>1);
    353a:	06 95       	lsr	r16
    353c:	12 e0       	ldi	r17, 0x02	; 2
       y = TP3-ii;
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	18 1b       	sub	r17, r24
    3542:	bb 24       	eor	r11, r11
       z = TP2+(ii>0);
    3544:	b3 94       	inc	r11
    3546:	88 23       	and	r24, r24
    3548:	11 f0       	breq	.+4      	; 0x354e <main+0xaf8>
    354a:	32 e0       	ldi	r19, 0x02	; 2
    354c:	b3 2e       	mov	r11, r19
    354e:	80 2f       	mov	r24, r16
       lcd_testpin(x);  	//Pin-number 1
    3550:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
    3554:	88 e0       	ldi	r24, 0x08	; 8
       lcd_MEM_string(Resistor_str);    // -[=]-
    3556:	91 e0       	ldi	r25, 0x01	; 1
    3558:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    355c:	81 2f       	mov	r24, r17
       lcd_testpin(y);		//Pin-number 2
    355e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
    3562:	88 e0       	ldi	r24, 0x08	; 8
       lcd_MEM_string(Resistor_str);    // -[=]-
    3564:	91 e0       	ldi	r25, 0x01	; 1
    3566:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    356a:	8b 2d       	mov	r24, r11
       lcd_testpin(z);		//Pin-number 3
    356c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
    3570:	80 e0       	ldi	r24, 0x00	; 0
       lcd_next_line(0);
    3572:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    3576:	81 e0       	ldi	r24, 0x01	; 1
       RvalOut(ii==0);
    3578:	99 81       	ldd	r25, Y+1	; 0x01
    357a:	91 11       	cpse	r25, r1
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	0e 94 08 07 	call	0xe10	; 0xe10 <RvalOut>
    3582:	82 e0       	ldi	r24, 0x02	; 2
       RvalOut(2-(ii>>1));
    3584:	80 1b       	sub	r24, r16
    3586:	0e 94 08 07 	call	0xe10	; 0xe10 <RvalOut>
    358a:	1c cb       	rjmp	.-2504   	; 0x2bc4 <main+0x16e>
    358c:	89 83       	std	Y+1, r24	; 0x01
       ii = ResistorList[0];	// first resistor in the list with number 0,1,2
    358e:	b2 cf       	rjmp	.-156    	; 0x34f4 <main+0xa9e>
    3590:	82 e7       	ldi	r24, 0x72	; 114
  lcd_MEM_string(TestFailed1); 	//"Kein,unbek. oder"
    3592:	92 e0       	ldi	r25, 0x02	; 2
    3594:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3598:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
  lcd_line2(); //2. row 
    359c:	8f e9       	ldi	r24, 0x9F	; 159
  lcd_MEM_string(TestFailed2); 		//"defektes "
    359e:	92 e0       	ldi	r25, 0x02	; 2
    35a0:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    35a4:	8a e9       	ldi	r24, 0x9A	; 154
  lcd_MEM_string(Bauteil);		//"Bauteil"
    35a6:	92 e0       	ldi	r25, 0x02	; 2
    35a8:	b5 cc       	rjmp	.-1686   	; 0x2f14 <main+0x4be>
    35aa:	81 11       	cpse	r24, r1
	if (ii != 0)
    35ac:	c1 ca       	rjmp	.-2686   	; 0x2b30 <main+0xda>
    35ae:	91 11       	cpse	r25, r1
  if (rotary.incre > 0) goto wait_again;
    35b0:	bd cc       	rjmp	.-1670   	; 0x2f2c <main+0x4d6>
    35b2:	aa cb       	rjmp	.-2220   	; 0x2d08 <main+0x2b2>
shut_off:
    35b4:	80 e0       	ldi	r24, 0x00	; 0
         zeich = pgm_read_byte(&HelpCalibration_str[ii+jj]);
         if ((zeich == ' ') || (zeich == LCD_NO_SPACE)) space_pos = ii; // save the position
       }
       if (line_nr == 0) {
          // it is the first LCD line, wait for showing the last message
          if ((wait_for_key_ms(TIME_TO_READ)) != 0)  break;	// key pressed 
    35b6:	9d e7       	ldi	r25, 0x7D	; 125
    35b8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
    35bc:	81 11       	cpse	r24, r1
    35be:	53 c0       	rjmp	.+166    	; 0x3666 <main+0xc10>
    35c0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
 #ifdef WITH_ROTARY_SWITCH
          if (rotary.count < 0) goto start_help_text;
    35c4:	87 ff       	sbrs	r24, 7
    35c6:	19 c0       	rjmp	.+50     	; 0x35fa <main+0xba4>
    35c8:	28 e0       	ldi	r18, 0x08	; 8
    line_nr = LCD_LINES;		// begin with the first LCD line, but don't wait
    35ca:	62 2e       	mov	r6, r18
    35cc:	10 e0       	ldi	r17, 0x00	; 0
    jj = 0;
    35ce:	00 e0       	ldi	r16, 0x00	; 0
    35d0:	d8 01       	movw	r26, r16
       for (ii=0;ii<(LCD_LINE_LENGTH+1);ii++) {	// look for the last space character
    35d2:	a9 5b       	subi	r26, 0xB9	; 185
    35d4:	bd 4f       	sbci	r27, 0xFD	; 253
    35d6:	5d 01       	movw	r10, r26
    35d8:	fd 01       	movw	r30, r26
  max_time = SHORT_WAIT_TIME;		// use allways the short wait time
    35da:	80 e0       	ldi	r24, 0x00	; 0
    35dc:	94 e1       	ldi	r25, 0x14	; 20
       space_pos = LCD_LINE_LENGTH;		// if no space is found
    35de:	49 2e       	mov	r4, r25
    35e0:	24 91       	lpm	r18, Z
         zeich = pgm_read_byte(&HelpCalibration_str[ii+jj]);
    35e2:	29 83       	std	Y+1, r18	; 0x01
    35e4:	20 32       	cpi	r18, 0x20	; 32
         if ((zeich == ' ') || (zeich == LCD_NO_SPACE)) space_pos = ii; // save the position
    35e6:	11 f0       	breq	.+4      	; 0x35ec <main+0xb96>
    35e8:	2e 3f       	cpi	r18, 0xFE	; 254
    35ea:	09 f4       	brne	.+2      	; 0x35ee <main+0xb98>
    35ec:	48 2e       	mov	r4, r24
    35ee:	8f 5f       	subi	r24, 0xFF	; 255
       for (ii=0;ii<(LCD_LINE_LENGTH+1);ii++) {	// look for the last space character
    35f0:	31 96       	adiw	r30, 0x01	; 1
    35f2:	85 31       	cpi	r24, 0x15	; 21
    35f4:	a9 f7       	brne	.-22     	; 0x35e0 <main+0xb8a>
    35f6:	66 20       	and	r6, r6
       if (line_nr == 0) {
    35f8:	e9 f2       	breq	.-70     	; 0x35b4 <main+0xb5e>
    35fa:	36 2d       	mov	r19, r6
 #endif
       }
       sub_line = line_nr % LCD_LINES;
    35fc:	37 70       	andi	r19, 0x07	; 7
    35fe:	53 2e       	mov	r5, r19
    3600:	11 f4       	brne	.+4      	; 0x3606 <main+0xbb0>
       if (sub_line == 0) lcd_clear();  // clear display, line_nr is 0 or 4
    3602:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
    3606:	60 e0       	ldi	r22, 0x00	; 0
       lcd_set_cursor(sub_line*PAGES_PER_LINE ,0);
    3608:	85 2d       	mov	r24, r5
    360a:	88 0f       	add	r24, r24
    360c:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
    3610:	a8 95       	wdr
       uart_newline();
       wdt_reset();
    3612:	63 94       	inc	r6
       line_nr = (line_nr + 1) % LCD_LINES;
    3614:	86 2d       	mov	r24, r6
    3616:	87 70       	andi	r24, 0x07	; 7
    3618:	68 2e       	mov	r6, r24
    361a:	51 2c       	mov	r5, r1
       for (ii=0;ii<space_pos;ii++) {
    361c:	54 10       	cpse	r5, r4
    361e:	0e c0       	rjmp	.+28     	; 0x363c <main+0xbe6>
    3620:	89 81       	ldd	r24, Y+1	; 0x01
            lcd_space();	// replace with space
         } else {
            if (zeich != LCD_NO_SPACE) lcd_data(zeich);		// display the character without offset
         }
       }
       if (zeich == (char)0) break;	// end of text found
    3622:	88 23       	and	r24, r24
    3624:	01 f1       	breq	.+64     	; 0x3666 <main+0xc10>
    3626:	05 0d       	add	r16, r5
       jj += space_pos;		// start position of line 2
    3628:	11 1d       	adc	r17, r1
    362a:	f8 01       	movw	r30, r16
       if((pgm_read_byte(&HelpCalibration_str[jj])) == ' ') jj++; // no space at begin of line
    362c:	e9 5b       	subi	r30, 0xB9	; 185
    362e:	fd 4f       	sbci	r31, 0xFD	; 253
    3630:	e4 91       	lpm	r30, Z
    3632:	e0 32       	cpi	r30, 0x20	; 32
    3634:	69 f6       	brne	.-102    	; 0x35d0 <main+0xb7a>
    3636:	0f 5f       	subi	r16, 0xFF	; 255
    3638:	1f 4f       	sbci	r17, 0xFF	; 255
    363a:	ca cf       	rjmp	.-108    	; 0x35d0 <main+0xb7a>
    363c:	f5 01       	movw	r30, r10
         zeich = pgm_read_byte(&HelpCalibration_str[ii+jj]);
    363e:	f4 91       	lpm	r31, Z
    3640:	f9 83       	std	Y+1, r31	; 0x01
    3642:	ff 23       	and	r31, r31
         if (zeich == (char)0) break;	// end of text found
    3644:	81 f0       	breq	.+32     	; 0x3666 <main+0xc10>
    3646:	ff 3f       	cpi	r31, 0xFF	; 255
         if (zeich == LCD_CHAR_INSEP) {
    3648:	39 f4       	brne	.+14     	; 0x3658 <main+0xc02>
    364a:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
            lcd_space();	// replace with space
    364e:	53 94       	inc	r5
       for (ii=0;ii<space_pos;ii++) {
    3650:	3f ef       	ldi	r19, 0xFF	; 255
    3652:	a3 1a       	sub	r10, r19
    3654:	b3 0a       	sbc	r11, r19
    3656:	e2 cf       	rjmp	.-60     	; 0x361c <main+0xbc6>
    3658:	29 81       	ldd	r18, Y+1	; 0x01
            if (zeich != LCD_NO_SPACE) lcd_data(zeich);		// display the character without offset
    365a:	2e 3f       	cpi	r18, 0xFE	; 254
    365c:	c1 f3       	breq	.-16     	; 0x364e <main+0xbf8>
    365e:	82 2f       	mov	r24, r18
    3660:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    3664:	f4 cf       	rjmp	.-24     	; 0x364e <main+0xbf8>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    }  /* end while */
    wait_for_key_ms(TIME_TO_READ);	// key pressed
    3668:	9d e7       	ldi	r25, 0x7D	; 125
    366a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
    366e:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
 #ifdef WITH_ROTARY_SWITCH
    if (rotary.count < 0) goto start_help_text;
    3672:	87 fd       	sbrc	r24, 7
    3674:	a9 cf       	rjmp	.-174    	; 0x35c8 <main+0xb72>
    3676:	4c cb       	rjmp	.-2408   	; 0x2d10 <main+0x2ba>
    3678:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
	     lcd_line1();
    367c:	8f e5       	ldi	r24, 0x5F	; 95
             lcd_MEM_string(TestTimedOut);	//Output Timeout
    367e:	92 e0       	ldi	r25, 0x02	; 2
    3680:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    3684:	8b ec       	ldi	r24, 0xCB	; 203
	     wait_about3s();			// time to read the Timeout message
    3686:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
    368a:	0e 94 ad 10 	call	0x215a	; 0x215a <switch_tester_off>
	     switch_tester_off();
    368e:	90 e0       	ldi	r25, 0x00	; 0
}   // end main
    3690:	80 e0       	ldi	r24, 0x00	; 0
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	08 95       	ret

0000369e <Battery_check>:

//	  Calibrate_UR();		// get Ref Voltages and Pin resistance
//        lcd_line1();			// Cursor to 1. row, column 1
	  
#ifdef BAT_CHECK
void Battery_check(void) {
    369e:	0f 93       	push	r16
    36a0:	1f 93       	push	r17
    36a2:	cf 93       	push	r28
    36a4:	df 93       	push	r29
 uint16_t bat_voltage;
 uint16_t bat_adc;
  // Battery check is selected
  ReadADC(TPBAT);	//Dummy-Readout
    36a6:	85 e0       	ldi	r24, 0x05	; 5
    36a8:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
  bat_adc = W5msReadADC(TPBAT); 	//with 5V reference
    36ac:	85 e0       	ldi	r24, 0x05	; 5
    36ae:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    36b2:	ec 01       	movw	r28, r24
  // A good result can be get with multiply by 4 and divide by 10 (about 0.75%).
  #if BAT_NUMERATOR <= (0xffff/U_VCC)
	  bat_voltage = (bat_adc*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
  #else
   #if (BAT_NUMERATOR == 133) && (BAT_DENOMINATOR == 33)
	  bat_voltage = (bat_adc*4)+BAT_OUT;		// usually output only 2 digits
    36b4:	8c 01       	movw	r16, r24
    36b6:	00 0f       	add	r16, r16
    36b8:	11 1f       	adc	r17, r17
    36ba:	00 0f       	add	r16, r16
    36bc:	11 1f       	adc	r17, r17
    36be:	0a 56       	subi	r16, 0x6A	; 106
    36c0:	1f 4f       	sbci	r17, 0xFF	; 255
   #else
	  bat_voltage = ((unsigned long)bat_adc*BAT_NUMERATOR)/BAT_DENOMINATOR + BAT_OUT;
   #endif
  #endif
  #if FLASHEND > 0x1fff
          DC_Pwr_mode = 0;
    36c2:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <DC_Pwr_mode>
   #ifdef DC_PWR
          if ((bat_voltage < 900) || (bat_voltage > DC_PWR))
   #else
          if (bat_voltage < 900) 
    36c6:	04 38       	cpi	r16, 0x84	; 132
    36c8:	83 e0       	ldi	r24, 0x03	; 3
    36ca:	18 07       	cpc	r17, r24
    36cc:	70 f4       	brcc	.+28     	; 0x36ea <Battery_check+0x4c>
   #endif
          {
             // no battery present, don't check,
	     lcd_MEM_string(DC_Pwr_Mode_str);	// "DC Pwr Mode"
    36ce:	8f e9       	ldi	r24, 0x9F	; 159
    36d0:	91 e0       	ldi	r25, 0x01	; 1
    36d2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
             lcd_clear_line();			// clear to end of line
    36d6:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
             DC_Pwr_mode = 1;
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <DC_Pwr_mode>
     lcd_MEM_string(BatWeak);		//Battery weak
  } else { // Battery-voltage OK
     lcd_MEM_string(OK_str); 		// "OK"
  }
  lcd_clear_line();			// clear to end of line
};
    36e0:	df 91       	pop	r29
    36e2:	cf 91       	pop	r28
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	08 95       	ret
         lcd_MEM_string(Bat_str);		//output: "Bat. "
    36ea:	8e ea       	ldi	r24, 0xAE	; 174
    36ec:	91 e0       	ldi	r25, 0x01	; 1
    36ee:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
	 Display_mV(bat_voltage,2);		// Display 2 Digits of this 10mV units
    36f2:	62 e0       	ldi	r22, 0x02	; 2
    36f4:	c8 01       	movw	r24, r16
    36f6:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
         lcd_space();
    36fa:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
  if (bat_adc <  WARN_LEVEL) {
    36fe:	ca 3f       	cpi	r28, 0xFA	; 250
    3700:	86 e0       	ldi	r24, 0x06	; 6
    3702:	d8 07       	cpc	r29, r24
    3704:	b0 f4       	brcc	.+44     	; 0x3732 <Battery_check+0x94>
     if(bat_adc < POOR_LEVEL) {	
    3706:	c3 33       	cpi	r28, 0x33	; 51
    3708:	d6 40       	sbci	r29, 0x06	; 6
    370a:	60 f4       	brcc	.+24     	; 0x3724 <Battery_check+0x86>
	lcd_MEM_string(BatEmpty);	//Battery empty!
    370c:	88 ea       	ldi	r24, 0xA8	; 168
    370e:	92 e0       	ldi	r25, 0x02	; 2
    3710:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
        lcd_clear_line();			// clear to end of line
    3714:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
	wait_about5s();			// Let time to read the "empty" message
    3718:	8d ec       	ldi	r24, 0xCD	; 205
    371a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
        switch_tester_off();		// switch power off
    371e:	0e 94 ad 10 	call	0x215a	; 0x215a <switch_tester_off>
	return;
    3722:	de cf       	rjmp	.-68     	; 0x36e0 <Battery_check+0x42>
     lcd_MEM_string(BatWeak);		//Battery weak
    3724:	8f ea       	ldi	r24, 0xAF	; 175
    3726:	92 e0       	ldi	r25, 0x02	; 2
     lcd_MEM_string(OK_str); 		// "OK"
    3728:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  lcd_clear_line();			// clear to end of line
    372c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
    3730:	d7 cf       	rjmp	.-82     	; 0x36e0 <Battery_check+0x42>
     lcd_MEM_string(OK_str); 		// "OK"
    3732:	8b ea       	ldi	r24, 0xAB	; 171
    3734:	91 e0       	ldi	r25, 0x01	; 1
    3736:	f8 cf       	rjmp	.-16     	; 0x3728 <Battery_check+0x8a>

00003738 <expand_FET_quadratic>:

#ifdef FET_Idss
uint16_t expand_FET_quadratic(uint16_t v0, uint16_t v1, uint16_t ii)
// assuming a datapoint of Vgs=v1, Id=ii, tries to calculate Idss (i.e., Id at Vgs=0)
// v0 must be the Vgs at which Id=0
{
    3738:	fc 01       	movw	r30, r24
   // Quadratic current curve can be calculated by:
   //  v1 = v0 - v1;
   //  return (uint32_t)((uint16_t)((uint32_t)(ii * v0) / v1) * v0) / v1;
   // But this simpler code need 100 bytes more flash than the following code!
   uint8_t drv, dri;	// needed for rounding
   v1 = v0 - v1;
    373a:	9c 01       	movw	r18, r24
    373c:	26 1b       	sub	r18, r22
    373e:	37 0b       	sbc	r19, r23
    3740:	ca 01       	movw	r24, r20
   drv = 0;
   dri = 0;
    3742:	70 e0       	ldi	r23, 0x00	; 0
   drv = 0;
    3744:	60 e0       	ldi	r22, 0x00	; 0
   for (;;) {
      uint8_t dv, di;
      dv = (v1 + drv) >> 8;
    3746:	a9 01       	movw	r20, r18
    3748:	46 0f       	add	r20, r22
    374a:	51 1d       	adc	r21, r1
    374c:	45 2f       	mov	r20, r21
    374e:	55 27       	eor	r21, r21
      drv = (v1 + drv) & 0xff;		// remainder of voltage division by 256
    3750:	62 0f       	add	r22, r18
//      if (dv == 0) dv = 1;		// prevent infinite loop
      v1 += dv;      // increase v by 0.4 %;  unfortunately the compiler doesn't do this very smartly, insists on creating a 16-bit temporary variable for d
    3752:	24 0f       	add	r18, r20
    3754:	35 1f       	adc	r19, r21
      di = (ii + dri) >> 8;
    3756:	ac 01       	movw	r20, r24
    3758:	47 0f       	add	r20, r23
    375a:	51 1d       	adc	r21, r1
    375c:	45 2f       	mov	r20, r21
    375e:	55 27       	eor	r21, r21
      dri = (ii + dri) & 0xff;		// remainder of current division by 256
    3760:	78 0f       	add	r23, r24
      ii += di;     
      ii += di;      // increase ii by 0.8 %
    3762:	da 01       	movw	r26, r20
    3764:	aa 0f       	add	r26, r26
    3766:	bb 1f       	adc	r27, r27
    3768:	8a 0f       	add	r24, r26
    376a:	9b 1f       	adc	r25, r27
      if (di > (60000>>8)) {
    376c:	4b 3e       	cpi	r20, 0xEB	; 235
    376e:	20 f4       	brcc	.+8      	; 0x3778 <expand_FET_quadratic+0x40>
         return 0;       
      }
         // no Idss measurement if Idss exceeds 40 mA, the ATmega's maximum pin current
         // note that this is actually quite safe, since by the time there's 40 mA running, the Vgs will be 40mA * 20 ohm = 0.8 V, so quite far from 0, so Id will be less than those 40 mA
      if (v1 > v0) return ii;      // V exceeds Vp, so we've reached Vgs=0 without Id exceeding 40 mA, so we can safely do the Idss measurement
    3770:	e2 17       	cp	r30, r18
    3772:	f3 07       	cpc	r31, r19
    3774:	40 f7       	brcc	.-48     	; 0x3746 <expand_FET_quadratic+0xe>
    3776:	08 95       	ret
         return 0;       
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	80 e0       	ldi	r24, 0x00	; 0
   }
}
    377c:	08 95       	ret

0000377e <CheckPins>:
#endif

//******************************************************************
void CheckPins(uint8_t HighPin, uint8_t LowPin, uint8_t TristatePin)
  {
    377e:	a0 e2       	ldi	r26, 0x20	; 32
    3780:	b0 e0       	ldi	r27, 0x00	; 0
    3782:	e5 ec       	ldi	r30, 0xC5	; 197
    3784:	fb e1       	ldi	r31, 0x1B	; 27
    3786:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>
    378a:	8f 8f       	std	Y+31, r24	; 0x1f
    378c:	16 2f       	mov	r17, r22
    378e:	4d 83       	std	Y+5, r20	; 0x05
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    3790:	a8 95       	wdr
  addr = &PinRLRHADCtab[LowPin-TP_MIN];		// Address of combined RL / RH / ADC pin table
    3792:	e6 2f       	mov	r30, r22
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	ef 5b       	subi	r30, 0xBF	; 191
    3798:	fd 4f       	sbci	r31, 0xFD	; 253
  LoPinRL = pgm_read_byte(addr);		// instruction for LowPin R_L
    379a:	c4 90       	lpm	r12, Z
    379c:	cc 86       	std	Y+12, r12	; 0x0c
#if FLASHEND > 0x1fff
 #if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  addr += 3;			// address of PinRHtab[LowPin]
  LoPinRH = pgm_read_byte(addr);		// instruction for LowPin R_H
 #else
  LoPinRH = LoPinRL + LoPinRL;				// instruction for LowPin R_H
    379e:	cc 0c       	add	r12, r12
    37a0:	cc 8e       	std	Y+28, r12	; 0x1c
 #endif
  addr += 3;			// address of PinADCtab[LowPin]
    37a2:	33 96       	adiw	r30, 0x03	; 3
  addr += 6;			// address of PinADCtab[LowPin]
 #else
  addr += 3;			// address of PinADCtab[LowPin], table PinRHtab is missing
 #endif
#endif
  LoADCp = pgm_read_byte(addr);		// instruction for ADC Low-Pin, including | TXD_VAL
    37a4:	34 90       	lpm	r3, Z

  addr = &PinRLRHADCtab[TristatePin-TP_MIN];
    37a6:	e4 2f       	mov	r30, r20
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	ef 5b       	subi	r30, 0xBF	; 191
    37ac:	fd 4f       	sbci	r31, 0xFD	; 253
  TriPinRL = pgm_read_byte(addr);	// instruction for TristatePin R_L
    37ae:	04 91       	lpm	r16, Z
  TriPinRH = pgm_read_byte(addr);	// instruction for TristatePin R_H
#else
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
#endif
#ifdef SHOW_R_DS
  addr += 3;			// address of PinADCtab[TristatePin]
    37b0:	33 96       	adiw	r30, 0x03	; 3
  TriADCp = pgm_read_byte(addr);	// instruction for ADC Tristate-Pin, including | TXD_VAL
    37b2:	b4 90       	lpm	r11, Z
#endif

  addr = &PinRLRHADCtab[HighPin-TP_MIN];
    37b4:	e8 2f       	mov	r30, r24
    37b6:	f0 e0       	ldi	r31, 0x00	; 0
    37b8:	ef 5b       	subi	r30, 0xBF	; 191
    37ba:	fd 4f       	sbci	r31, 0xFD	; 253
  HiPinRL = pgm_read_byte(addr);		// instruction for HighPin R_L
    37bc:	24 90       	lpm	r2, Z
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  addr += 3;			// address of PinRHtab[HighPin]
  HiPinRH = pgm_read_byte(addr);		// instruction for HighPin R_H
#else
  HiPinRH = HiPinRL + HiPinRL;				// instruction for HighPin R_H
    37be:	d2 2c       	mov	r13, r2
    37c0:	dd 0c       	add	r13, r13
    37c2:	d8 8e       	std	Y+24, r13	; 0x18
#endif
  addr += 3;			// address of PinADCtab[HighPin]
    37c4:	33 96       	adiw	r30, 0x03	; 3
  HiADCp = pgm_read_byte(addr);		// instruction for ADC High-Pin, including | TXD_VAL 
    37c6:	e4 90       	lpm	r14, Z
    37c8:	e8 a2       	std	Y+32, r14	; 0x20
  }
#else
  // first try the common emitter circuit for P-Channel type
     uint16_t v_change_n;
     uint16_t v_change_p;
  R_PORT = TriPinRL;			//resistor-Port TriState to 1
    37ca:	05 b9       	out	0x05, r16	; 5
  R_DDR = LoPinRL | TriPinRL;		// resistor-Port Low-Pin to 0
    37cc:	fc 84       	ldd	r15, Y+12	; 0x0c
    37ce:	f0 2a       	or	r15, r16
    37d0:	fc 8a       	std	Y+20, r15	; 0x14
    37d2:	f4 b8       	out	0x04, r15	; 4
  ADC_DDR = HiADCm;		//High-Pin to output
    37d4:	e7 b8       	out	0x07, r14	; 7
  ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    37d6:	e8 b8       	out	0x08, r14	; 8
  //for some MOSFET the gate (TristatePin) must be discharged
  adc.vCEs = W5msReadADC(LowPin);	// lp1 is the voltage at 680 Ohm with + Gate
    37d8:	86 2f       	mov	r24, r22
    37da:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    37de:	8a 8b       	std	Y+18, r24	; 0x12
    37e0:	9b 8b       	std	Y+19, r25	; 0x13
 #ifdef WITH_PUT
  R_PORT = TriPinRL | TriPinRH;
  R_DDR = LoPinRL | TriPinRH;           
  adc.lp_otrh = W5msReadADC(LowPin);	//read voltage of Low-Pin  , with tri-state ping to plus via RH; prevents accidental triggering of PUT
 #endif
  R_DDR = LoPinRL;		// resistor-Port Low-Pin to 0
    37e2:	cc 84       	ldd	r12, Y+12	; 0x0c
    37e4:	c4 b8       	out	0x04, r12	; 4
  adc.lp_otr = W5msReadADC(LowPin);	//read voltage of Low-Pin  , without Gate current (+)
    37e6:	81 2f       	mov	r24, r17
    37e8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    37ec:	3c 01       	movw	r6, r24
  R_DDR = 0;
    37ee:	14 b8       	out	0x04, r1	; 4
  wait10ms();	 			// release all current (clear TRIAC and Thyristor)
    37f0:	0e 94 9d 07 	call	0xf3a	; 0xf3a <wait10ms>
  R_PORT = 0;
    37f4:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL | TriPinRL;		// start current again
    37f6:	f4 b8       	out	0x04, r15	; 4
  adc.lp2 = W5msReadADC(LowPin);	// lp2 is the voltage at 680 Ohm with - Gate
    37f8:	81 2f       	mov	r24, r17
    37fa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
  v_change_p = abs_diff(adc.lp2, adc.vCEs);
    37fe:	6a 89       	ldd	r22, Y+18	; 0x12
    3800:	7b 89       	ldd	r23, Y+19	; 0x13
    3802:	0e 94 4b 08 	call	0x1096	; 0x1096 <abs_diff>
    3806:	7c 01       	movw	r14, r24
     // switch to common emitter for NPN or N-channel FET
     ADC_DDR = LoADCm;		//Low-Pin to output
    3808:	37 b8       	out	0x07, r3	; 7
     ADC_PORT = TXD_VAL;		//Low-Pin fix to GND
    380a:	18 b8       	out	0x08, r1	; 8
     R_PORT = HiPinRL | TriPinRL;
    380c:	40 2e       	mov	r4, r16
    380e:	42 28       	or	r4, r2
    3810:	45 b8       	out	0x05, r4	; 5
     R_DDR = HiPinRL | TriPinRL;	// resistor-Port High-Pin and TriState-Pin to 1
    3812:	44 b8       	out	0x04, r4	; 4
     adc.hp1 = vcc_diff(W5msReadADC(HighPin));		// voltage at 680 Ohm with + Gate
    3814:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3816:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    381a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    381e:	58 2e       	mov	r5, r24
    3820:	89 2e       	mov	r8, r25
     R_PORT = 0;			// clear Thyristor
    3822:	15 b8       	out	0x05, r1	; 5
     wait10ms();				// release all current (clear TRIAC and Thyristor)
    3824:	0e 94 9d 07 	call	0xf3a	; 0xf3a <wait10ms>
     R_PORT = HiPinRL;			//resistor-Port High-Pin to +, TriState to 0
    3828:	25 b8       	out	0x05, r2	; 5
     adc.hp2 = vcc_diff(W5msReadADC(HighPin));	// voltage at 680 Ohm with - Gate
    382a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    382c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    3830:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3834:	6c 01       	movw	r12, r24
     R_DDR = HiPinRL;			// resistor-Port High-Pin to 1, TriState open
    3836:	24 b8       	out	0x04, r2	; 4
     adc.hp3 = vcc_diff(W5msReadADC(HighPin)); // voltage at 680 Ohm with open Gate
    3838:	8f 8d       	ldd	r24, Y+31	; 0x1f
    383a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    383e:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3842:	98 2e       	mov	r9, r24
    3844:	a9 2e       	mov	r10, r25
     v_change_n = abs_diff(adc.hp1, adc.hp2);
    3846:	b6 01       	movw	r22, r12
    3848:	85 2d       	mov	r24, r5
    384a:	98 2d       	mov	r25, r8
    384c:	0e 94 4b 08 	call	0x1096	; 0x1096 <abs_diff>
    3850:	9c 01       	movw	r18, r24
  } else {
     // if ((adc.vCEs+288) > adc.lp2) goto checkDiode;	// no significant change
     if (abs_diff(adc.lp2, adc.vCEs) < 288) goto checkDiode;    // no significant change
  }
#endif
  if ((v_change_n < 288)  && (v_change_p < 288)) goto checkDiode; // no significant change
    3852:	80 32       	cpi	r24, 0x20	; 32
    3854:	91 40       	sbci	r25, 0x01	; 1
    3856:	30 f4       	brcc	.+12     	; 0x3864 <CheckPins+0xe6>
    3858:	80 e2       	ldi	r24, 0x20	; 32
    385a:	e8 16       	cp	r14, r24
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	f8 06       	cpc	r15, r24
    3860:	08 f4       	brcc	.+2      	; 0x3864 <CheckPins+0xe6>
    3862:	c9 c5       	rjmp	.+2962   	; 0x43f6 <CheckPins+0xc78>
//  if ((v_change_n+150) > (v_change_p + adc.hp3))
  if ((adc.hp2 + v_change_p) < (adc.vCEs + v_change_n))
    3864:	ec 0c       	add	r14, r12
    3866:	fd 1c       	adc	r15, r13
    3868:	aa 89       	ldd	r26, Y+18	; 0x12
    386a:	bb 89       	ldd	r27, Y+19	; 0x13
    386c:	2a 0f       	add	r18, r26
    386e:	3b 1f       	adc	r19, r27
    3870:	e2 16       	cp	r14, r18
    3872:	f3 06       	cpc	r15, r19
    3874:	20 f4       	brcc	.+8      	; 0x387e <CheckPins+0x100>
  {
 #if DebugOut == 5
     lcd_data('c');
     lcd_data('N');
 #endif
     adc.vCEs = adc.hp2;	// voltage at + 680 Ohm with - Gate
    3876:	db 8a       	std	Y+19, r13	; 0x13
    3878:	ca 8a       	std	Y+18, r12	; 0x12
     adc.lp_otr = adc.hp3;	// voltage at + 680 Ohm with open Gate
    387a:	69 2c       	mov	r6, r9
    387c:	7a 2c       	mov	r7, r10
  // a TRIAC is marked as two transistors at least (2 or 3)
  // both of NPN transistors (normal and inverse) are found, if ntrans.count == 2
  // both of PNP transistors (normal and inverse) are found, if ptrans.count == 2
  // If Transistor with protection diode is checked, all results are found,
  // if ntrans.count == 1 and ptrans.count == 1
  if ((ntrans.count + ptrans.count) > 1) {
    387e:	20 91 73 01 	lds	r18, 0x0173	; 0x800173 <ntrans+0xf>
    3882:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    3886:	82 0f       	add	r24, r18
    3888:	99 27       	eor	r25, r25
    388a:	99 1f       	adc	r25, r25
    388c:	02 97       	sbiw	r24, 0x02	; 2
    388e:	4c f0       	brlt	.+18     	; 0x38a2 <CheckPins+0x124>
     // all transistors found, no more search is needed
     // but TRIAC can be detected as NPNp with same pins as PNPn
     if (!((ntrans.count == 1) && (ntrans.b == ptrans.b))) {
    3890:	21 30       	cpi	r18, 0x01	; 1
    3892:	09 f0       	breq	.+2      	; 0x3896 <CheckPins+0x118>
    3894:	b0 c5       	rjmp	.+2912   	; 0x43f6 <CheckPins+0xc78>
    3896:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <ntrans+0xc>
    389a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <ptrans+0xc>
    389e:	98 13       	cpse	r25, r24
    38a0:	aa c5       	rjmp	.+2900   	; 0x43f6 <CheckPins+0xc78>
  TriPinRH = TriPinRL + TriPinRL;			// instruction for TristatePin R_H
    38a2:	d0 2e       	mov	r13, r16
    38a4:	dd 0c       	add	r13, r13
     //If it is a self-conducting MOSFET or JFET, then must be: adc.lp2 > adc.lp1 
     if(adc.lp2>(adc.lp1+599)) {
        //measure voltage at the  Gate, differ between MOSFET and JFET
        ADC_PORT = TXD_VAL;
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    38a6:	5d 2c       	mov	r5, r13
    38a8:	52 28       	or	r5, r2
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    38aa:	cc 84       	ldd	r12, Y+12	; 0x0c
    38ac:	cd 28       	or	r12, r13
    38ae:	c9 8e       	std	Y+25, r12	; 0x19
  if((adc.vCEs > 115)  && ((adc.vCEs+adc.vCEs+20) > adc.lp_otr))
    38b0:	2a 89       	ldd	r18, Y+18	; 0x12
    38b2:	3b 89       	ldd	r19, Y+19	; 0x13
    38b4:	24 37       	cpi	r18, 0x74	; 116
    38b6:	31 05       	cpc	r19, r1
    38b8:	08 f4       	brcc	.+2      	; 0x38bc <CheckPins+0x13e>
    38ba:	ad c1       	rjmp	.+858    	; 0x3c16 <CheckPins+0x498>
    38bc:	c9 01       	movw	r24, r18
    38be:	0a 96       	adiw	r24, 0x0a	; 10
    38c0:	88 0f       	add	r24, r24
    38c2:	99 1f       	adc	r25, r25
    38c4:	68 16       	cp	r6, r24
    38c6:	79 06       	cpc	r7, r25
    38c8:	08 f0       	brcs	.+2      	; 0x38cc <CheckPins+0x14e>
    38ca:	a5 c1       	rjmp	.+842    	; 0x3c16 <CheckPins+0x498>
     ADC_DDR = HiADCm;		//High-Pin to output
    38cc:	c8 a0       	ldd	r12, Y+32	; 0x20
    38ce:	c7 b8       	out	0x07, r12	; 7
     ADC_PORT = HiADCp;		//High-Pin fix to Vcc
    38d0:	c8 b8       	out	0x08, r12	; 8
     R_DDR = LoPinRL | TriPinRH;	//switch R_H for Tristate-Pin (probably Gate) to GND
    38d2:	e9 8c       	ldd	r14, Y+25	; 0x19
    38d4:	e4 b8       	out	0x04, r14	; 4
     adc.lp1 = W10msReadADC(LowPin);	//measure voltage at the assumed Source 
    38d6:	81 2f       	mov	r24, r17
    38d8:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    38dc:	7c 01       	movw	r14, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    38de:	8d 81       	ldd	r24, Y+5	; 0x05
    38e0:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    38e4:	a8 2e       	mov	r10, r24
    38e6:	c9 2e       	mov	r12, r25
     R_PORT = TriPinRH;			//switch R_H for Tristate-Pin (probably Gate) to VCC
    38e8:	d5 b8       	out	0x05, r13	; 5
     adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the assumed Source again
    38ea:	81 2f       	mov	r24, r17
    38ec:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
     if(adc.lp2>(adc.lp1+599)) {
    38f0:	97 01       	movw	r18, r14
    38f2:	29 5a       	subi	r18, 0xA9	; 169
    38f4:	3d 4f       	sbci	r19, 0xFD	; 253
        ADC_PORT = TXD_VAL;
    38f6:	18 b8       	out	0x08, r1	; 8
        ADC_DDR = LoADCm;	//Low-Pin fix to GND
    38f8:	37 b8       	out	0x07, r3	; 7
        R_DDR = TriPinRH | HiPinRL;	//High-Pin to output
    38fa:	54 b8       	out	0x04, r5	; 4
        R_PORT = TriPinRH | HiPinRL;	//switch R_L for High-Pin to VCC
    38fc:	55 b8       	out	0x05, r5	; 5
     if(adc.lp2>(adc.lp1+599)) {
    38fe:	28 17       	cp	r18, r24
    3900:	39 07       	cpc	r19, r25
    3902:	08 f0       	brcs	.+2      	; 0x3906 <CheckPins+0x188>
    3904:	b8 c0       	rjmp	.+368    	; 0x3a76 <CheckPins+0x2f8>
        adc.lp2 = W10msReadADC(TristatePin); //read voltage of assumed Gate 
    3906:	8d 81       	ldd	r24, Y+5	; 0x05
    3908:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
#if DebugOut == 5
        lcd_data('N');
#endif
        if(adc.lp2>3911) {  //MOSFET
    390c:	88 34       	cpi	r24, 0x48	; 72
    390e:	9f 40       	sbci	r25, 0x0F	; 15
    3910:	08 f4       	brcc	.+2      	; 0x3914 <CheckPins+0x196>
    3912:	70 c0       	rjmp	.+224    	; 0x39f4 <CheckPins+0x276>
           PartFound = PART_FET;	//N-Kanal-MOSFET
    3914:	85 e0       	ldi	r24, 0x05	; 5
    3916:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
           PartMode = PART_MODE_MOS|N_CHANNEL|D_MODE; //Depletion-MOSFET
    391a:	82 e2       	ldi	r24, 0x22	; 34
#if DebugOut == 5
        lcd_data('D');
#endif
        } else {  //JFET (pn-passage between Gate and Source is conducting )
           PartFound = PART_FET;	//N-Kanal-JFET
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    391c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
#if DebugOut == 5
        lcd_space();
#endif
//      if ((PartReady == 0) || (adc.lp1 > ntrans.uBE)) 
//      there is no way to find out the right Source / Drain
        ntrans.uBE = adc.lp1;
    3920:	f0 92 69 01 	sts	0x0169, r15	; 0x800169 <ntrans+0x5>
    3924:	e0 92 68 01 	sts	0x0168, r14	; 0x800168 <ntrans+0x4>
        ntrans.gthvoltage = unsigned_diff(adc.lp1, adc.tp1);	//voltage GS (Source - Gate)
    3928:	6a 2d       	mov	r22, r10
    392a:	7c 2d       	mov	r23, r12
    392c:	c7 01       	movw	r24, r14
    392e:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3932:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ntrans+0xb>
    3936:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ntrans+0xa>
        ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Id 1uA
    393a:	97 01       	movw	r18, r14
    393c:	a0 e1       	ldi	r26, 0x10	; 16
    393e:	b7 e2       	ldi	r27, 0x27	; 39
    3940:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3944:	69 83       	std	Y+1, r22	; 0x01
    3946:	7a 83       	std	Y+2, r23	; 0x02
    3948:	8b 83       	std	Y+3, r24	; 0x03
    394a:	9c 83       	std	Y+4, r25	; 0x04
    394c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    3950:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    3954:	50 e0       	ldi	r21, 0x00	; 0
    3956:	40 e0       	ldi	r20, 0x00	; 0
    3958:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    395c:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <ntrans+0x7>
    3960:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <ntrans+0x6>
#ifdef SHOW_ICE
 // Test for cutoff Voltage, idea from Pieter-Tjerk
        R_DDR = LoPinRH | TriPinRH;
    3964:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3966:	8d 29       	or	r24, r13
    3968:	84 b9       	out	0x04, r24	; 4
	R_PORT = 0;			// Low + Tristate Pin with 470k to 0V
    396a:	15 b8       	out	0x05, r1	; 5
	ADC_DDR = HiADCm;
    396c:	c8 a0       	ldd	r12, Y+32	; 0x20
    396e:	c7 b8       	out	0x07, r12	; 7
	ADC_PORT = HiADCp;		// High Pin to VCC
    3970:	c8 b8       	out	0x08, r12	; 8
	ntrans.ice0 = unsigned_diff(W10msReadADC(LowPin), ReadADC(TristatePin)); // Gate-Source Voltage
    3972:	8d 81       	ldd	r24, Y+5	; 0x05
    3974:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3978:	f8 2e       	mov	r15, r24
    397a:	09 2f       	mov	r16, r25
    397c:	81 2f       	mov	r24, r17
    397e:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    3982:	6f 2d       	mov	r22, r15
    3984:	70 2f       	mov	r23, r16
    3986:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    398a:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <ntrans+0x8>
    398e:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <ntrans+0x9>
    lcd_line4();
    lcd_data('N');
    lcd_data('j');
    lcd_space();
  #endif
    if ((PartMode&0x0f) == PART_MODE_JFET)
    3992:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <PartMode>
    3996:	2f 70       	andi	r18, 0x0F	; 15
    3998:	24 30       	cpi	r18, 0x04	; 4
    399a:	89 f1       	breq	.+98     	; 0x39fe <CheckPins+0x280>
         {
            // For depletion MOSFET we try to put the Gate to the same level as Source.
            // The source level is higher than 0V because of the Port output resistance and current.
            // When the Drain-Source resistance is low, we can get nearly the same voltage increase
            // at the Gate with current from the 680 Ohm Port (RL).
            ADC_PORT = TXD_VAL;
    399c:	18 b8       	out	0x08, r1	; 8
            ADC_DDR = LoADCm | TriADCp;	//Low-Pin and Tristate-Pin fix to GND
    399e:	b3 28       	or	r11, r3
    39a0:	b7 b8       	out	0x07, r11	; 7
//            R_DDR = TriPinRL | HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
            R_DDR =  HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
    39a2:	24 b8       	out	0x04, r2	; 4
            R_PORT = TriPinRL | HiPinRL;	//switch R_L for High-Pin and Tristate-Pin to VCC
    39a4:	45 b8       	out	0x05, r4	; 5
            adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the Drain  
    39a6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39a8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    39ac:	08 2f       	mov	r16, r24
    39ae:	99 83       	std	Y+1, r25	; 0x01
            adc.rhp = vcc_diff(adc.hp2);	// voltage at the Drain resistor
    39b0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    39b4:	7c 01       	movw	r14, r24
            adc.lp2 = ReadADC(LowPin);		// voltage at the Source 
    39b6:	81 2f       	mov	r24, r17
    39b8:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    39bc:	bc 01       	movw	r22, r24
            ntrans.uBE = RR680PL * (unsigned long)unsigned_diff(adc.hp2, adc.lp2) / adc.rhp; // DS resistance in 0.1 OHm
    39be:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <resis680pl>
    39c2:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <resis680pl+0x1>
    39c6:	80 2f       	mov	r24, r16
    39c8:	99 81       	ldd	r25, Y+1	; 0x01
    39ca:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    39ce:	96 01       	movw	r18, r12
    39d0:	dc 01       	movw	r26, r24
    39d2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    39d6:	97 01       	movw	r18, r14
    39d8:	50 e0       	ldi	r21, 0x00	; 0
    39da:	40 e0       	ldi	r20, 0x00	; 0
    39dc:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    39e0:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ntrans+0x5>
    39e4:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ntrans+0x4>
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
            tmp16 += ADCW;		// add result of ADC
         }
         tmp16 *= 4;	//is equal to 44 * ADCW
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
         ntrans.count++;		// count FET as two to accelerate  searching
    39e8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    39ec:	8f 5f       	subi	r24, 0xFF	; 255
    39ee:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ntrans+0xf>
         goto saveNresult;
    39f2:	8c c3       	rjmp	.+1816   	; 0x410c <CheckPins+0x98e>
           PartFound = PART_FET;	//N-Kanal-JFET
    39f4:	85 e0       	ldi	r24, 0x05	; 5
    39f6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
           PartMode = PART_MODE_JFET|N_CHANNEL|D_MODE;
    39fa:	84 e2       	ldi	r24, 0x24	; 36
    39fc:	8f cf       	rjmp	.-226    	; 0x391c <CheckPins+0x19e>
           i16 = expand_FET_quadratic(ntrans.ice0,ntrans.gthvoltage,ntrans.current);
    39fe:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <ntrans+0x6>
    3a02:	50 91 6b 01 	lds	r21, 0x016B	; 0x80016b <ntrans+0x7>
    3a06:	60 91 6e 01 	lds	r22, 0x016E	; 0x80016e <ntrans+0xa>
    3a0a:	70 91 6f 01 	lds	r23, 0x016F	; 0x80016f <ntrans+0xb>
    3a0e:	94 de       	rcall	.-728    	; 0x3738 <expand_FET_quadratic>
    3a10:	9c 01       	movw	r18, r24
           if (i16 != 0) {
    3a12:	89 2b       	or	r24, r25
    3a14:	29 f1       	breq	.+74     	; 0x3a60 <CheckPins+0x2e2>
               R_DDR = TriPinRH;	// gate to ground via RH
    3a16:	d4 b8       	out	0x04, r13	; 4
               ADC_DDR = HiADCm|LoADCp;
    3a18:	d8 a0       	ldd	r13, Y+32	; 0x20
    3a1a:	d3 28       	or	r13, r3
    3a1c:	d7 b8       	out	0x07, r13	; 7
               adc.lp2 = W10msReadADC(LowPin);	//measure voltage at the Source; this is the voltage drop across the pin's ~20 ohm internal resistance!
    3a1e:	81 2f       	mov	r24, r17
    3a20:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    3a24:	08 2f       	mov	r16, r24
    3a26:	9e 83       	std	Y+6, r25	; 0x06
               ADC_DDR = TXD_MSK;             // disconnect drain and source immediately after measurement, since quite a lot of current may flow
    3a28:	17 b8       	out	0x07, r1	; 7
               i16 = (unsigned int)(((unsigned long)adc.lp2 * 10000) / RRpinMI); // Idss 1uA
    3a2a:	28 2f       	mov	r18, r24
    3a2c:	3e 81       	ldd	r19, Y+6	; 0x06
    3a2e:	a0 e1       	ldi	r26, 0x10	; 16
    3a30:	b7 e2       	ldi	r27, 0x27	; 39
    3a32:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3a36:	69 83       	std	Y+1, r22	; 0x01
    3a38:	7a 83       	std	Y+2, r23	; 0x02
    3a3a:	8b 83       	std	Y+3, r24	; 0x03
    3a3c:	9c 83       	std	Y+4, r25	; 0x04
    3a3e:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <pin_rmi>
    3a42:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <pin_rmi+0x1>
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	40 e0       	ldi	r20, 0x00	; 0
    3a4a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
               i16 = expand_FET_quadratic(ntrans.ice0,adc.lp2,i16);
    3a4e:	a9 01       	movw	r20, r18
    3a50:	60 2f       	mov	r22, r16
    3a52:	7e 81       	ldd	r23, Y+6	; 0x06
    3a54:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <ntrans+0x8>
    3a58:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <ntrans+0x9>
    3a5c:	6d de       	rcall	.-806    	; 0x3738 <expand_FET_quadratic>
    3a5e:	9c 01       	movw	r18, r24
           ntrans.uBE = i16;
    3a60:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ntrans+0x5>
    3a64:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ntrans+0x4>
    if ((PartMode&0x0f) != PART_MODE_JFET)
    3a68:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    3a6c:	8f 70       	andi	r24, 0x0F	; 15
    3a6e:	84 30       	cpi	r24, 0x04	; 4
    3a70:	09 f4       	brne	.+2      	; 0x3a74 <CheckPins+0x2f6>
    3a72:	ba cf       	rjmp	.-140    	; 0x39e8 <CheckPins+0x26a>
    3a74:	93 cf       	rjmp	.-218    	; 0x399c <CheckPins+0x21e>
     adc.hp1 = W10msReadADC(HighPin);	//measure voltage at assumed Source 
    3a76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a78:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    3a7c:	7c 01       	movw	r14, r24
     adc.tp1 = ReadADC(TristatePin);	// measure Gate voltage
    3a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a80:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3a84:	a8 2e       	mov	r10, r24
    3a86:	c9 2e       	mov	r12, r25
     R_PORT = HiPinRL;			//switch R_H for Tristate-Pin (assumed Gate) to GND
    3a88:	25 b8       	out	0x05, r2	; 5
     adc.hp2 = W10msReadADC(HighPin);	//read voltage at assumed Source again
    3a8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a8c:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
     if(adc.hp1>(adc.hp2+599)) {
    3a90:	89 5a       	subi	r24, 0xA9	; 169
    3a92:	9d 4f       	sbci	r25, 0xFD	; 253
    3a94:	8e 15       	cp	r24, r14
    3a96:	9f 05       	cpc	r25, r15
    3a98:	08 f0       	brcs	.+2      	; 0x3a9c <CheckPins+0x31e>
    3a9a:	ad c4       	rjmp	.+2394   	; 0x43f6 <CheckPins+0xc78>
        ADC_PORT = HiADCp;	//switch High-Pin directly to VCC
    3a9c:	28 a1       	ldd	r18, Y+32	; 0x20
    3a9e:	28 b9       	out	0x08, r18	; 8
        ADC_DDR = HiADCm;	//switch High-Pin to output
    3aa0:	27 b9       	out	0x07, r18	; 7
        adc.tp2 = W10msReadADC(TristatePin); //read voltage at the assumed Gate 
    3aa2:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa4:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
        if(adc.tp2<977) { 		//MOSFET
    3aa8:	81 3d       	cpi	r24, 0xD1	; 209
    3aaa:	93 40       	sbci	r25, 0x03	; 3
    3aac:	08 f0       	brcs	.+2      	; 0x3ab0 <CheckPins+0x332>
    3aae:	6d c0       	rjmp	.+218    	; 0x3b8a <CheckPins+0x40c>
           PartFound = PART_FET;	//P-Kanal-MOSFET
    3ab0:	85 e0       	ldi	r24, 0x05	; 5
    3ab2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
           PartMode = PART_MODE_MOS|P_CHANNEL|D_MODE; //Depletion-MOSFET
    3ab6:	82 e3       	ldi	r24, 0x32	; 50
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    3ab8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
        ptrans.gthvoltage = unsigned_diff(adc.tp1, adc.hp1);	//voltage GS (Gate - Source)
    3abc:	b7 01       	movw	r22, r14
    3abe:	8a 2d       	mov	r24, r10
    3ac0:	9c 2d       	mov	r25, r12
    3ac2:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3ac6:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <ptrans+0xb>
    3aca:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <ptrans+0xa>
        ptrans.current = (unsigned int)(((unsigned long)vcc_diff(adc.hp1) * 10000) / RR680PL); // Id 1uA
    3ace:	c7 01       	movw	r24, r14
    3ad0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3ad4:	9c 01       	movw	r18, r24
    3ad6:	a0 e1       	ldi	r26, 0x10	; 16
    3ad8:	b7 e2       	ldi	r27, 0x27	; 39
    3ada:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3ade:	69 83       	std	Y+1, r22	; 0x01
    3ae0:	7a 83       	std	Y+2, r23	; 0x02
    3ae2:	8b 83       	std	Y+3, r24	; 0x03
    3ae4:	9c 83       	std	Y+4, r25	; 0x04
    3ae6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    3aea:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	40 e0       	ldi	r20, 0x00	; 0
    3af2:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3af6:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <ptrans+0x7>
    3afa:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <ptrans+0x6>
        ADC_PORT = TXD_VAL;		// direct outputs to GND
    3afe:	18 b8       	out	0x08, r1	; 8
        ADC_DDR = LoADCm;		//switch Low-Pin (assumed Drain) direct to GND,
    3b00:	37 b8       	out	0x07, r3	; 7
        R_DDR = TriPinRH | HiPinRH;	//High-Pin to output
    3b02:	88 8d       	ldd	r24, Y+24	; 0x18
    3b04:	8d 29       	or	r24, r13
    3b06:	84 b9       	out	0x04, r24	; 4
        R_PORT = TriPinRH | HiPinRH;	//High-Pin and Tristate-Pin across R_H to Vcc
    3b08:	85 b9       	out	0x05, r24	; 5
        ptrans.ice0 = unsigned_diff(W10msReadADC(TristatePin), ReadADC(HighPin));	//measure voltage at assumed Source 
    3b0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b0c:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3b10:	f8 2e       	mov	r15, r24
    3b12:	09 2f       	mov	r16, r25
    3b14:	8d 81       	ldd	r24, Y+5	; 0x05
    3b16:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    3b1a:	6f 2d       	mov	r22, r15
    3b1c:	70 2f       	mov	r23, r16
    3b1e:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3b22:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <ptrans+0x8>
    3b26:	90 93 7d 01 	sts	0x017D, r25	; 0x80017d <ptrans+0x9>
        if ((PartMode&0x0f) == PART_MODE_JFET) 
    3b2a:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <PartMode>
    3b2e:	2f 70       	andi	r18, 0x0F	; 15
    3b30:	24 30       	cpi	r18, 0x04	; 4
    3b32:	81 f1       	breq	.+96     	; 0x3b94 <CheckPins+0x416>
            ADC_PORT = HiADCp | TriADCp;	//switch High-Pin and Tristate-Pin to VCC
    3b34:	c8 a0       	ldd	r12, Y+32	; 0x20
    3b36:	cb 28       	or	r12, r11
    3b38:	c8 b8       	out	0x08, r12	; 8
            ADC_DDR = HiADCm | TriADCp;		//switch High-Pin and Tristate-Pin to output
    3b3a:	c7 b8       	out	0x07, r12	; 7
            R_PORT = 0;			// switch R-Ports to 0
    3b3c:	15 b8       	out	0x05, r1	; 5
            R_DDR = TriPinRL | HiPinRL;	// L-Resistor High-Pin and Tristate-Pin to output
    3b3e:	44 b8       	out	0x04, r4	; 4
            adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the Source  
    3b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b42:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    3b46:	08 2f       	mov	r16, r24
    3b48:	99 83       	std	Y+1, r25	; 0x01
            adc.lp1 = ReadADC(LowPin);		// voltage at the Drain 
    3b4a:	81 2f       	mov	r24, r17
    3b4c:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3b50:	7c 01       	movw	r14, r24
            ptrans.uBE = RR680MI * (unsigned long)unsigned_diff(adc.hp2, adc.lp1) / adc.lp1; // DS resistance in 0.1 OHm
    3b52:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <resis680mi>
    3b56:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <resis680mi+0x1>
    3b5a:	bc 01       	movw	r22, r24
    3b5c:	80 2f       	mov	r24, r16
    3b5e:	99 81       	ldd	r25, Y+1	; 0x01
    3b60:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3b64:	96 01       	movw	r18, r12
    3b66:	dc 01       	movw	r26, r24
    3b68:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3b6c:	97 01       	movw	r18, r14
    3b6e:	50 e0       	ldi	r21, 0x00	; 0
    3b70:	40 e0       	ldi	r20, 0x00	; 0
    3b72:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3b76:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <ptrans+0x5>
    3b7a:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <ptrans+0x4>
           ptrans.count++;		// count FET as two for accelerate searching
    3b7e:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    3b82:	8f 5f       	subi	r24, 0xFF	; 255
    3b84:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <ptrans+0xf>
           goto savePresult;
    3b88:	56 c1       	rjmp	.+684    	; 0x3e36 <CheckPins+0x6b8>
           PartFound = PART_FET;	//P-Kanal-JFET
    3b8a:	85 e0       	ldi	r24, 0x05	; 5
    3b8c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
           PartMode = PART_MODE_JFET|P_CHANNEL|D_MODE;
    3b90:	84 e3       	ldi	r24, 0x34	; 52
    3b92:	92 cf       	rjmp	.-220    	; 0x3ab8 <CheckPins+0x33a>
           i16 = expand_FET_quadratic(ptrans.ice0,ptrans.gthvoltage,ptrans.current);
    3b94:	40 91 7a 01 	lds	r20, 0x017A	; 0x80017a <ptrans+0x6>
    3b98:	50 91 7b 01 	lds	r21, 0x017B	; 0x80017b <ptrans+0x7>
    3b9c:	60 91 7e 01 	lds	r22, 0x017E	; 0x80017e <ptrans+0xa>
    3ba0:	70 91 7f 01 	lds	r23, 0x017F	; 0x80017f <ptrans+0xb>
    3ba4:	c9 dd       	rcall	.-1134   	; 0x3738 <expand_FET_quadratic>
    3ba6:	9c 01       	movw	r18, r24
           if (i16 != 0) {
    3ba8:	89 2b       	or	r24, r25
    3baa:	51 f1       	breq	.+84     	; 0x3c00 <CheckPins+0x482>
               R_PORT = TriPinRH; 
    3bac:	d5 b8       	out	0x05, r13	; 5
               R_DDR = TriPinRH;	// gate to VCC via RH
    3bae:	d4 b8       	out	0x04, r13	; 4
               ADC_PORT = HiADCp;       // drain to GND, source to VCC, both without resistors
    3bb0:	d8 a0       	ldd	r13, Y+32	; 0x20
    3bb2:	d8 b8       	out	0x08, r13	; 8
               ADC_DDR = HiADCm|LoADCm;
    3bb4:	ed 2d       	mov	r30, r13
    3bb6:	e3 29       	or	r30, r3
    3bb8:	e7 b9       	out	0x07, r30	; 7
               adc.hp3 = vcc_diff(W10msReadADC(HighPin));	//measure voltage at the Source; this is the voltage drop across the pin's ~20 ohm internal resistance!
    3bba:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3bbc:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    3bc0:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3bc4:	f8 2e       	mov	r15, r24
    3bc6:	09 2f       	mov	r16, r25
               ADC_DDR = TXD_MSK;	// disconnect drain and source immediately after measurement, since quite a lot of current may flow
    3bc8:	17 b8       	out	0x07, r1	; 7
               i16 = (unsigned int)(((unsigned long)adc.hp3 * 10000) / RRpinPL); // Idss 1uA
    3bca:	28 2f       	mov	r18, r24
    3bcc:	39 2f       	mov	r19, r25
    3bce:	a0 e1       	ldi	r26, 0x10	; 16
    3bd0:	b7 e2       	ldi	r27, 0x27	; 39
    3bd2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3bd6:	69 83       	std	Y+1, r22	; 0x01
    3bd8:	7a 83       	std	Y+2, r23	; 0x02
    3bda:	8b 83       	std	Y+3, r24	; 0x03
    3bdc:	9c 83       	std	Y+4, r25	; 0x04
    3bde:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <pin_rpl>
    3be2:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <pin_rpl+0x1>
    3be6:	50 e0       	ldi	r21, 0x00	; 0
    3be8:	40 e0       	ldi	r20, 0x00	; 0
    3bea:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
               i16 =expand_FET_quadratic(ptrans.ice0,adc.hp3,i16);
    3bee:	a9 01       	movw	r20, r18
    3bf0:	6f 2d       	mov	r22, r15
    3bf2:	70 2f       	mov	r23, r16
    3bf4:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <ptrans+0x8>
    3bf8:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <ptrans+0x9>
    3bfc:	9d dd       	rcall	.-1222   	; 0x3738 <expand_FET_quadratic>
    3bfe:	9c 01       	movw	r18, r24
           ptrans.uBE = i16;
    3c00:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <ptrans+0x5>
    3c04:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <ptrans+0x4>
    if ((PartMode&0x0f) != PART_MODE_JFET)
    3c08:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <PartMode>
    3c0c:	8f 70       	andi	r24, 0x0F	; 15
    3c0e:	84 30       	cpi	r24, 0x04	; 4
    3c10:	09 f4       	brne	.+2      	; 0x3c14 <CheckPins+0x496>
    3c12:	b5 cf       	rjmp	.-150    	; 0x3b7e <CheckPins+0x400>
    3c14:	8f cf       	rjmp	.-226    	; 0x3b34 <CheckPins+0x3b6>
  ADC_PORT = TXD_VAL;
    3c16:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = LoADCm;			// Collector direct to GND
    3c18:	37 b8       	out	0x07, r3	; 7
  R_PORT = HiPinRL;			// switch R_L port for HighPin (Emitter) to VCC
    3c1a:	25 b8       	out	0x05, r2	; 5
  R_DDR =  TriPinRH | HiPinRL;	// Tripin=RH-
    3c1c:	54 b8       	out	0x04, r5	; 4
  adc.hp1 = W5msReadADC(HighPin);
    3c1e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c20:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    3c24:	8a 8f       	std	Y+26, r24	; 0x1a
    3c26:	9b 8f       	std	Y+27, r25	; 0x1b
  adc.rhp = vcc_diff(adc.hp1);	// voltage at the Emitter resistor
    3c28:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3c2c:	89 83       	std	Y+1, r24	; 0x01
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
  adc.tp1 = ReadADC(TristatePin);	// voltage at base resistor 
    3c30:	8d 81       	ldd	r24, Y+5	; 0x05
    3c32:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3c36:	8e 83       	std	Y+6, r24	; 0x06
    3c38:	9f 83       	std	Y+7, r25	; 0x07
  if (adc.rhp > (100+adc.lp_otr)) {
    3c3a:	93 01       	movw	r18, r6
    3c3c:	2c 59       	subi	r18, 0x9C	; 156
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	3e 8f       	std	Y+30, r19	; 0x1e
    3c42:	2d 8f       	std	Y+29, r18	; 0x1d
    3c44:	e9 80       	ldd	r14, Y+1	; 0x01
    3c46:	fa 80       	ldd	r15, Y+2	; 0x02
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    3c48:	b3 01       	movw	r22, r6
  if (adc.rhp > (100+adc.lp_otr)) {
    3c4a:	2e 15       	cp	r18, r14
    3c4c:	3f 05       	cpc	r19, r15
    3c4e:	08 f0       	brcs	.+2      	; 0x3c52 <CheckPins+0x4d4>
    3c50:	f4 c0       	rjmp	.+488    	; 0x3e3a <CheckPins+0x6bc>
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    3c52:	c7 01       	movw	r24, r14
    3c54:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3c58:	7c 01       	movw	r14, r24
              (unsigned int)RR680PL)) / (unsigned int)adc.tp1;	
    3c5a:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    3c5e:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    3c62:	50 e0       	ldi	r21, 0x00	; 0
    3c64:	40 e0       	ldi	r20, 0x00	; 0
     c_hfe = ((unsigned long)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3c66:	60 e8       	ldi	r22, 0x80	; 128
    3c68:	71 ea       	ldi	r23, 0xA1	; 161
    3c6a:	83 e0       	ldi	r24, 0x03	; 3
    3c6c:	9c e1       	ldi	r25, 0x1C	; 28
    3c6e:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3c72:	d7 01       	movw	r26, r14
    3c74:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
     c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.tp1) * 100) / adc.tp1;
    3c78:	68 87       	std	Y+8, r22	; 0x08
    3c7a:	79 87       	std	Y+9, r23	; 0x09
    3c7c:	8a 87       	std	Y+10, r24	; 0x0a
    3c7e:	9b 87       	std	Y+11, r25	; 0x0b
    3c80:	ee 80       	ldd	r14, Y+6	; 0x06
    3c82:	ff 80       	ldd	r15, Y+7	; 0x07
    3c84:	97 01       	movw	r18, r14
    3c86:	50 e0       	ldi	r21, 0x00	; 0
    3c88:	40 e0       	ldi	r20, 0x00	; 0
    3c8a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3c8e:	49 01       	movw	r8, r18
    3c90:	5a 01       	movw	r10, r20
  R_DDR = 0;			//all Resistor Ports to Input
    3c92:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			//switch all resistor ports to GND
    3c94:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    3c96:	f8 a0       	ldd	r15, Y+32	; 0x20
    3c98:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = HiADCm;		//switch High-Pin to output
    3c9a:	f7 b8       	out	0x07, r15	; 7
  wait_about5ms();
    3c9c:	81 e0       	ldi	r24, 0x01	; 1
    3c9e:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
     R_DDR = LoPinRL | TriPinRL;	//switch R_L port for Tristate-Pin to output (GND), for Test of PNP
    3ca2:	cc 88       	ldd	r12, Y+20	; 0x14
    3ca4:	c4 b8       	out	0x04, r12	; 4
     adc.lp1 = W5msReadADC(LowPin);	//measure voltage at LowPin
    3ca6:	81 2f       	mov	r24, r17
    3ca8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
     if(adc.lp1 > 3422) {
    3cac:	8f 35       	cpi	r24, 0x5F	; 95
    3cae:	9d 40       	sbci	r25, 0x0D	; 13
    3cb0:	08 f4       	brcc	.+2      	; 0x3cb4 <CheckPins+0x536>
    3cb2:	6f c1       	rjmp	.+734    	; 0x3f92 <CheckPins+0x814>
        R_DDR = LoPinRL | TriPinRH;	//switch R_H port for Tristate-Pin (Base) to output (GND)
    3cb4:	c9 8c       	ldd	r12, Y+25	; 0x19
    3cb6:	c4 b8       	out	0x04, r12	; 4
        adc.lp1 = W10msReadADC(LowPin);	//measure voltage at LowPin (assumed Collector)
    3cb8:	81 2f       	mov	r24, r17
    3cba:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    3cbe:	7c 01       	movw	r14, r24
        adc.tp2 = ReadADC(TristatePin);	//measure voltage at TristatePin (Base) 
    3cc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cc2:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3cc6:	88 87       	std	Y+8, r24	; 0x08
    3cc8:	99 87       	std	Y+9, r25	; 0x09
        adc.hp2 = ReadADC(HighPin);	//measure voltage at HighPin (assumed Emitter)
    3cca:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3ccc:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3cd0:	88 8b       	std	Y+16, r24	; 0x10
    3cd2:	99 8b       	std	Y+17, r25	; 0x11
        if(adc.tp2 > 2000) {
    3cd4:	28 85       	ldd	r18, Y+8	; 0x08
    3cd6:	39 85       	ldd	r19, Y+9	; 0x09
    3cd8:	21 3d       	cpi	r18, 0xD1	; 209
    3cda:	37 40       	sbci	r19, 0x07	; 7
    3cdc:	08 f4       	brcc	.+2      	; 0x3ce0 <CheckPins+0x562>
    3cde:	e1 c0       	rjmp	.+450    	; 0x3ea2 <CheckPins+0x724>
           PartFound = PART_TRANSISTOR;
    3ce0:	84 e0       	ldi	r24, 0x04	; 4
    3ce2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
           PartMode = PART_MODE_PNP;
    3ce6:	8d e0       	ldi	r24, 0x0D	; 13
    3ce8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
              tmp16 -= adc.lp_otr;
    3cec:	67 01       	movw	r12, r14
           if (tmp16 > adc.lp_otr) {
    3cee:	6e 14       	cp	r6, r14
    3cf0:	7f 04       	cpc	r7, r15
    3cf2:	10 f4       	brcc	.+4      	; 0x3cf8 <CheckPins+0x57a>
              tmp16 -= adc.lp_otr;
    3cf4:	c6 18       	sub	r12, r6
    3cf6:	d7 08       	sbc	r13, r7
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    3cf8:	20 90 19 01 	lds	r2, 0x0119	; 0x800119 <resis680mi>
    3cfc:	30 90 1a 01 	lds	r3, 0x011A	; 0x80011a <resis680mi+0x1>
    3d00:	51 2c       	mov	r5, r1
    3d02:	41 2c       	mov	r4, r1
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3d04:	60 e8       	ldi	r22, 0x80	; 128
    3d06:	71 ea       	ldi	r23, 0xA1	; 161
    3d08:	83 e0       	ldi	r24, 0x03	; 3
    3d0a:	9c e1       	ldi	r25, 0x1C	; 28
    3d0c:	a2 01       	movw	r20, r4
    3d0e:	91 01       	movw	r18, r2
    3d10:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3d14:	d6 01       	movw	r26, r12
    3d16:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
              (unsigned int)RR680MI)) / (unsigned int)adc.tp2;	
    3d1a:	c8 84       	ldd	r12, Y+8	; 0x08
    3d1c:	d9 84       	ldd	r13, Y+9	; 0x09
    3d1e:	96 01       	movw	r18, r12
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	40 e0       	ldi	r20, 0x00	; 0
           e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3d24:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
           if ((ptrans.count == 0) || (e_hfe > ptrans.hfe)){
    3d28:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <ptrans+0xf>
    3d2c:	88 23       	and	r24, r24
    3d2e:	71 f0       	breq	.+28     	; 0x3d4c <CheckPins+0x5ce>
    3d30:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <ptrans>
    3d34:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <ptrans+0x1>
    3d38:	a0 91 76 01 	lds	r26, 0x0176	; 0x800176 <ptrans+0x2>
    3d3c:	b0 91 77 01 	lds	r27, 0x0177	; 0x800177 <ptrans+0x3>
    3d40:	82 17       	cp	r24, r18
    3d42:	93 07       	cpc	r25, r19
    3d44:	a4 07       	cpc	r26, r20
    3d46:	b5 07       	cpc	r27, r21
    3d48:	08 f0       	brcs	.+2      	; 0x3d4c <CheckPins+0x5ce>
    3d4a:	96 c0       	rjmp	.+300    	; 0x3e78 <CheckPins+0x6fa>
              ptrans.hfe = e_hfe;				// hFE with common emitter
    3d4c:	20 93 74 01 	sts	0x0174, r18	; 0x800174 <ptrans>
    3d50:	30 93 75 01 	sts	0x0175, r19	; 0x800175 <ptrans+0x1>
    3d54:	40 93 76 01 	sts	0x0176, r20	; 0x800176 <ptrans+0x2>
    3d58:	50 93 77 01 	sts	0x0177, r21	; 0x800177 <ptrans+0x3>
              ptrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Ic 1uA
    3d5c:	97 01       	movw	r18, r14
    3d5e:	a0 e1       	ldi	r26, 0x10	; 16
    3d60:	b7 e2       	ldi	r27, 0x27	; 39
    3d62:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3d66:	a2 01       	movw	r20, r4
    3d68:	91 01       	movw	r18, r2
    3d6a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3d6e:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <ptrans+0x7>
    3d72:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <ptrans+0x6>
              ptrans.uBE = unsigned_diff(adc.hp2, adc.tp2);	// Base Emitter Voltage
    3d76:	68 85       	ldd	r22, Y+8	; 0x08
    3d78:	79 85       	ldd	r23, Y+9	; 0x09
    3d7a:	88 89       	ldd	r24, Y+16	; 0x10
    3d7c:	99 89       	ldd	r25, Y+17	; 0x11
    3d7e:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3d82:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <ptrans+0x5>
    3d86:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ptrans+0x4>
              update_pins = 1;		// trans.ebc must be updated
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
           if (c_hfe > ptrans.hfe)  // trans.hfe is allready e_hfe or last c_hFE
    3d8c:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <ptrans>
    3d90:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <ptrans+0x1>
    3d94:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <ptrans+0x2>
    3d98:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <ptrans+0x3>
    3d9c:	48 15       	cp	r20, r8
    3d9e:	59 05       	cpc	r21, r9
    3da0:	6a 05       	cpc	r22, r10
    3da2:	7b 05       	cpc	r23, r11
    3da4:	08 f0       	brcs	.+2      	; 0x3da8 <CheckPins+0x62a>
    3da6:	6a c0       	rjmp	.+212    	; 0x3e7c <CheckPins+0x6fe>
              ptrans.hfe = c_hfe;		// c_hfe is the best
    3da8:	80 92 74 01 	sts	0x0174, r8	; 0x800174 <ptrans>
    3dac:	90 92 75 01 	sts	0x0175, r9	; 0x800175 <ptrans+0x1>
    3db0:	a0 92 76 01 	sts	0x0176, r10	; 0x800176 <ptrans+0x2>
    3db4:	b0 92 77 01 	sts	0x0177, r11	; 0x800177 <ptrans+0x3>
              ptrans.uBE = unsigned_diff(adc.hp1, adc.tp1);	// Base Emitter Voltage common collector
    3db8:	6e 81       	ldd	r22, Y+6	; 0x06
    3dba:	7f 81       	ldd	r23, Y+7	; 0x07
    3dbc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3dbe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3dc0:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3dc4:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <ptrans+0x5>
    3dc8:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <ptrans+0x4>
              ptrans.current = (unsigned int)(((unsigned long)adc.rhp * 10000) / RR680PL); // Ie 1uA
    3dcc:	29 81       	ldd	r18, Y+1	; 0x01
    3dce:	3a 81       	ldd	r19, Y+2	; 0x02
    3dd0:	a0 e1       	ldi	r26, 0x10	; 16
    3dd2:	b7 e2       	ldi	r27, 0x27	; 39
    3dd4:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3dd8:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    3ddc:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    3de0:	50 e0       	ldi	r21, 0x00	; 0
    3de2:	40 e0       	ldi	r20, 0x00	; 0
    3de4:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
              ptrans.current += 10000;		// current at emitter!
    3de8:	20 5f       	subi	r18, 0xF0	; 240
    3dea:	38 4d       	sbci	r19, 0xD8	; 216
    3dec:	30 93 7b 01 	sts	0x017B, r19	; 0x80017b <ptrans+0x7>
    3df0:	20 93 7a 01 	sts	0x017A, r18	; 0x80017a <ptrans+0x6>
              ptrans.ice0 = (unsigned int)(((unsigned long)adc.lp_otr * 10000) / RR680MI); // ICE0 1uA
    3df4:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <resis680mi>
    3df8:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <resis680mi+0x1>
    3dfc:	f1 2c       	mov	r15, r1
    3dfe:	e1 2c       	mov	r14, r1
    3e00:	93 01       	movw	r18, r6
    3e02:	a0 e1       	ldi	r26, 0x10	; 16
    3e04:	b7 e2       	ldi	r27, 0x27	; 39
    3e06:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3e0a:	a7 01       	movw	r20, r14
    3e0c:	96 01       	movw	r18, r12
    3e0e:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3e12:	30 93 7d 01 	sts	0x017D, r19	; 0x80017d <ptrans+0x9>
    3e16:	20 93 7c 01 	sts	0x017C, r18	; 0x80017c <ptrans+0x8>
              ptrans.ices = (unsigned int)(((unsigned long)adc.vCEs * 10000) / RR680MI); // ICEs 1uA
    3e1a:	2a 89       	ldd	r18, Y+18	; 0x12
    3e1c:	3b 89       	ldd	r19, Y+19	; 0x13
    3e1e:	a0 e1       	ldi	r26, 0x10	; 16
    3e20:	b7 e2       	ldi	r27, 0x27	; 39
    3e22:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3e26:	a7 01       	movw	r20, r14
    3e28:	96 01       	movw	r18, r12
    3e2a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3e2e:	30 93 7f 01 	sts	0x017F, r19	; 0x80017f <ptrans+0xb>
    3e32:	20 93 7e 01 	sts	0x017E, r18	; 0x80017e <ptrans+0xa>
    3e36:	81 e0       	ldi	r24, 0x01	; 1
    3e38:	23 c0       	rjmp	.+70     	; 0x3e80 <CheckPins+0x702>
     tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);
    3e3a:	89 81       	ldd	r24, Y+1	; 0x01
    3e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e3e:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3e42:	7c 01       	movw	r14, r24
     R_DDR = TriPinRL | HiPinRL;		// Base resistor  R_L to GND
    3e44:	44 b8       	out	0x04, r4	; 4
     adc.hp1 = W5msReadADC(HighPin);	// voltage at the Emitter resistor
    3e46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3e48:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    3e4c:	8a 8f       	std	Y+26, r24	; 0x1a
    3e4e:	9b 8f       	std	Y+27, r25	; 0x1b
     adc.rhp = vcc_diff(adc.hp1);	// voltage at the Emitter resistor
    3e50:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3e54:	89 83       	std	Y+1, r24	; 0x01
    3e56:	9a 83       	std	Y+2, r25	; 0x02
     adc.tp1 = ReadADC(TristatePin);	// voltage at the base resistor (RL)
    3e58:	8d 81       	ldd	r24, Y+5	; 0x05
    3e5a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3e5e:	8e 83       	std	Y+6, r24	; 0x06
    3e60:	9f 83       	std	Y+7, r25	; 0x07
     c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.tp1) * 100) / adc.tp1;
    3e62:	6e 81       	ldd	r22, Y+6	; 0x06
    3e64:	7f 81       	ldd	r23, Y+7	; 0x07
    3e66:	c7 01       	movw	r24, r14
    3e68:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3e6c:	9c 01       	movw	r18, r24
    3e6e:	a4 e6       	ldi	r26, 0x64	; 100
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3e76:	00 cf       	rjmp	.-512    	; 0x3c78 <CheckPins+0x4fa>
           update_pins = 0;		// only update pins, if hFE is higher or Thyristor 
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	88 cf       	rjmp	.-240    	; 0x3d8c <CheckPins+0x60e>
           if (update_pins != 0) {
    3e7c:	81 11       	cpse	r24, r1
    3e7e:	ba cf       	rjmp	.-140    	; 0x3df4 <CheckPins+0x676>
//---------------------------------------------------------------------------
savePresult:
#if DebugOut == 5
 lcd_data('P');
#endif
 ptrans.count++;
    3e80:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <ptrans+0xf>
    3e84:	9f 5f       	subi	r25, 0xFF	; 255
    3e86:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <ptrans+0xf>
 if (update_pins != 0) {
    3e8a:	88 23       	and	r24, r24
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <CheckPins+0x712>
    3e8e:	6d c3       	rjmp	.+1754   	; 0x456a <CheckPins+0xdec>
    ptrans.b = TristatePin;	// save Pin-constellation
    3e90:	dd 80       	ldd	r13, Y+5	; 0x05
    3e92:	d0 92 80 01 	sts	0x0180, r13	; 0x800180 <ptrans+0xc>
    ptrans.c = LowPin;
    3e96:	10 93 81 01 	sts	0x0181, r17	; 0x800181 <ptrans+0xd>
    ptrans.e = HighPin;
    3e9a:	ef 8c       	ldd	r14, Y+31	; 0x1f
    3e9c:	e0 92 82 01 	sts	0x0182, r14	; 0x800182 <ptrans+0xe>
    3ea0:	64 c3       	rjmp	.+1736   	; 0x456a <CheckPins+0xdec>
        if((adc.lp_otr < 97) && (adc.lp1 > 2000)) {
    3ea2:	21 e6       	ldi	r18, 0x61	; 97
    3ea4:	62 16       	cp	r6, r18
    3ea6:	71 04       	cpc	r7, r1
    3ea8:	08 f0       	brcs	.+2      	; 0x3eac <CheckPins+0x72e>
    3eaa:	73 c0       	rjmp	.+230    	; 0x3f92 <CheckPins+0x814>
    3eac:	31 ed       	ldi	r19, 0xD1	; 209
    3eae:	e3 16       	cp	r14, r19
    3eb0:	37 e0       	ldi	r19, 0x07	; 7
    3eb2:	f3 06       	cpc	r15, r19
    3eb4:	08 f4       	brcc	.+2      	; 0x3eb8 <CheckPins+0x73a>
    3eb6:	6d c0       	rjmp	.+218    	; 0x3f92 <CheckPins+0x814>
           PartFound = PART_FET;		//P-Kanal-MOSFET is found (Basis/Gate moves not to VCC)
    3eb8:	85 e0       	ldi	r24, 0x05	; 5
    3eba:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
           PartMode = PART_MODE_MOS|P_CHANNEL|E_MODE;
    3ebe:	82 e1       	ldi	r24, 0x12	; 18
    3ec0:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
           if (adc.hp2 > (adc.lp1+250)) {
    3ec4:	c7 01       	movw	r24, r14
    3ec6:	86 50       	subi	r24, 0x06	; 6
    3ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    3eca:	c8 88       	ldd	r12, Y+16	; 0x10
    3ecc:	d9 88       	ldd	r13, Y+17	; 0x11
    3ece:	8c 15       	cp	r24, r12
    3ed0:	9d 05       	cpc	r25, r13
    3ed2:	08 f0       	brcs	.+2      	; 0x3ed6 <CheckPins+0x758>
    3ed4:	43 c0       	rjmp	.+134    	; 0x3f5c <CheckPins+0x7de>
              PartMode = PART_MODE_IGBT|P_CHANNEL|E_MODE;
    3ed6:	83 e1       	ldi	r24, 0x13	; 19
    3ed8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
           PinMSK = LoADCm & 7;
    3edc:	23 2d       	mov	r18, r3
    3ede:	27 70       	andi	r18, 0x07	; 7
    3ee0:	32 2e       	mov	r3, r18
       	   ADMUX = TristatePin | (1<<REFS0);	// switch to TristatePin, Ref. VCC
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	80 64       	ori	r24, 0x40	; 64
    3ee6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    3eea:	3b e0       	ldi	r19, 0x0B	; 11
    3eec:	39 83       	std	Y+1, r19	; 0x01
       	   tmp16 = 1;			// round up ((1*4)/9)
    3eee:	cc 24       	eor	r12, r12
    3ef0:	c3 94       	inc	r12
    3ef2:	d1 2c       	mov	r13, r1
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    3ef4:	ee 24       	eor	r14, r14
    3ef6:	ea 94       	dec	r14
    3ef8:	b3 e0       	ldi	r27, 0x03	; 3
       	      wdt_reset();
    3efa:	fb 2e       	mov	r15, r27
       	      ChargePin10ms(TriPinRL,1);
    3efc:	a8 95       	wdr
    3efe:	61 e0       	ldi	r22, 0x01	; 1
    3f00:	80 2f       	mov	r24, r16
    3f02:	72 d5       	rcall	.+2788   	; 0x49e8 <ChargePin10ms>
                R_DDR = LoPinRL | TriPinRH;		//switch R_H for Tristate-Pin (Basis) to GND
    3f04:	49 8d       	ldd	r20, Y+25	; 0x19
    3f06:	44 b9       	out	0x04, r20	; 4
       	      while (!(ADC_PIN&PinMSK));		// Wait, until the MOSFET switches and Drain moves to VCC
    3f08:	86 b1       	in	r24, 0x06	; 6
    3f0a:	83 21       	and	r24, r3
    3f0c:	e9 f3       	breq	.-6      	; 0x3f08 <CheckPins+0x78a>
       	      R_DDR = LoPinRL;
    3f0e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3f10:	84 b9       	out	0x04, r24	; 4
       	      ADCSRA |= (1<<ADSC);		// Start Conversion
    3f12:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3f16:	80 64       	ori	r24, 0x40	; 64
    3f18:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
       	      while (ADCSRA&(1<<ADSC));		// wait
    3f1c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    3f20:	86 fd       	sbrc	r24, 6
    3f22:	fc cf       	rjmp	.-8      	; 0x3f1c <CheckPins+0x79e>
      	      tmp16 += (1023 - ADCW);	// Add Tristatepin-Voltage
    3f24:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    3f28:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    3f2c:	d7 01       	movw	r26, r14
    3f2e:	a8 1b       	sub	r26, r24
    3f30:	b9 0b       	sbc	r27, r25
    3f32:	ca 0e       	add	r12, r26
    3f34:	db 1e       	adc	r13, r27
       	   for(ii=0;ii<11;ii++) {
    3f36:	b9 81       	ldd	r27, Y+1	; 0x01
    3f38:	b1 50       	subi	r27, 0x01	; 1
    3f3a:	b9 83       	std	Y+1, r27	; 0x01
    3f3c:	b1 11       	cpse	r27, r1
    3f3e:	de cf       	rjmp	.-68     	; 0x3efc <CheckPins+0x77e>
           tmp16 *= 4;		// is equal to 44*ADCW
    3f40:	c6 01       	movw	r24, r12
    3f42:	88 0f       	add	r24, r24
    3f44:	99 1f       	adc	r25, r25
    3f46:	88 0f       	add	r24, r24
    3f48:	99 1f       	adc	r25, r25
           ptrans.gthvoltage = tmp16 / 9;		// gives resolution in mV
    3f4a:	69 e0       	ldi	r22, 0x09	; 9
    3f4c:	70 e0       	ldi	r23, 0x00	; 0
    3f4e:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
    3f52:	70 93 7f 01 	sts	0x017F, r23	; 0x80017f <ptrans+0xb>
    3f56:	60 93 7e 01 	sts	0x017E, r22	; 0x80017e <ptrans+0xa>
    3f5a:	11 ce       	rjmp	.-990    	; 0x3b7e <CheckPins+0x400>
              ptrans.uBE = RR680MI * (unsigned long)unsigned_diff(adc.hp2, adc.lp1) / adc.lp1; // DS resistance in 0.1 OHm
    3f5c:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <resis680mi>
    3f60:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <resis680mi+0x1>
    3f64:	b7 01       	movw	r22, r14
    3f66:	88 89       	ldd	r24, Y+16	; 0x10
    3f68:	99 89       	ldd	r25, Y+17	; 0x11
    3f6a:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3f6e:	96 01       	movw	r18, r12
    3f70:	dc 01       	movw	r26, r24
    3f72:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    3f76:	69 83       	std	Y+1, r22	; 0x01
    3f78:	7a 83       	std	Y+2, r23	; 0x02
    3f7a:	8b 83       	std	Y+3, r24	; 0x03
    3f7c:	9c 83       	std	Y+4, r25	; 0x04
    3f7e:	97 01       	movw	r18, r14
    3f80:	50 e0       	ldi	r21, 0x00	; 0
    3f82:	40 e0       	ldi	r20, 0x00	; 0
    3f84:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3f88:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <ptrans+0x5>
    3f8c:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <ptrans+0x4>
    3f90:	a5 cf       	rjmp	.-182    	; 0x3edc <CheckPins+0x75e>
    R_DDR = LoPinRL | TriPinRH;
    3f92:	c9 8c       	ldd	r12, Y+25	; 0x19
    3f94:	c4 b8       	out	0x04, r12	; 4
    R_PORT = TriPinRH;		// Tripin=RH+
    3f96:	d5 b8       	out	0x05, r13	; 5
    adc.lp1 = W5msReadADC(LowPin);
    3f98:	81 2f       	mov	r24, r17
    3f9a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    3f9e:	4c 01       	movw	r8, r24
    adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    3fa0:	8d 81       	ldd	r24, Y+5	; 0x05
    3fa2:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    3fa6:	8e 83       	std	Y+6, r24	; 0x06
    3fa8:	98 87       	std	Y+8, r25	; 0x08
    adc.rtp = vcc_diff(adc.tp1);	// voltage at Base resistor
    3faa:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    3fae:	7c 01       	movw	r14, r24
    if (adc.lp1 > (100+adc.lp_otr)) {
    3fb0:	cd 8c       	ldd	r12, Y+29	; 0x1d
    3fb2:	de 8c       	ldd	r13, Y+30	; 0x1e
    3fb4:	c8 14       	cp	r12, r8
    3fb6:	d9 04       	cpc	r13, r9
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <CheckPins+0x83e>
    3fba:	aa c0       	rjmp	.+340    	; 0x4110 <CheckPins+0x992>
       tmp16 = unsigned_diff(adc.lp1, adc.lp_otr);
    3fbc:	b3 01       	movw	r22, r6
    3fbe:	c4 01       	movw	r24, r8
    3fc0:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    3fc4:	6c 01       	movw	r12, r24
              (unsigned int)RR680MI)) / (unsigned int)adc.rtp;	
    3fc6:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    3fca:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    3fce:	50 e0       	ldi	r21, 0x00	; 0
    3fd0:	40 e0       	ldi	r20, 0x00	; 0
       c_hfe = ((unsigned long)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    3fd2:	60 e8       	ldi	r22, 0x80	; 128
    3fd4:	71 ea       	ldi	r23, 0xA1	; 161
    3fd6:	83 e0       	ldi	r24, 0x03	; 3
    3fd8:	9c e1       	ldi	r25, 0x1C	; 28
    3fda:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3fde:	d6 01       	movw	r26, r12
    3fe0:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
       c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.rtp) * 100) / adc.rtp;
    3fe4:	69 83       	std	Y+1, r22	; 0x01
    3fe6:	7a 83       	std	Y+2, r23	; 0x02
    3fe8:	8b 83       	std	Y+3, r24	; 0x03
    3fea:	9c 83       	std	Y+4, r25	; 0x04
    3fec:	97 01       	movw	r18, r14
    3fee:	50 e0       	ldi	r21, 0x00	; 0
    3ff0:	40 e0       	ldi	r20, 0x00	; 0
    3ff2:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    3ff6:	2c 8b       	std	Y+20, r18	; 0x14
    3ff8:	3d 8b       	std	Y+21, r19	; 0x15
    3ffa:	4e 8b       	std	Y+22, r20	; 0x16
    3ffc:	5f 8b       	std	Y+23, r21	; 0x17
    ADC_DDR = LoADCm;		//Low-Pin to output 0V
    3ffe:	37 b8       	out	0x07, r3	; 7
    ADC_PORT = TXD_VAL;			//switch Low-Pin to GND
    4000:	18 b8       	out	0x08, r1	; 8
    R_DDR = TriPinRL | HiPinRL;		//RL port for High-Pin and Tristate-Pin to output
    4002:	44 b8       	out	0x04, r4	; 4
    R_PORT = TriPinRL | HiPinRL;	//RL port for High-Pin and Tristate-Pin to Vcc
    4004:	45 b8       	out	0x05, r4	; 5
    adc.hp1 = W5msReadADC(HighPin);	//measure voltage at High-Pin  (Collector)
    4006:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4008:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    400c:	5c 01       	movw	r10, r24
    adc.tp2 = ReadADC(TristatePin);	//voltage of gate
    400e:	8d 81       	ldd	r24, Y+5	; 0x05
    4010:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4014:	d8 2e       	mov	r13, r24
    4016:	c9 2e       	mov	r12, r25
    adc.lp2 = ReadADC(LowPin);		//voltage of Cathode
    4018:	81 2f       	mov	r24, r17
    401a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    401e:	7c 01       	movw	r14, r24
    if(adc.hp1 < 4400)    /* limit for opto-coupler with low hFE */
    4020:	20 e3       	ldi	r18, 0x30	; 48
    4022:	a2 16       	cp	r10, r18
    4024:	21 e1       	ldi	r18, 0x11	; 17
    4026:	b2 06       	cpc	r11, r18
    4028:	08 f0       	brcs	.+2      	; 0x402c <CheckPins+0x8ae>
    402a:	e3 c1       	rjmp	.+966    	; 0x43f2 <CheckPins+0xc74>
       R_PORT = HiPinRL;
    402c:	25 b8       	out	0x05, r2	; 5
       adc.hp4 = W5msReadADC(HighPin);  //read voltage with switched back base
    402e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4030:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4034:	89 83       	std	Y+1, r24	; 0x01
    4036:	9a 83       	std	Y+2, r25	; 0x02
       R_DDR = HiPinRL;			// base to input
    4038:	24 b8       	out	0x04, r2	; 4
       adc.hp3 = W5msReadADC(HighPin);	//read voltage at High-Pin (probably Anode) again
    403a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    403c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4040:	88 8b       	std	Y+16, r24	; 0x10
    4042:	99 8b       	std	Y+17, r25	; 0x11
       R_PORT = 0;			//switch R_L for High-Pin (probably Anode) to GND (turn off)
    4044:	15 b8       	out	0x05, r1	; 5
       wait_about5ms();
    4046:	81 e0       	ldi	r24, 0x01	; 1
    4048:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
       R_PORT = HiPinRL;		//switch R_L for High-Pin (probably Anode) again to VCC
    404c:	25 b8       	out	0x05, r2	; 5
       adc.hp2 = W5msReadADC(HighPin);	//measure voltage at the High-Pin (probably Anode) again
    404e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4050:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4054:	9c 01       	movw	r18, r24
       if((adc.hp3 < 1600) && (adc.hp2 > 4400)
    4056:	88 89       	ldd	r24, Y+16	; 0x10
    4058:	99 89       	ldd	r25, Y+17	; 0x11
    405a:	80 34       	cpi	r24, 0x40	; 64
    405c:	96 40       	sbci	r25, 0x06	; 6
    405e:	08 f0       	brcs	.+2      	; 0x4062 <CheckPins+0x8e4>
    4060:	75 c0       	rjmp	.+234    	; 0x414c <CheckPins+0x9ce>
    4062:	21 33       	cpi	r18, 0x31	; 49
    4064:	31 41       	sbci	r19, 0x11	; 17
    4066:	08 f4       	brcc	.+2      	; 0x406a <CheckPins+0x8ec>
    4068:	71 c0       	rjmp	.+226    	; 0x414c <CheckPins+0x9ce>
           && ((adc.hp1+150) > adc.hp4)
    406a:	c5 01       	movw	r24, r10
    406c:	8a 56       	subi	r24, 0x6A	; 106
    406e:	9f 4f       	sbci	r25, 0xFF	; 255
    4070:	29 81       	ldd	r18, Y+1	; 0x01
    4072:	3a 81       	ldd	r19, Y+2	; 0x02
    4074:	28 17       	cp	r18, r24
    4076:	39 07       	cpc	r19, r25
    4078:	08 f0       	brcs	.+2      	; 0x407c <CheckPins+0x8fe>
    407a:	68 c0       	rjmp	.+208    	; 0x414c <CheckPins+0x9ce>
          PartFound = PART_THYRISTOR;
    407c:	86 e0       	ldi	r24, 0x06	; 6
    407e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
          ntrans.count++;		// mark as two N-type transistors
    4082:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    4086:	8f 5f       	subi	r24, 0xFF	; 255
    4088:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <ntrans+0xf>
          ntrans.uBE = unsigned_diff(adc.tp2, adc.lp2);	// Gate - Cathode Voltage 
    408c:	b7 01       	movw	r22, r14
    408e:	8d 2d       	mov	r24, r13
    4090:	9c 2d       	mov	r25, r12
    4092:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    4096:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ntrans+0x5>
    409a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ntrans+0x4>
          ntrans.gthvoltage = unsigned_diff(adc.hp1, adc.lp2);	// Anode-Cathode Voltage
    409e:	b7 01       	movw	r22, r14
    40a0:	c5 01       	movw	r24, r10
    40a2:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    40a6:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <ntrans+0xb>
    40aa:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <ntrans+0xa>
          R_DDR = 0;
    40ae:	14 b8       	out	0x04, r1	; 4
          R_PORT = 0;
    40b0:	15 b8       	out	0x05, r1	; 5
          ADC_PORT = LoADCp;	//Low-Pin fix to VCC
    40b2:	38 b8       	out	0x08, r3	; 8
          wait_about5ms();
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
          R_DDR = HiPinRL;		//switch R_L port HighPin to output (GND)
    40ba:	24 b8       	out	0x04, r2	; 4
          if(W5msReadADC(HighPin) > 244) {
    40bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40be:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    40c2:	85 3f       	cpi	r24, 0xF5	; 245
    40c4:	91 05       	cpc	r25, r1
    40c6:	10 f5       	brcc	.+68     	; 0x410c <CheckPins+0x98e>
          R_DDR = HiPinRL | TriPinRL;	//switch R_L port for TristatePin (Gate) to output (GND) => Triac should be triggered 
    40c8:	44 b8       	out	0x04, r4	; 4
          if(W5msReadADC(TristatePin) < 977) {
    40ca:	8d 81       	ldd	r24, Y+5	; 0x05
    40cc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    40d0:	81 3d       	cpi	r24, 0xD1	; 209
    40d2:	93 40       	sbci	r25, 0x03	; 3
    40d4:	d8 f0       	brcs	.+54     	; 0x410c <CheckPins+0x98e>
          if(ReadADC(HighPin) < 733) {
    40d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40d8:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    40dc:	8d 3d       	cpi	r24, 0xDD	; 221
    40de:	92 40       	sbci	r25, 0x02	; 2
    40e0:	a8 f0       	brcs	.+42     	; 0x410c <CheckPins+0x98e>
          R_DDR = HiPinRL;		//TristatePin (Gate) to input 
    40e2:	24 b8       	out	0x04, r2	; 4
          if(W5msReadADC(HighPin) < 733) {
    40e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40e6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    40ea:	8d 3d       	cpi	r24, 0xDD	; 221
    40ec:	92 40       	sbci	r25, 0x02	; 2
    40ee:	70 f0       	brcs	.+28     	; 0x410c <CheckPins+0x98e>
          R_PORT = HiPinRL;		//switch R_L port for HighPin to VCC => switch off holding current 
    40f0:	25 b8       	out	0x05, r2	; 5
          wait_about5ms();
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
          R_PORT = 0;			//switch R_L port for HighPin again to GND; Triac should now switched off
    40f8:	15 b8       	out	0x05, r1	; 5
          if(W5msReadADC(HighPin) > 244) {
    40fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40fc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4100:	85 3f       	cpi	r24, 0xF5	; 245
    4102:	91 05       	cpc	r25, r1
    4104:	18 f4       	brcc	.+6      	; 0x410c <CheckPins+0x98e>
          PartFound = PART_TRIAC;
    4106:	87 e0       	ldi	r24, 0x07	; 7
    4108:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
  update_pins = 1;			// if a part is found, always update the pins
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	f4 c0       	rjmp	.+488    	; 0x42f8 <CheckPins+0xb7a>
      R_DDR = LoPinRL | TriPinRL;
    4110:	dc 88       	ldd	r13, Y+20	; 0x14
    4112:	d4 b8       	out	0x04, r13	; 4
      R_PORT = TriPinRL;			// TriPin=RL+  NPN with common Collector
    4114:	05 b9       	out	0x05, r16	; 5
      adc.lp1 = W5msReadADC(LowPin);	// voltage at Emitter resistor
    4116:	81 2f       	mov	r24, r17
    4118:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    411c:	4c 01       	movw	r8, r24
      adc.tp1 = ReadADC(TristatePin);	// voltage at the Base 
    411e:	8d 81       	ldd	r24, Y+5	; 0x05
    4120:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4124:	8e 83       	std	Y+6, r24	; 0x06
    4126:	98 87       	std	Y+8, r25	; 0x08
      adc.rtp = vcc_diff(adc.tp1);	// voltage at Base resistor
    4128:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    412c:	7c 01       	movw	r14, r24
          tmp16 -= adc.lp_otr;
    412e:	c4 01       	movw	r24, r8
       if (tmp16 > adc.lp_otr) {
    4130:	68 14       	cp	r6, r8
    4132:	79 04       	cpc	r7, r9
    4134:	10 f4       	brcc	.+4      	; 0x413a <CheckPins+0x9bc>
          tmp16 -= adc.lp_otr;
    4136:	86 19       	sub	r24, r6
    4138:	97 09       	sbc	r25, r7
       c_hfe = (unsigned long)((unsigned long)unsigned_diff(tmp16, adc.rtp) * 100) / adc.rtp;
    413a:	b7 01       	movw	r22, r14
    413c:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    4140:	9c 01       	movw	r18, r24
    4142:	a4 e6       	ldi	r26, 0x64	; 100
    4144:	b0 e0       	ldi	r27, 0x00	; 0
    4146:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    414a:	4c cf       	rjmp	.-360    	; 0x3fe4 <CheckPins+0x866>
      ADC_DDR = LoADCm;	//Low-Pin to output 0V
    414c:	37 b8       	out	0x07, r3	; 7
      R_DDR =  TriPinRL;	//R_L port of Tristate-Pin (Basis) to output
    414e:	04 b9       	out	0x04, r16	; 4
      R_PORT = TriPinRL;	//R_L port of Tristate-Pin (Basis) to VCC
    4150:	05 b9       	out	0x05, r16	; 5
      wait_about5ms();			// load gate capacitor
    4152:	81 e0       	ldi	r24, 0x01	; 1
    4154:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
      R_DDR = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to output
    4158:	54 b8       	out	0x04, r5	; 4
      R_PORT = HiPinRL | TriPinRH;	//R_H port of Tristate-Pin (Basis) to VCC
    415a:	55 b8       	out	0x05, r5	; 5
      adc.hp2 = W5msReadADC(HighPin);	//measure the voltage at the collector  
    415c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    415e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4162:	6c 01       	movw	r12, r24
      adc.rhp = vcc_diff(adc.hp2);	// voltage at the collector resistor
    4164:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    4168:	7c 01       	movw	r14, r24
      adc.tp2 = ReadADC(TristatePin);	//measure the voltage at the base 
    416a:	8d 81       	ldd	r24, Y+5	; 0x05
    416c:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4170:	88 8b       	std	Y+16, r24	; 0x10
    4172:	49 2e       	mov	r4, r25
      adc.rtp = vcc_diff(adc.tp2);	// voltage at the base resistor
    4174:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    4178:	89 83       	std	Y+1, r24	; 0x01
    417a:	9a 83       	std	Y+2, r25	; 0x02
      adc.lp2 = ReadADC(LowPin);
    417c:	81 2f       	mov	r24, r17
    417e:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4182:	5c 01       	movw	r10, r24
      if(adc.rtp > 2557) {		// Basis-voltage R_H is low enough
    4184:	29 81       	ldd	r18, Y+1	; 0x01
    4186:	3a 81       	ldd	r19, Y+2	; 0x02
    4188:	2e 3f       	cpi	r18, 0xFE	; 254
    418a:	39 40       	sbci	r19, 0x09	; 9
    418c:	08 f4       	brcc	.+2      	; 0x4190 <CheckPins+0xa12>
    418e:	c5 c0       	rjmp	.+394    	; 0x431a <CheckPins+0xb9c>
         PartFound = PART_TRANSISTOR;	//NPN-Transistor is found (Base is near GND)
    4190:	84 e0       	ldi	r24, 0x04	; 4
    4192:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
         PartMode = PART_MODE_NPN;
    4196:	8c e0       	ldi	r24, 0x0C	; 12
    4198:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
         tmp16 = unsigned_diff(adc.rhp, adc.lp_otr);	// subtract residual current
    419c:	b3 01       	movw	r22, r6
    419e:	c7 01       	movw	r24, r14
    41a0:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    41a4:	6c 01       	movw	r12, r24
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    41a6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    41aa:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	40 e0       	ldi	r20, 0x00	; 0
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    41b2:	60 e8       	ldi	r22, 0x80	; 128
    41b4:	71 ea       	ldi	r23, 0xA1	; 161
    41b6:	83 e0       	ldi	r24, 0x03	; 3
    41b8:	9c e1       	ldi	r25, 0x1C	; 28
    41ba:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    41be:	d6 01       	movw	r26, r12
    41c0:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
              (unsigned int)RR680PL)) / (unsigned int)adc.rtp;	
    41c4:	c9 80       	ldd	r12, Y+1	; 0x01
    41c6:	da 80       	ldd	r13, Y+2	; 0x02
    41c8:	96 01       	movw	r18, r12
    41ca:	50 e0       	ldi	r21, 0x00	; 0
    41cc:	40 e0       	ldi	r20, 0x00	; 0
         e_hfe = ((unsigned int)tmp16 * (unsigned long)(((unsigned long)R_H_VAL * 10000) / 
    41ce:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
         if ((ntrans.count == 0) || (e_hfe > ntrans.hfe)){
    41d2:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <ntrans+0xf>
    41d6:	88 23       	and	r24, r24
    41d8:	71 f0       	breq	.+28     	; 0x41f6 <CheckPins+0xa78>
    41da:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <ntrans>
    41de:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <ntrans+0x1>
    41e2:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <ntrans+0x2>
    41e6:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <ntrans+0x3>
    41ea:	82 17       	cp	r24, r18
    41ec:	93 07       	cpc	r25, r19
    41ee:	a4 07       	cpc	r26, r20
    41f0:	b5 07       	cpc	r27, r21
    41f2:	08 f0       	brcs	.+2      	; 0x41f6 <CheckPins+0xa78>
    41f4:	7d c0       	rjmp	.+250    	; 0x42f0 <CheckPins+0xb72>
            ntrans.hfe = e_hfe;
    41f6:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <ntrans>
    41fa:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <ntrans+0x1>
    41fe:	40 93 66 01 	sts	0x0166, r20	; 0x800166 <ntrans+0x2>
    4202:	50 93 67 01 	sts	0x0167, r21	; 0x800167 <ntrans+0x3>
            ntrans.uBE = unsigned_diff(adc.tp2, adc.lp2);
    4206:	b5 01       	movw	r22, r10
    4208:	88 89       	ldd	r24, Y+16	; 0x10
    420a:	94 2d       	mov	r25, r4
    420c:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    4210:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ntrans+0x5>
    4214:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ntrans+0x4>
            ntrans.current = (unsigned int)(((unsigned long)adc.rhp * 10000) / RR680PL); // Ic 1uA
    4218:	97 01       	movw	r18, r14
    421a:	a0 e1       	ldi	r26, 0x10	; 16
    421c:	b7 e2       	ldi	r27, 0x27	; 39
    421e:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    4222:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    4226:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    422a:	50 e0       	ldi	r21, 0x00	; 0
    422c:	40 e0       	ldi	r20, 0x00	; 0
    422e:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4232:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <ntrans+0x7>
    4236:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <ntrans+0x6>
            update_pins = 1;
    423a:	81 e0       	ldi	r24, 0x01	; 1
          if (c_hfe >  ntrans.hfe)
    423c:	40 91 64 01 	lds	r20, 0x0164	; 0x800164 <ntrans>
    4240:	50 91 65 01 	lds	r21, 0x0165	; 0x800165 <ntrans+0x1>
    4244:	60 91 66 01 	lds	r22, 0x0166	; 0x800166 <ntrans+0x2>
    4248:	70 91 67 01 	lds	r23, 0x0167	; 0x800167 <ntrans+0x3>
    424c:	cc 88       	ldd	r12, Y+20	; 0x14
    424e:	dd 88       	ldd	r13, Y+21	; 0x15
    4250:	ee 88       	ldd	r14, Y+22	; 0x16
    4252:	ff 88       	ldd	r15, Y+23	; 0x17
    4254:	4c 15       	cp	r20, r12
    4256:	5d 05       	cpc	r21, r13
    4258:	6e 05       	cpc	r22, r14
    425a:	7f 05       	cpc	r23, r15
    425c:	08 f0       	brcs	.+2      	; 0x4260 <CheckPins+0xae2>
    425e:	4a c0       	rjmp	.+148    	; 0x42f4 <CheckPins+0xb76>
            ntrans.hfe = c_hfe;
    4260:	c0 92 64 01 	sts	0x0164, r12	; 0x800164 <ntrans>
    4264:	d0 92 65 01 	sts	0x0165, r13	; 0x800165 <ntrans+0x1>
    4268:	e0 92 66 01 	sts	0x0166, r14	; 0x800166 <ntrans+0x2>
    426c:	f0 92 67 01 	sts	0x0167, r15	; 0x800167 <ntrans+0x3>
            ntrans.uBE = unsigned_diff(adc.tp1, adc.lp1);
    4270:	b4 01       	movw	r22, r8
    4272:	8e 81       	ldd	r24, Y+6	; 0x06
    4274:	98 85       	ldd	r25, Y+8	; 0x08
    4276:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    427a:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ntrans+0x5>
    427e:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ntrans+0x4>
            ntrans.current = (unsigned int)(((unsigned long)adc.lp1 * 10000) / RR680MI); // Ie 1uA
    4282:	94 01       	movw	r18, r8
    4284:	a0 e1       	ldi	r26, 0x10	; 16
    4286:	b7 e2       	ldi	r27, 0x27	; 39
    4288:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    428c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    4290:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    4294:	50 e0       	ldi	r21, 0x00	; 0
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
            ntrans.current += 10000;	// mark current at emitter!
    429c:	20 5f       	subi	r18, 0xF0	; 240
    429e:	38 4d       	sbci	r19, 0xD8	; 216
    42a0:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <ntrans+0x7>
    42a4:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <ntrans+0x6>
            ntrans.ice0 = (unsigned int)(((unsigned long)adc.lp_otr * 10000) / RR680MI); // ICE0 0.01mA
    42a8:	93 01       	movw	r18, r6
    42aa:	a0 e1       	ldi	r26, 0x10	; 16
    42ac:	b7 e2       	ldi	r27, 0x27	; 39
    42ae:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    42b2:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <resis680mi>
    42b6:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <resis680mi+0x1>
    42ba:	50 e0       	ldi	r21, 0x00	; 0
    42bc:	40 e0       	ldi	r20, 0x00	; 0
    42be:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    42c2:	30 93 6d 01 	sts	0x016D, r19	; 0x80016d <ntrans+0x9>
    42c6:	20 93 6c 01 	sts	0x016C, r18	; 0x80016c <ntrans+0x8>
            ntrans.ices = (unsigned int)(((unsigned long)adc.vCEs * 10000) / RR680PL); // ICEs 0.01mA
    42ca:	2a 89       	ldd	r18, Y+18	; 0x12
    42cc:	3b 89       	ldd	r19, Y+19	; 0x13
    42ce:	a0 e1       	ldi	r26, 0x10	; 16
    42d0:	b7 e2       	ldi	r27, 0x27	; 39
    42d2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    42d6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <resis680pl>
    42da:	30 91 1c 01 	lds	r19, 0x011C	; 0x80011c <resis680pl+0x1>
    42de:	50 e0       	ldi	r21, 0x00	; 0
    42e0:	40 e0       	ldi	r20, 0x00	; 0
    42e2:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    42e6:	30 93 6f 01 	sts	0x016F, r19	; 0x80016f <ntrans+0xb>
    42ea:	20 93 6e 01 	sts	0x016E, r18	; 0x80016e <ntrans+0xa>
    42ee:	0e cf       	rjmp	.-484    	; 0x410c <CheckPins+0x98e>
         update_pins = 0;		// only update pins, if better hFE
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	a4 cf       	rjmp	.-184    	; 0x423c <CheckPins+0xabe>
         if (update_pins != 0) {
    42f4:	81 11       	cpse	r24, r1
    42f6:	d8 cf       	rjmp	.-80     	; 0x42a8 <CheckPins+0xb2a>
//---------------------------------------------------------------------------
saveNresult:
#if DebugOut == 5
 lcd_data('N');
#endif
 ntrans.count++;
    42f8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <ntrans+0xf>
    42fc:	9f 5f       	subi	r25, 0xFF	; 255
    42fe:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <ntrans+0xf>
 if (update_pins != 0) {
    4302:	88 23       	and	r24, r24
    4304:	09 f4       	brne	.+2      	; 0x4308 <CheckPins+0xb8a>
    4306:	31 c1       	rjmp	.+610    	; 0x456a <CheckPins+0xdec>
    ntrans.b = TristatePin;	// save Pin-constellation
    4308:	fd 80       	ldd	r15, Y+5	; 0x05
    430a:	f0 92 70 01 	sts	0x0170, r15	; 0x800170 <ntrans+0xc>
    ntrans.c = HighPin;
    430e:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4310:	c0 92 71 01 	sts	0x0171, r12	; 0x800171 <ntrans+0xd>
    ntrans.e = LowPin;
    4314:	10 93 72 01 	sts	0x0172, r17	; 0x800172 <ntrans+0xe>
    4318:	28 c1       	rjmp	.+592    	; 0x456a <CheckPins+0xdec>
      if((adc.lp_otr < 97) && (adc.rhp > 3400)) {
    431a:	21 e6       	ldi	r18, 0x61	; 97
    431c:	62 16       	cp	r6, r18
    431e:	71 04       	cpc	r7, r1
    4320:	08 f0       	brcs	.+2      	; 0x4324 <CheckPins+0xba6>
    4322:	67 c0       	rjmp	.+206    	; 0x43f2 <CheckPins+0xc74>
    4324:	39 e4       	ldi	r19, 0x49	; 73
    4326:	e3 16       	cp	r14, r19
    4328:	3d e0       	ldi	r19, 0x0D	; 13
    432a:	f3 06       	cpc	r15, r19
    432c:	08 f4       	brcc	.+2      	; 0x4330 <CheckPins+0xbb2>
    432e:	61 c0       	rjmp	.+194    	; 0x43f2 <CheckPins+0xc74>
         PartFound = PART_FET;	//N-Kanal-MOSFET is found (Basis/Gate will Not be pulled down)
    4330:	85 e0       	ldi	r24, 0x05	; 5
    4332:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
         PartMode = PART_MODE_MOS|N_CHANNEL|E_MODE;
    4336:	82 e0       	ldi	r24, 0x02	; 2
    4338:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
         if (adc.hp2 > (250+adc.lp2)) {
    433c:	c5 01       	movw	r24, r10
    433e:	86 50       	subi	r24, 0x06	; 6
    4340:	9f 4f       	sbci	r25, 0xFF	; 255
    4342:	8c 15       	cp	r24, r12
    4344:	9d 05       	cpc	r25, r13
    4346:	d8 f5       	brcc	.+118    	; 0x43be <CheckPins+0xc40>
            PartMode = PART_MODE_IGBT|N_CHANNEL|E_MODE;
    4348:	83 e0       	ldi	r24, 0x03	; 3
    434a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <PartMode>
         PinMSK = HiADCm & 7;
    434e:	48 a1       	ldd	r20, Y+32	; 0x20
    4350:	47 70       	andi	r20, 0x07	; 7
    4352:	d4 2e       	mov	r13, r20
         ADMUX = TristatePin | (1<<REFS0);	// measure TristatePin, Ref. VCC
    4354:	8d 81       	ldd	r24, Y+5	; 0x05
    4356:	80 64       	ori	r24, 0x40	; 64
    4358:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    435c:	8b e0       	ldi	r24, 0x0B	; 11
    435e:	89 83       	std	Y+1, r24	; 0x01
         tmp16 = 1;			// round up ((1*4)/9)
    4360:	ee 24       	eor	r14, r14
    4362:	e3 94       	inc	r14
            wdt_reset();
    4364:	f1 2c       	mov	r15, r1
            ChargePin10ms(TriPinRL,0);	// discharge Gate 10ms with RL 
    4366:	a8 95       	wdr
    4368:	60 e0       	ldi	r22, 0x00	; 0
    436a:	80 2f       	mov	r24, r16
    436c:	3d d3       	rcall	.+1658   	; 0x49e8 <ChargePin10ms>
            R_DDR = HiPinRL | TriPinRH;	// slowly charge Gate 
    436e:	54 b8       	out	0x04, r5	; 4
            R_PORT = HiPinRL | TriPinRH;
    4370:	55 b8       	out	0x05, r5	; 5
            while ((ADC_PIN&PinMSK));	// Wait, until the MOSFET switch and Drain moved to low 
    4372:	86 b1       	in	r24, 0x06	; 6
    4374:	8d 21       	and	r24, r13
    4376:	e9 f7       	brne	.-6      	; 0x4372 <CheckPins+0xbf4>
            R_DDR = HiPinRL;		// switch off current
    4378:	24 b8       	out	0x04, r2	; 4
            ADCSRA |= (1<<ADSC);		// start ADC conversion
    437a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    437e:	80 64       	ori	r24, 0x40	; 64
    4380:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
            while (ADCSRA&(1<<ADSC));	// wait until ADC finished
    4384:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    4388:	86 fd       	sbrc	r24, 6
    438a:	fc cf       	rjmp	.-8      	; 0x4384 <CheckPins+0xc06>
            tmp16 += ADCW;		// add result of ADC
    438c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    4390:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    4394:	e8 0e       	add	r14, r24
    4396:	f9 1e       	adc	r15, r25
         for(ii=0;ii<11;ii++) {
    4398:	99 81       	ldd	r25, Y+1	; 0x01
    439a:	91 50       	subi	r25, 0x01	; 1
    439c:	99 83       	std	Y+1, r25	; 0x01
    439e:	91 11       	cpse	r25, r1
    43a0:	e2 cf       	rjmp	.-60     	; 0x4366 <CheckPins+0xbe8>
         tmp16 *= 4;	//is equal to 44 * ADCW
    43a2:	c7 01       	movw	r24, r14
    43a4:	88 0f       	add	r24, r24
    43a6:	99 1f       	adc	r25, r25
    43a8:	88 0f       	add	r24, r24
    43aa:	99 1f       	adc	r25, r25
         ntrans.gthvoltage = tmp16/ 9;	//scale to mV
    43ac:	69 e0       	ldi	r22, 0x09	; 9
    43ae:	70 e0       	ldi	r23, 0x00	; 0
    43b0:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
    43b4:	70 93 6f 01 	sts	0x016F, r23	; 0x80016f <ntrans+0xb>
    43b8:	60 93 6e 01 	sts	0x016E, r22	; 0x80016e <ntrans+0xa>
    43bc:	15 cb       	rjmp	.-2518   	; 0x39e8 <CheckPins+0x26a>
            ntrans.uBE = RR680PL * (unsigned long)unsigned_diff(adc.hp2, adc.lp2) / adc.rhp; // DS resistance in 0.1 OHm
    43be:	80 90 1b 01 	lds	r8, 0x011B	; 0x80011b <resis680pl>
    43c2:	90 90 1c 01 	lds	r9, 0x011C	; 0x80011c <resis680pl+0x1>
    43c6:	b5 01       	movw	r22, r10
    43c8:	c6 01       	movw	r24, r12
    43ca:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    43ce:	94 01       	movw	r18, r8
    43d0:	dc 01       	movw	r26, r24
    43d2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    43d6:	69 83       	std	Y+1, r22	; 0x01
    43d8:	7a 83       	std	Y+2, r23	; 0x02
    43da:	8b 83       	std	Y+3, r24	; 0x03
    43dc:	9c 83       	std	Y+4, r25	; 0x04
    43de:	97 01       	movw	r18, r14
    43e0:	50 e0       	ldi	r21, 0x00	; 0
    43e2:	40 e0       	ldi	r20, 0x00	; 0
    43e4:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    43e8:	30 93 69 01 	sts	0x0169, r19	; 0x800169 <ntrans+0x5>
    43ec:	20 93 68 01 	sts	0x0168, r18	; 0x800168 <ntrans+0x4>
    43f0:	ae cf       	rjmp	.-164    	; 0x434e <CheckPins+0xbd0>
   ADC_DDR = TXD_MSK;		// switch all ADC-Ports to input
    43f2:	17 b8       	out	0x07, r1	; 7
   ADC_PORT = TXD_VAL;		// switch all ADC-Ports to 0 (no Pull up)
    43f4:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			//switch off resistor current
    43f6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;
    43f8:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = TXD_MSK;		// switch ADC ports to input
    43fa:	17 b8       	out	0x07, r1	; 7
  if (adc.lp_otr < 455) {
    43fc:	a7 ec       	ldi	r26, 0xC7	; 199
    43fe:	6a 16       	cp	r6, r26
    4400:	a1 e0       	ldi	r26, 0x01	; 1
    4402:	7a 06       	cpc	r7, r26
    4404:	08 f4       	brcc	.+2      	; 0x4408 <CheckPins+0xc8a>
    4406:	d4 c0       	rjmp	.+424    	; 0x45b0 <CheckPins+0xe32>
  ADC_PORT = TXD_VAL;
    4408:	18 b8       	out	0x08, r1	; 8
  R_DDR = HiPinRH;              // enable resistor from HiPin to ground during the upcoming discharge, so if there's some leakage in the circuit (e.g., via protection diodes) this can't upset the discharge test
    440a:	c8 8c       	ldd	r12, Y+24	; 0x18
    440c:	c4 b8       	out	0x04, r12	; 4
    440e:	68 ec       	ldi	r22, 0xC8	; 200
    4410:	f6 2e       	mov	r15, r22
     ADC_DDR = LoADCm | HiADCm; // discharge by short of Low and High side
    4412:	e8 a0       	ldd	r14, Y+32	; 0x20
    4414:	e3 28       	or	r14, r3
    4416:	e7 b8       	out	0x07, r14	; 7
     wait_about5ms();		// Low and Highpin to GND for discharge
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
     ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    441e:	37 b8       	out	0x07, r3	; 7
     adc.hp1 = ReadADC(HighPin); // read voltage at High-Pin
    4420:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4422:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
     if (adc.hp1 < (150/8)) break;
    4426:	42 97       	sbiw	r24, 0x12	; 18
    4428:	18 f0       	brcs	.+6      	; 0x4430 <CheckPins+0xcb2>
  for (ii=0;ii<200;ii++) {
    442a:	fa 94       	dec	r15
    442c:	f1 10       	cpse	r15, r1
  R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    442e:	f3 cf       	rjmp	.-26     	; 0x4416 <CheckPins+0xc98>
    4430:	d8 8c       	ldd	r13, Y+24	; 0x18
  R_PORT = HiPinRH;
    4432:	d4 b8       	out	0x04, r13	; 4
  ChargePin10ms(TriPinRL,1);	//discharge of P-Kanal-MOSFET gate
    4434:	d5 b8       	out	0x05, r13	; 5
    4436:	61 e0       	ldi	r22, 0x01	; 1
    4438:	80 2f       	mov	r24, r16
    443a:	d6 d2       	rcall	.+1452   	; 0x49e8 <ChargePin10ms>
  adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    443c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    443e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4442:	4c 01       	movw	r8, r24
  R_DDR = LoPinRH;
    4444:	ec 8c       	ldd	r14, Y+28	; 0x1c
  R_PORT = 0;
    4446:	e4 b8       	out	0x04, r14	; 4
  ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    4448:	15 b8       	out	0x05, r1	; 5
    444a:	f8 a0       	ldd	r15, Y+32	; 0x20
  ADC_PORT = HiADCp;
    444c:	f7 b8       	out	0x07, r15	; 7
  ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    444e:	f8 b8       	out	0x08, r15	; 8
    4450:	60 e0       	ldi	r22, 0x00	; 0
    4452:	80 2f       	mov	r24, r16
    4454:	c9 d2       	rcall	.+1426   	; 0x49e8 <ChargePin10ms>
  adc.hp3 = vcc_diff(W5msReadADC(LowPin)); // GND--R_H--LP--|<--VCC
    4456:	81 2f       	mov	r24, r17
    4458:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    445c:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    4460:	7c 01       	movw	r14, r24
  R_DDR = LoPinRL;
    4462:	cc 84       	ldd	r12, Y+12	; 0x0c
    4464:	c4 b8       	out	0x04, r12	; 4
  adc.hp1 = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    4466:	81 2f       	mov	r24, r17
    4468:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    446c:	6c 01       	movw	r12, r24
    446e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4470:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4474:	b6 01       	movw	r22, r12
    4476:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    447a:	6c 01       	movw	r12, r24
  adc.lp_otr = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--R_L--LP--|<--VCC
    447c:	81 2f       	mov	r24, r17
    447e:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4482:	5c 01       	movw	r10, r24
    4484:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4486:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    448a:	b5 01       	movw	r22, r10
    448c:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
  if (adc.lp_otr > (adc.hp1+20))
    4490:	96 01       	movw	r18, r12
    4492:	2c 5e       	subi	r18, 0xEC	; 236
    4494:	3f 4f       	sbci	r19, 0xFF	; 255
    4496:	28 17       	cp	r18, r24
    4498:	39 07       	cpc	r19, r25
    449a:	08 f4       	brcc	.+2      	; 0x449e <CheckPins+0xd20>
  ADC_PORT = TXD_VAL;
    449c:	66 c0       	rjmp	.+204    	; 0x456a <CheckPins+0xdec>
  ADC_DDR = LoADCm;		// switch only Low-Pin fix to GND
    449e:	18 b8       	out	0x08, r1	; 8
  R_DDR = HiPinRL;		//switch R_L port for High-Pin output (VCC)
    44a0:	37 b8       	out	0x07, r3	; 7
  R_PORT = HiPinRL;
    44a2:	24 b8       	out	0x04, r2	; 4
  ChargePin10ms(TriPinRL,1);	//discharge for P-Kanal-MOSFET gate
    44a4:	25 b8       	out	0x05, r2	; 5
    44a6:	61 e0       	ldi	r22, 0x01	; 1
    44a8:	80 2f       	mov	r24, r16
    44aa:	9e d2       	rcall	.+1340   	; 0x49e8 <ChargePin10ms>
  adc.lp_otr = unsigned_diff(W5msReadADC(HighPin), ReadADC(LowPin)); // GND--|<--HP--R_L--VCC
    44ac:	81 2f       	mov	r24, r17
    44ae:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    44b2:	5c 01       	movw	r10, r24
    44b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44b6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    44ba:	b5 01       	movw	r22, r10
    44bc:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    44c0:	5c 01       	movw	r10, r24
  if(adc.lp_otr > adc.hp1) {
    44c2:	c8 16       	cp	r12, r24
    44c4:	d9 06       	cpc	r13, r25
    44c6:	08 f0       	brcs	.+2      	; 0x44ca <CheckPins+0xd4c>
    44c8:	5b c0       	rjmp	.+182    	; 0x4580 <CheckPins+0xe02>
      R_DDR = HiPinRH;		//switch R_H port for High-Pin output (VCC)
    44ca:	d8 8c       	ldd	r13, Y+24	; 0x18
    44cc:	d4 b8       	out	0x04, r13	; 4
      R_PORT = HiPinRH;
    44ce:	d5 b8       	out	0x05, r13	; 5
      adc.hp2 = W5msReadADC(HighPin); 		// GND--|<--HP--R_H--VCC
    44d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    44d2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    44d6:	9c 01       	movw	r18, r24
      adc.hp3 = adc.hp2;
    44d8:	74 01       	movw	r14, r8
  if (volt_dif > 200) volt_dif = 200;
    44da:	e8 ec       	ldi	r30, 0xC8	; 200
    44dc:	f0 e0       	ldi	r31, 0x00	; 0
    44de:	48 e4       	ldi	r20, 0x48	; 72
    44e0:	e4 16       	cp	r14, r20
    44e2:	46 e0       	ldi	r20, 0x06	; 6
    44e4:	f4 06       	cpc	r15, r20
    44e6:	30 f4       	brcc	.+12     	; 0x44f4 <CheckPins+0xd76>
  volt_dif = adc.hp3/8;
    44e8:	f7 01       	movw	r30, r14
    44ea:	53 e0       	ldi	r21, 0x03	; 3
    44ec:	f6 95       	lsr	r31
    44ee:	e7 95       	ror	r30
    44f0:	5a 95       	dec	r21
    44f2:	e1 f7       	brne	.-8      	; 0x44ec <CheckPins+0xd6e>
  if (adc.hp1 < 1000) tmp16 = adc.hp1/100;
    44f4:	88 ee       	ldi	r24, 0xE8	; 232
    44f6:	a8 16       	cp	r10, r24
    44f8:	83 e0       	ldi	r24, 0x03	; 3
    44fa:	b8 06       	cpc	r11, r24
    44fc:	08 f0       	brcs	.+2      	; 0x4500 <CheckPins+0xd82>
    44fe:	51 c0       	rjmp	.+162    	; 0x45a2 <CheckPins+0xe24>
    4500:	c5 01       	movw	r24, r10
    4502:	64 e6       	ldi	r22, 0x64	; 100
    4504:	70 e0       	ldi	r23, 0x00	; 0
    4506:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
  if((adc.hp1 > 150) && (adc.hp1 < 4640) && (adc.hp2 < adc.hp1) && (adc.hp1 > (adc.hp3+volt_dif)) && (adc.hp3 > tmp16))
    450a:	c5 01       	movw	r24, r10
    450c:	87 59       	subi	r24, 0x97	; 151
    450e:	91 09       	sbc	r25, r1
    4510:	89 38       	cpi	r24, 0x89	; 137
    4512:	91 41       	sbci	r25, 0x11	; 17
    4514:	08 f0       	brcs	.+2      	; 0x4518 <CheckPins+0xd9a>
    4516:	4c c0       	rjmp	.+152    	; 0x45b0 <CheckPins+0xe32>
    4518:	2a 15       	cp	r18, r10
    451a:	3b 05       	cpc	r19, r11
    451c:	08 f0       	brcs	.+2      	; 0x4520 <CheckPins+0xda2>
    451e:	48 c0       	rjmp	.+144    	; 0x45b0 <CheckPins+0xe32>
    4520:	ee 0d       	add	r30, r14
    4522:	ff 1d       	adc	r31, r15
    4524:	ea 15       	cp	r30, r10
    4526:	fb 05       	cpc	r31, r11
    4528:	08 f0       	brcs	.+2      	; 0x452c <CheckPins+0xdae>
    452a:	42 c0       	rjmp	.+132    	; 0x45b0 <CheckPins+0xe32>
    452c:	6e 15       	cp	r22, r14
    452e:	7f 05       	cpc	r23, r15
    4530:	08 f0       	brcs	.+2      	; 0x4534 <CheckPins+0xdb6>
    4532:	3e c0       	rjmp	.+124    	; 0x45b0 <CheckPins+0xe32>
     if(PartFound < PART_DIODE) {
    4534:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    4538:	83 30       	cpi	r24, 0x03	; 3
    453a:	18 f4       	brcc	.+6      	; 0x4542 <CheckPins+0xdc4>
        PartFound = PART_DIODE;	//mark for diode only, if no other component is found
    453c:	83 e0       	ldi	r24, 0x03	; 3
    453e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
     diodes.Anode[NumOfDiodes] = HighPin;
    4542:	20 91 85 01 	lds	r18, 0x0185	; 0x800185 <NumOfDiodes>
    4546:	82 2f       	mov	r24, r18
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	fc 01       	movw	r30, r24
    454c:	ea 57       	subi	r30, 0x7A	; 122
    454e:	fe 4f       	sbci	r31, 0xFE	; 254
    4550:	cf 8c       	ldd	r12, Y+31	; 0x1f
    4552:	c0 82       	st	Z, r12
     diodes.Cathode[NumOfDiodes] = LowPin;
    4554:	16 83       	std	Z+6, r17	; 0x06
     diodes.Voltage[NumOfDiodes] = adc.hp1;	// voltage in Millivolt 
    4556:	88 0f       	add	r24, r24
    4558:	99 1f       	adc	r25, r25
    455a:	fc 01       	movw	r30, r24
    455c:	ee 56       	subi	r30, 0x6E	; 110
    455e:	fe 4f       	sbci	r31, 0xFE	; 254
    4560:	b1 82       	std	Z+1, r11	; 0x01
    4562:	a0 82       	st	Z, r10
     NumOfDiodes++;
    4564:	2f 5f       	subi	r18, 0xFF	; 255
    4566:	20 93 85 01 	sts	0x0185, r18	; 0x800185 <NumOfDiodes>
  ADC_DDR = TXD_MSK;		// all ADC-Pins Input
    456a:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// all ADC outputs to Ground, keine Pull up
    456c:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			// all resistor-outputs to Input
    456e:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// all resistor-outputs to Ground, no Pull up
    4570:	15 b8       	out	0x05, r1	; 5
  lcd_data('.');		// report advance (suggested by Pieter-Tjerk)
    4572:	8e e2       	ldi	r24, 0x2E	; 46
    4574:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
 }
 goto clean_ports;

} // end CheckPins()
    4578:	a0 96       	adiw	r28, 0x20	; 32
    457a:	e2 e1       	ldi	r30, 0x12	; 18
    457c:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>
      R_DDR = LoPinRH;
    4580:	2c 8d       	ldd	r18, Y+28	; 0x1c
      R_PORT = 0;
    4582:	24 b9       	out	0x04, r18	; 4
      ADC_DDR = HiADCm;		// switch High-Pin fix to VCC
    4584:	15 b8       	out	0x05, r1	; 5
    4586:	38 a1       	ldd	r19, Y+32	; 0x20
      ADC_PORT = HiADCp;
    4588:	37 b9       	out	0x07, r19	; 7
      ChargePin10ms(TriPinRL,0);	//discharge for N-Kanal-MOSFET gate
    458a:	38 b9       	out	0x08, r19	; 8
    458c:	60 e0       	ldi	r22, 0x00	; 0
    458e:	80 2f       	mov	r24, r16
    4590:	2b d2       	rcall	.+1110   	; 0x49e8 <ChargePin10ms>
      adc.hp2 = vcc_diff(W5msReadADC(LowPin)); // GND--R_H--LP--|<--VCC
    4592:	81 2f       	mov	r24, r17
    4594:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4598:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    459c:	9c 01       	movw	r18, r24
    459e:	56 01       	movw	r10, r12
  else                tmp16 = adc.hp1/16;
    45a0:	9c cf       	rjmp	.-200    	; 0x44da <CheckPins+0xd5c>
    45a2:	b5 01       	movw	r22, r10
    45a4:	44 e0       	ldi	r20, 0x04	; 4
    45a6:	76 95       	lsr	r23
    45a8:	67 95       	ror	r22
    45aa:	4a 95       	dec	r20
    45ac:	e1 f7       	brne	.-8      	; 0x45a6 <CheckPins+0xe28>
  GetResistance(HighPin, LowPin);
    45ae:	ad cf       	rjmp	.-166    	; 0x450a <CheckPins+0xd8c>
    45b0:	61 2f       	mov	r22, r17
    45b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    45b4:	01 d0       	rcall	.+2      	; 0x45b8 <GetResistance>
    45b6:	d9 cf       	rjmp	.-78     	; 0x456a <CheckPins+0xdec>

000045b8 <GetResistance>:
#include <stdlib.h>
#include "Transistortester.h"

//******************************************************************
void GetResistance(uint8_t HighPin, uint8_t LowPin)
  {
    45b8:	a6 e0       	ldi	r26, 0x06	; 6
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	e2 ee       	ldi	r30, 0xE2	; 226
    45be:	f2 e2       	ldi	r31, 0x22	; 34
    45c0:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__+0x4>
    45c4:	8d 83       	std	Y+5, r24	; 0x05
    45c6:	6e 83       	std	Y+6, r22	; 0x06
  /*
    switch HighPin directls to VCC 
    switch R_L port for LowPin to GND 
    TristatePin remains switched to input , no action required 
  */
  wdt_reset();
    45c8:	a8 95       	wdr
  addr = &PinRLRHADCtab[LowPin-TP_MIN];		// address of the combined RL / RH / ADC pin table
    45ca:	2e 81       	ldd	r18, Y+6	; 0x06
    45cc:	82 2f       	mov	r24, r18
    45ce:	90 e0       	ldi	r25, 0x00	; 0
    45d0:	fc 01       	movw	r30, r24
    45d2:	ef 5b       	subi	r30, 0xBF	; 191
    45d4:	fd 4f       	sbci	r31, 0xFD	; 253
  LoPinRL = pgm_read_byte(addr);		// instruction for LowPin R_L
    45d6:	54 90       	lpm	r5, Z
  addr += 3;			// address of PinRHtab[LowPin]
  LoPinRH = pgm_read_byte(addr);		// instruction for LowPin R_H
#else
  LoPinRH = (LoPinRL + LoPinRL);
#endif
  addr += 3;			// address of PinADCtab[LowPin]
    45d8:	33 96       	adiw	r30, 0x03	; 3
  LoADCp = pgm_read_byte(addr);		// instruction for ADC Low-Pin, including | TXD_VAL
    45da:	24 91       	lpm	r18, Z

  addr = &PinRLRHADCtab[HighPin-TP_MIN];
    45dc:	3d 81       	ldd	r19, Y+5	; 0x05
    45de:	43 2f       	mov	r20, r19
    45e0:	50 e0       	ldi	r21, 0x00	; 0
    45e2:	fa 01       	movw	r30, r20
    45e4:	ef 5b       	subi	r30, 0xBF	; 191
    45e6:	fd 4f       	sbci	r31, 0xFD	; 253
  HiPinRL = pgm_read_byte(addr);		// instruction for HighPin R_L
    45e8:	d4 90       	lpm	r13, Z
  addr += 3;			// address of PinRLtab[HighPin]
  HiPinRH = pgm_read_byte(addr);		// instruction for HighPin R_H
#else
  HiPinRH = (HiPinRL + HiPinRL);
#endif
  addr += 3;			// address of PinADCtab[HighPin]
    45ea:	33 96       	adiw	r30, 0x03	; 3
  HiADCp = pgm_read_byte(addr);		// instruction for ADC High-Pin, including | TXD_VAL
    45ec:	b4 90       	lpm	r11, Z

//##########################################################################################
// Search for resistors
//##########################################################################################
  if ((ptrans.count  + ntrans.count) > 0) {
    45ee:	60 91 83 01 	lds	r22, 0x0183	; 0x800183 <ptrans+0xf>
    45f2:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <ntrans+0xf>
    45f6:	63 0f       	add	r22, r19
    45f8:	77 27       	eor	r23, r23
    45fa:	77 1f       	adc	r23, r23
    45fc:	67 2b       	or	r22, r23
    45fe:	09 f0       	breq	.+2      	; 0x4602 <GetResistance+0x4a>
    4600:	65 c0       	rjmp	.+202    	; 0x46cc <GetResistance+0x114>
     return;	// no resistors are searched, if transistors are detected
  }
  resnum = (LowPin - TP_MIN + HighPin - TP_MIN - 1);	// resistor-Number 0:1 = 0, 0:2 = 1, 1:2 = 2
  // resistor measurement
  wdt_reset();
    4602:	a8 95       	wdr
// U_SCALE can be set to 4 for better resolution of ReadADC result
#if U_SCALE != 1
  ADCconfig.U_AVCC = (adc_vcc_reference * U_SCALE);	// scale to higher resolution, mV scale is not required
    4604:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <adc_vcc_reference>
    4608:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <adc_vcc_reference+0x1>
    460c:	66 0f       	add	r22, r22
    460e:	77 1f       	adc	r23, r23
    4610:	66 0f       	add	r22, r22
    4612:	77 1f       	adc	r23, r23
    4614:	70 93 23 01 	sts	0x0123, r23	; 0x800123 <ADCconfig+0x5>
    4618:	60 93 22 01 	sts	0x0122, r22	; 0x800122 <ADCconfig+0x4>
  ADCconfig.U_Bandgap = (adc_internal_reference * U_SCALE);
    461c:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <adc_internal_reference>
    4620:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <adc_internal_reference+0x1>
    4624:	66 0f       	add	r22, r22
    4626:	77 1f       	adc	r23, r23
    4628:	66 0f       	add	r22, r22
    462a:	77 1f       	adc	r23, r23
    462c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <ADCconfig+0x3>
    4630:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <ADCconfig+0x2>
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = R_ANZ_MESS;	// switch to special number of repetitions
    4634:	3e eb       	ldi	r19, 0xBE	; 190
    4636:	30 93 1e 01 	sts	0x011E, r19	; 0x80011e <ADCconfig>
#endif
  #define MAX_REPEAT (700 / (5 + R_ANZ_MESS/8))
#if FLASHEND > 0x1fff
  for (ii=0; ii<NumOfDiodes; ii++) {
    463a:	30 91 85 01 	lds	r19, 0x0185	; 0x800185 <NumOfDiodes>
    463e:	e6 e8       	ldi	r30, 0x86	; 134
    4640:	f1 e0       	ldi	r31, 0x01	; 1
    4642:	df 01       	movw	r26, r30
     // never search a resistor at the same place, where a diode is detected
     if ((diodes.Anode[ii] + diodes.Cathode[ii]) ==  (HighPin + LowPin)) goto testend;
    4644:	48 0f       	add	r20, r24
    4646:	59 1f       	adc	r21, r25
  for (ii=0; ii<NumOfDiodes; ii++) {
    4648:	9a 2f       	mov	r25, r26
    464a:	9e 1b       	sub	r25, r30
    464c:	93 17       	cp	r25, r19
    464e:	08 f1       	brcs	.+66     	; 0x4692 <GetResistance+0xda>
  }
#endif
  ADC_PORT = TXD_VAL;
    4650:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = LoADCp | TXD_MSK;		//switch Low-Pin to output (GND)
    4652:	27 b9       	out	0x07, r18	; 7
  R_DDR = HiPinRL;		//switch R_L port for High-Pin to output (VCC)
    4654:	d4 b8       	out	0x04, r13	; 4
  R_PORT = HiPinRL;	
    4656:	d5 b8       	out	0x05, r13	; 5
    4658:	18 e1       	ldi	r17, 0x18	; 24
    465a:	c1 2e       	mov	r12, r17
#if FLASHEND > 0x1fff
  adc.hp2 = 0;
    465c:	f1 2c       	mov	r15, r1
    465e:	e1 2c       	mov	r14, r1
  for (ii=1;ii<MAX_REPEAT;ii++) {
     // wait until voltage is stable
     adc.tp1 = W5msReadADC(LowPin);	// low-voltage at Rx with load
    4660:	8e 81       	ldd	r24, Y+6	; 0x06
    4662:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4666:	78 2e       	mov	r7, r24
    4668:	69 2e       	mov	r6, r25
     adc.hp1 = ReadADC(HighPin);		// voltage at resistor Rx with R_L
    466a:	87 01       	movw	r16, r14
    466c:	8d 81       	ldd	r24, Y+5	; 0x05
    466e:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4672:	7c 01       	movw	r14, r24
     udiff = adc.hp1 - adc.hp2;
     if (udiff < 0) udiff = -udiff;
     if (udiff < 3) break;
    4674:	80 1b       	sub	r24, r16
    4676:	91 0b       	sbc	r25, r17
    4678:	97 ff       	sbrs	r25, 7
    467a:	03 c0       	rjmp	.+6      	; 0x4682 <GetResistance+0xca>
    467c:	91 95       	neg	r25
    467e:	81 95       	neg	r24
    4680:	91 09       	sbc	r25, r1
    4682:	03 97       	sbiw	r24, 0x03	; 3
    4684:	0c f4       	brge	.+2      	; 0x4688 <GetResistance+0xd0>
    4686:	81 c1       	rjmp	.+770    	; 0x498a <GetResistance+0x3d2>
     adc.hp2 = adc.hp1;
     wdt_reset();
    4688:	a8 95       	wdr
  for (ii=1;ii<MAX_REPEAT;ii++) {
    468a:	ca 94       	dec	r12
    468c:	c1 10       	cpse	r12, r1
    468e:	e8 cf       	rjmp	.-48     	; 0x4660 <GetResistance+0xa8>
    4690:	0a c0       	rjmp	.+20     	; 0x46a6 <GetResistance+0xee>
     if ((diodes.Anode[ii] + diodes.Cathode[ii]) ==  (HighPin + LowPin)) goto testend;
    4692:	8d 91       	ld	r24, X+
    4694:	15 96       	adiw	r26, 0x05	; 5
    4696:	6c 91       	ld	r22, X
    4698:	15 97       	sbiw	r26, 0x05	; 5
    469a:	68 0f       	add	r22, r24
    469c:	77 27       	eor	r23, r23
    469e:	77 1f       	adc	r23, r23
    46a0:	64 17       	cp	r22, r20
    46a2:	75 07       	cpc	r23, r21
    46a4:	89 f6       	brne	.-94     	; 0x4648 <GetResistance+0x90>
        } // end  ResistorChecked[] != 0
     }	/* end if (PartFound < PART_TRANSISTOR) */
  }
  testend:			// end of resistor measurement
#if U_SCALE != 1
  ADCconfig.U_AVCC = adc_vcc_reference;	// scale to higher resolution, mV scale is not required
    46a6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <adc_vcc_reference>
    46aa:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <adc_vcc_reference+0x1>
    46ae:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCconfig+0x5>
    46b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADCconfig+0x4>
  ADCconfig.U_Bandgap = adc_internal_reference;	// set back to normal resolution
    46b6:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adc_internal_reference>
    46ba:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <adc_internal_reference+0x1>
    46be:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <ADCconfig+0x3>
    46c2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <ADCconfig+0x2>
#endif
#if R_ANZ_MESS != ANZ_MESS
  ADCconfig.Samples = ANZ_MESS;		// switch back to standard number of repetition
    46c6:	89 e1       	ldi	r24, 0x19	; 25
    46c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
#endif

  return;
} // end GetResistance()
    46cc:	26 96       	adiw	r28, 0x06	; 6
    46ce:	e0 e1       	ldi	r30, 0x10	; 16
    46d0:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__+0x4>
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    46d4:	85 e8       	ldi	r24, 0x85	; 133
    46d6:	c8 16       	cp	r12, r24
    46d8:	81 e0       	ldi	r24, 0x01	; 1
    46da:	d8 06       	cpc	r13, r24
    46dc:	20 f7       	brcc	.-56     	; 0x46a6 <GetResistance+0xee>
     if (adc.lp1 < (169*U_SCALE)) { // take measurement with R_H 
    46de:	04 3a       	cpi	r16, 0xA4	; 164
    46e0:	a2 e0       	ldi	r26, 0x02	; 2
    46e2:	1a 07       	cpc	r17, r26
    46e4:	08 f0       	brcs	.+2      	; 0x46e8 <GetResistance+0x130>
    46e6:	bb c0       	rjmp	.+374    	; 0x485e <GetResistance+0x2a6>
        if (adc.lp2 < (38*U_SCALE)) {
    46e8:	b8 e9       	ldi	r27, 0x98	; 152
    46ea:	ab 16       	cp	r10, r27
    46ec:	b1 04       	cpc	r11, r1
    46ee:	d8 f2       	brcs	.-74     	; 0x46a6 <GetResistance+0xee>
        lirx1 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)adc.hp2 / vcc_diff(adc.hp2);
    46f0:	c6 01       	movw	r24, r12
    46f2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    46f6:	ac 01       	movw	r20, r24
    46f8:	96 01       	movw	r18, r12
    46fa:	a8 e9       	ldi	r26, 0x98	; 152
    46fc:	b7 eb       	ldi	r27, 0xB7	; 183
    46fe:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    4702:	9a 01       	movw	r18, r20
    4704:	50 e0       	ldi	r21, 0x00	; 0
    4706:	40 e0       	ldi	r20, 0x00	; 0
    4708:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    470c:	29 01       	movw	r4, r18
    470e:	3a 01       	movw	r6, r20
        lirx2 = (unsigned long)((unsigned int)R_H_VAL) * (unsigned long)vcc_diff(adc.lp2) / adc.lp2;
    4710:	c5 01       	movw	r24, r10
    4712:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    4716:	9c 01       	movw	r18, r24
    4718:	a8 e9       	ldi	r26, 0x98	; 152
    471a:	b7 eb       	ldi	r27, 0xB7	; 183
    471c:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    4720:	95 01       	movw	r18, r10
    4722:	50 e0       	ldi	r21, 0x00	; 0
    4724:	40 e0       	ldi	r20, 0x00	; 0
    4726:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
        if (adc.hp2 < U_INT_LIMIT) {
    472a:	88 e7       	ldi	r24, 0x78	; 120
    472c:	c8 16       	cp	r12, r24
    472e:	8f e0       	ldi	r24, 0x0F	; 15
    4730:	d8 06       	cpc	r13, r24
    4732:	08 f0       	brcs	.+2      	; 0x4736 <GetResistance+0x17e>
    4734:	78 c0       	rjmp	.+240    	; 0x4826 <GetResistance+0x26e>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    4736:	a2 e0       	ldi	r26, 0x02	; 2
    4738:	44 0c       	add	r4, r4
    473a:	55 1c       	adc	r5, r5
    473c:	66 1c       	adc	r6, r6
    473e:	77 1c       	adc	r7, r7
    4740:	aa 95       	dec	r26
    4742:	d1 f7       	brne	.-12     	; 0x4738 <GetResistance+0x180>
    4744:	d3 01       	movw	r26, r6
    4746:	c2 01       	movw	r24, r4
    4748:	82 0f       	add	r24, r18
    474a:	93 1f       	adc	r25, r19
    474c:	a4 1f       	adc	r26, r20
    474e:	b5 1f       	adc	r27, r21
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    4750:	bc 01       	movw	r22, r24
    4752:	cd 01       	movw	r24, r26
    4754:	25 e0       	ldi	r18, 0x05	; 5
    4756:	30 e0       	ldi	r19, 0x00	; 0
    4758:	40 e0       	ldi	r20, 0x00	; 0
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
        lrx1 *= 100;
    4760:	a4 e6       	ldi	r26, 0x64	; 100
    4762:	b0 e0       	ldi	r27, 0x00	; 0
    4764:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    4768:	69 83       	std	Y+1, r22	; 0x01
    476a:	7a 83       	std	Y+2, r23	; 0x02
    476c:	8b 83       	std	Y+3, r24	; 0x03
    476e:	9c 83       	std	Y+4, r25	; 0x04
        lrx1 += RH_OFFSET;			// add constant for correction of systematic error
    4770:	6b 01       	movw	r12, r22
    4772:	7c 01       	movw	r14, r24
    4774:	9c ea       	ldi	r25, 0xAC	; 172
    4776:	c9 0e       	add	r12, r25
    4778:	9d e0       	ldi	r25, 0x0D	; 13
    477a:	d9 1e       	adc	r13, r25
    477c:	e1 1c       	adc	r14, r1
    477e:	f1 1c       	adc	r15, r1
     if(PartFound < PART_TRANSISTOR) {
    4780:	10 91 2f 01 	lds	r17, 0x012F	; 0x80012f <PartFound>
    4784:	14 30       	cpi	r17, 0x04	; 4
    4786:	08 f0       	brcs	.+2      	; 0x478a <GetResistance+0x1d2>
    4788:	8e cf       	rjmp	.-228    	; 0x46a6 <GetResistance+0xee>
  resnum = (LowPin - TP_MIN + HighPin - TP_MIN - 1);	// resistor-Number 0:1 = 0, 0:2 = 1, 1:2 = 2
    478a:	9d 81       	ldd	r25, Y+5	; 0x05
    478c:	91 50       	subi	r25, 0x01	; 1
    478e:	ae 81       	ldd	r26, Y+6	; 0x06
    4790:	a9 0f       	add	r26, r25
    4792:	ad 83       	std	Y+5, r26	; 0x05
        if (ResistorChecked[resnum] != 0) {
    4794:	2a 2f       	mov	r18, r26
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	f9 01       	movw	r30, r18
    479a:	ec 55       	subi	r30, 0x5C	; 92
    479c:	fe 4f       	sbci	r31, 0xFE	; 254
    479e:	80 81       	ld	r24, Z
    47a0:	22 0f       	add	r18, r18
    47a2:	33 1f       	adc	r19, r19
    47a4:	22 0f       	add	r18, r18
    47a6:	33 1f       	adc	r19, r19
           lirx1 = (labs((long)lrx1 - (long)ResistorVal[resnum]) * 10) / (lrx1 + ResistorVal[resnum] + 100);
    47a8:	26 55       	subi	r18, 0x56	; 86
    47aa:	3e 4f       	sbci	r19, 0xFE	; 254
    47ac:	d9 01       	movw	r26, r18
        if (ResistorChecked[resnum] != 0) {
    47ae:	88 23       	and	r24, r24
    47b0:	09 f4       	brne	.+2      	; 0x47b4 <GetResistance+0x1fc>
    47b2:	d0 c0       	rjmp	.+416    	; 0x4954 <GetResistance+0x39c>
           lirx1 = (labs((long)lrx1 - (long)ResistorVal[resnum]) * 10) / (lrx1 + ResistorVal[resnum] + 100);
    47b4:	8d 90       	ld	r8, X+
    47b6:	9d 90       	ld	r9, X+
    47b8:	ad 90       	ld	r10, X+
    47ba:	bc 90       	ld	r11, X
    47bc:	a7 01       	movw	r20, r14
    47be:	96 01       	movw	r18, r12
    47c0:	28 19       	sub	r18, r8
    47c2:	39 09       	sbc	r19, r9
    47c4:	4a 09       	sbc	r20, r10
    47c6:	5b 09       	sbc	r21, r11
    47c8:	57 ff       	sbrs	r21, 7
    47ca:	07 c0       	rjmp	.+14     	; 0x47da <GetResistance+0x222>
    47cc:	50 95       	com	r21
    47ce:	40 95       	com	r20
    47d0:	30 95       	com	r19
    47d2:	21 95       	neg	r18
    47d4:	3f 4f       	sbci	r19, 0xFF	; 255
    47d6:	4f 4f       	sbci	r20, 0xFF	; 255
    47d8:	5f 4f       	sbci	r21, 0xFF	; 255
    47da:	aa e0       	ldi	r26, 0x0A	; 10
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    47e2:	b4 e6       	ldi	r27, 0x64	; 100
    47e4:	8b 0e       	add	r8, r27
    47e6:	91 1c       	adc	r9, r1
    47e8:	a1 1c       	adc	r10, r1
    47ea:	b1 1c       	adc	r11, r1
    47ec:	c8 0c       	add	r12, r8
    47ee:	d9 1c       	adc	r13, r9
    47f0:	ea 1c       	adc	r14, r10
    47f2:	fb 1c       	adc	r15, r11
           if (lirx1  > 0) {
    47f4:	6c 15       	cp	r22, r12
    47f6:	7d 05       	cpc	r23, r13
    47f8:	8e 05       	cpc	r24, r14
    47fa:	9f 05       	cpc	r25, r15
    47fc:	08 f0       	brcs	.+2      	; 0x4800 <GetResistance+0x248>
    47fe:	53 cf       	rjmp	.-346    	; 0x46a6 <GetResistance+0xee>
              if (PartFound < PART_DIODE) {
    4800:	13 30       	cpi	r17, 0x03	; 3
    4802:	19 f0       	breq	.+6      	; 0x480a <GetResistance+0x252>
                 PartFound = PART_RESISTOR;	// only mark as resistor, if no other part found
    4804:	81 e0       	ldi	r24, 0x01	; 1
    4806:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
              ResistorChecked[resnum] = 2;		// mark as checked in both direction
    480a:	82 e0       	ldi	r24, 0x02	; 2
    480c:	80 83       	st	Z, r24
              ResistorList[ResistorsFound] = resnum;	// save number of this resistor
    480e:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    4812:	e8 2f       	mov	r30, r24
    4814:	f0 e0       	ldi	r31, 0x00	; 0
    4816:	e9 55       	subi	r30, 0x59	; 89
    4818:	fe 4f       	sbci	r31, 0xFE	; 254
    481a:	2d 81       	ldd	r18, Y+5	; 0x05
    481c:	20 83       	st	Z, r18
              ResistorsFound++;			// 1 more resistor found
    481e:	8f 5f       	subi	r24, 0xFF	; 255
    4820:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <ResistorsFound>
    4824:	40 cf       	rjmp	.-384    	; 0x46a6 <GetResistance+0xee>
        } else if (adc.lp2 < U_INT_LIMIT){
    4826:	98 e7       	ldi	r25, 0x78	; 120
    4828:	a9 16       	cp	r10, r25
    482a:	9f e0       	ldi	r25, 0x0F	; 15
    482c:	b9 06       	cpc	r11, r25
    482e:	70 f4       	brcc	.+28     	; 0x484c <GetResistance+0x294>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_H measurements
    4830:	f2 e0       	ldi	r31, 0x02	; 2
    4832:	22 0f       	add	r18, r18
    4834:	33 1f       	adc	r19, r19
    4836:	44 1f       	adc	r20, r20
    4838:	55 1f       	adc	r21, r21
    483a:	fa 95       	dec	r31
    483c:	d1 f7       	brne	.-12     	; 0x4832 <GetResistance+0x27a>
    483e:	da 01       	movw	r26, r20
    4840:	c9 01       	movw	r24, r18
    4842:	84 0d       	add	r24, r4
    4844:	95 1d       	adc	r25, r5
    4846:	a6 1d       	adc	r26, r6
    4848:	b7 1d       	adc	r27, r7
    484a:	82 cf       	rjmp	.-252    	; 0x4750 <GetResistance+0x198>
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_H measurements
    484c:	24 0d       	add	r18, r4
    484e:	35 1d       	adc	r19, r5
    4850:	46 1d       	adc	r20, r6
    4852:	57 1d       	adc	r21, r7
    4854:	56 95       	lsr	r21
    4856:	47 95       	ror	r20
    4858:	37 95       	ror	r19
    485a:	27 95       	ror	r18
    485c:	81 cf       	rjmp	.-254    	; 0x4760 <GetResistance+0x1a8>
        lirx1 =(unsigned long)RR680PL * (unsigned long)unsigned_diff(adc.hp1, adc.tp1) / vcc_diff(adc.hp1);
    485e:	c0 90 1b 01 	lds	r12, 0x011B	; 0x80011b <resis680pl>
    4862:	d0 90 1c 01 	lds	r13, 0x011C	; 0x80011c <resis680pl+0x1>
    4866:	67 2d       	mov	r22, r7
    4868:	76 2d       	mov	r23, r6
    486a:	e6 16       	cp	r14, r22
    486c:	f7 06       	cpc	r15, r23
    486e:	08 f4       	brcc	.+2      	; 0x4872 <GetResistance+0x2ba>
    4870:	b7 01       	movw	r22, r14
    4872:	c7 01       	movw	r24, r14
    4874:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    4878:	96 01       	movw	r18, r12
    487a:	dc 01       	movw	r26, r24
    487c:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    4880:	69 83       	std	Y+1, r22	; 0x01
    4882:	7a 83       	std	Y+2, r23	; 0x02
    4884:	8b 83       	std	Y+3, r24	; 0x03
    4886:	9c 83       	std	Y+4, r25	; 0x04
    4888:	c7 01       	movw	r24, r14
    488a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    488e:	9c 01       	movw	r18, r24
    4890:	50 e0       	ldi	r21, 0x00	; 0
    4892:	40 e0       	ldi	r20, 0x00	; 0
    4894:	69 81       	ldd	r22, Y+1	; 0x01
    4896:	7a 81       	ldd	r23, Y+2	; 0x02
    4898:	8b 81       	ldd	r24, Y+3	; 0x03
    489a:	9c 81       	ldd	r25, Y+4	; 0x04
    489c:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    48a0:	29 01       	movw	r4, r18
    48a2:	3a 01       	movw	r6, r20
        lirx2 =(unsigned long)RR680MI * (unsigned long)unsigned_diff(adc.tp2, adc.lp1) / adc.lp1;
    48a4:	a0 90 19 01 	lds	r10, 0x0119	; 0x800119 <resis680mi>
    48a8:	b0 90 1a 01 	lds	r11, 0x011A	; 0x80011a <resis680mi+0x1>
    48ac:	89 2d       	mov	r24, r9
    48ae:	98 2d       	mov	r25, r8
    48b0:	80 17       	cp	r24, r16
    48b2:	91 07       	cpc	r25, r17
    48b4:	08 f4       	brcc	.+2      	; 0x48b8 <GetResistance+0x300>
    48b6:	c8 01       	movw	r24, r16
    48b8:	b8 01       	movw	r22, r16
    48ba:	0e 94 56 08 	call	0x10ac	; 0x10ac <unsigned_diff>
    48be:	95 01       	movw	r18, r10
    48c0:	dc 01       	movw	r26, r24
    48c2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    48c6:	69 83       	std	Y+1, r22	; 0x01
    48c8:	7a 83       	std	Y+2, r23	; 0x02
    48ca:	8b 83       	std	Y+3, r24	; 0x03
    48cc:	9c 83       	std	Y+4, r25	; 0x04
    48ce:	98 01       	movw	r18, r16
    48d0:	50 e0       	ldi	r21, 0x00	; 0
    48d2:	40 e0       	ldi	r20, 0x00	; 0
    48d4:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
        if (adc.hp1 < U_INT_LIMIT) {
    48d8:	a8 e7       	ldi	r26, 0x78	; 120
    48da:	ea 16       	cp	r14, r26
    48dc:	af e0       	ldi	r26, 0x0F	; 15
    48de:	fa 06       	cpc	r15, r26
    48e0:	e0 f4       	brcc	.+56     	; 0x491a <GetResistance+0x362>
           lrx1 = (lirx1*FAKT_LOW + lirx2) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    48e2:	72 e0       	ldi	r23, 0x02	; 2
    48e4:	44 0c       	add	r4, r4
    48e6:	55 1c       	adc	r5, r5
    48e8:	66 1c       	adc	r6, r6
    48ea:	77 1c       	adc	r7, r7
    48ec:	7a 95       	dec	r23
    48ee:	d1 f7       	brne	.-12     	; 0x48e4 <GetResistance+0x32c>
    48f0:	d3 01       	movw	r26, r6
    48f2:	c2 01       	movw	r24, r4
    48f4:	82 0f       	add	r24, r18
    48f6:	93 1f       	adc	r25, r19
    48f8:	a4 1f       	adc	r26, r20
    48fa:	b5 1f       	adc	r27, r21
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    48fc:	89 83       	std	Y+1, r24	; 0x01
    48fe:	9a 83       	std	Y+2, r25	; 0x02
    4900:	ab 83       	std	Y+3, r26	; 0x03
    4902:	bc 83       	std	Y+4, r27	; 0x04
    4904:	bc 01       	movw	r22, r24
    4906:	cd 01       	movw	r24, r26
    4908:	25 e0       	ldi	r18, 0x05	; 5
    490a:	30 e0       	ldi	r19, 0x00	; 0
    490c:	40 e0       	ldi	r20, 0x00	; 0
    490e:	50 e0       	ldi	r21, 0x00	; 0
    4910:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4914:	69 01       	movw	r12, r18
    4916:	7a 01       	movw	r14, r20
    4918:	33 cf       	rjmp	.-410    	; 0x4780 <GetResistance+0x1c8>
        } else if (adc.lp1 < U_INT_LIMIT) {
    491a:	08 37       	cpi	r16, 0x78	; 120
    491c:	9f e0       	ldi	r25, 0x0F	; 15
    491e:	19 07       	cpc	r17, r25
    4920:	70 f4       	brcc	.+28     	; 0x493e <GetResistance+0x386>
           lrx1 = (lirx2*FAKT_LOW + lirx1) / (FAKT_LOW+1);	//weighted average of both R_L measurements
    4922:	62 e0       	ldi	r22, 0x02	; 2
    4924:	22 0f       	add	r18, r18
    4926:	33 1f       	adc	r19, r19
    4928:	44 1f       	adc	r20, r20
    492a:	55 1f       	adc	r21, r21
    492c:	6a 95       	dec	r22
    492e:	d1 f7       	brne	.-12     	; 0x4924 <GetResistance+0x36c>
    4930:	da 01       	movw	r26, r20
    4932:	c9 01       	movw	r24, r18
    4934:	84 0d       	add	r24, r4
    4936:	95 1d       	adc	r25, r5
    4938:	a6 1d       	adc	r26, r6
    493a:	b7 1d       	adc	r27, r7
    493c:	df cf       	rjmp	.-66     	; 0x48fc <GetResistance+0x344>
           lrx1 = (lirx1 + lirx2) / 2;		//average of both R_L measurements
    493e:	73 01       	movw	r14, r6
    4940:	62 01       	movw	r12, r4
    4942:	c2 0e       	add	r12, r18
    4944:	d3 1e       	adc	r13, r19
    4946:	e4 1e       	adc	r14, r20
    4948:	f5 1e       	adc	r15, r21
    494a:	f6 94       	lsr	r15
    494c:	e7 94       	ror	r14
    494e:	d7 94       	ror	r13
    4950:	c7 94       	ror	r12
    4952:	16 cf       	rjmp	.-468    	; 0x4780 <GetResistance+0x1c8>
           ResistorVal[resnum] = lrx1;	// save register value
    4954:	cd 92       	st	X+, r12
    4956:	dd 92       	st	X+, r13
    4958:	ed 92       	st	X+, r14
    495a:	fc 92       	st	X, r15
    495c:	13 97       	sbiw	r26, 0x03	; 3
           ResistorChecked[resnum] = 1;		// is checked in one direction
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	80 83       	st	Z, r24
    4962:	a1 ce       	rjmp	.-702    	; 0x46a6 <GetResistance+0xee>
  LoPinRH = (LoPinRL + LoPinRL);
    4964:	55 0c       	add	r5, r5
  R_DDR = LoPinRH;			//switch R_H for Low-Pin to GND
    4966:	54 b8       	out	0x04, r5	; 4
  adc.lp2 = W5msReadADC(LowPin);
    4968:	8e 81       	ldd	r24, Y+6	; 0x06
    496a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    496e:	5c 01       	movw	r10, r24
  if((adc.hp1 < (4400*U_SCALE)) && (adc.hp2 > (97*U_SCALE))) {
    4970:	b0 ec       	ldi	r27, 0xC0	; 192
    4972:	eb 16       	cp	r14, r27
    4974:	b4 e4       	ldi	r27, 0x44	; 68
    4976:	fb 06       	cpc	r15, r27
    4978:	08 f4       	brcc	.+2      	; 0x497c <GetResistance+0x3c4>
    497a:	ac ce       	rjmp	.-680    	; 0x46d4 <GetResistance+0x11c>
  if (adc.hp2 < (4972*U_SCALE)) { 
    497c:	90 eb       	ldi	r25, 0xB0	; 176
    497e:	c9 16       	cp	r12, r25
    4980:	9d e4       	ldi	r25, 0x4D	; 77
    4982:	d9 06       	cpc	r13, r25
    4984:	08 f0       	brcs	.+2      	; 0x4988 <GetResistance+0x3d0>
    4986:	8f ce       	rjmp	.-738    	; 0x46a6 <GetResistance+0xee>
    4988:	aa ce       	rjmp	.-684    	; 0x46de <GetResistance+0x126>
  HiPinRH = (HiPinRL + HiPinRL);
    498a:	dd 0c       	add	r13, r13
  R_PORT = 0;
    498c:	15 b8       	out	0x05, r1	; 5
  R_DDR = HiPinRH;		//switch R_H port for High-Pin to output (GND)
    498e:	d4 b8       	out	0x04, r13	; 4
  adc.hp2 = W5msReadADC(HighPin);	// read voltage, should be down
    4990:	8d 81       	ldd	r24, Y+5	; 0x05
    4992:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
  if (adc.hp2 > (20*U_SCALE)) {
    4996:	81 35       	cpi	r24, 0x51	; 81
    4998:	91 05       	cpc	r25, r1
    499a:	08 f0       	brcs	.+2      	; 0x499e <GetResistance+0x3e6>
    499c:	84 ce       	rjmp	.-760    	; 0x46a6 <GetResistance+0xee>
  R_PORT = HiPinRH;		//switch R_H for High-Pin to VCC
    499e:	d5 b8       	out	0x05, r13	; 5
  adc.hp2 = W5msReadADC(HighPin);	// voltage at resistor Rx with R_H
    49a0:	8d 81       	ldd	r24, Y+5	; 0x05
    49a2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    49a6:	6c 01       	movw	r12, r24
  ADC_DDR = HiADCp | TXD_MSK;		//switch High-Pin to output
    49a8:	b7 b8       	out	0x07, r11	; 7
  ADC_PORT = HiADCp;		//switch High-Pin to VCC
    49aa:	b8 b8       	out	0x08, r11	; 8
  R_PORT = 0;
    49ac:	15 b8       	out	0x05, r1	; 5
  R_DDR = LoPinRL;			//switch R_L for Low-Pin to GND
    49ae:	54 b8       	out	0x04, r5	; 4
    49b0:	b8 e1       	ldi	r27, 0x18	; 24
    49b2:	4b 2e       	mov	r4, r27
  adc.lp2 = 0;
    49b4:	10 e0       	ldi	r17, 0x00	; 0
    49b6:	00 e0       	ldi	r16, 0x00	; 0
     adc.tp2 = W5msReadADC(HighPin);	//high voltage with load
    49b8:	8d 81       	ldd	r24, Y+5	; 0x05
    49ba:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    49be:	98 2e       	mov	r9, r24
    49c0:	89 2e       	mov	r8, r25
     adc.lp1 = ReadADC(LowPin);		//voltage at the other end of Rx
    49c2:	58 01       	movw	r10, r16
    49c4:	8e 81       	ldd	r24, Y+6	; 0x06
    49c6:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    49ca:	8c 01       	movw	r16, r24
     if (udiff < 3) break;
    49cc:	8a 19       	sub	r24, r10
    49ce:	9b 09       	sbc	r25, r11
    49d0:	97 ff       	sbrs	r25, 7
    49d2:	03 c0       	rjmp	.+6      	; 0x49da <GetResistance+0x422>
    49d4:	91 95       	neg	r25
    49d6:	81 95       	neg	r24
    49d8:	91 09       	sbc	r25, r1
    49da:	03 97       	sbiw	r24, 0x03	; 3
    49dc:	1c f2       	brlt	.-122    	; 0x4964 <GetResistance+0x3ac>
     wdt_reset();
    49de:	a8 95       	wdr
  for (ii=1;ii<MAX_REPEAT;ii++) {
    49e0:	4a 94       	dec	r4
    49e2:	41 10       	cpse	r4, r1
    49e4:	e9 cf       	rjmp	.-46     	; 0x49b8 <GetResistance+0x400>
    49e6:	5f ce       	rjmp	.-834    	; 0x46a6 <GetResistance+0xee>

000049e8 <ChargePin10ms>:
#include "Transistortester.h"


//******************************************************************

void ChargePin10ms(uint8_t PinToCharge, uint8_t ChargeDirection) {
    49e8:	cf 93       	push	r28
   //ChargeDirection: 0 = switch to GND (N-Kanal-FET), 1= switch to VCC(P-Kanal-FET)

   if(ChargeDirection&1) {
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
   } else {
      R_PORT &= ~PinToCharge; // or 0 (GND)
    49ea:	c8 2f       	mov	r28, r24
    49ec:	c0 95       	com	r28
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    49ee:	95 b1       	in	r25, 0x05	; 5
   if(ChargeDirection&1) {
    49f0:	60 ff       	sbrs	r22, 0
    49f2:	10 c0       	rjmp	.+32     	; 0x4a14 <ChargePin10ms+0x2c>
      R_PORT |= PinToCharge;	//R_PORT to 1 (VCC) 
    49f4:	98 2b       	or	r25, r24
      R_PORT &= ~PinToCharge; // or 0 (GND)
    49f6:	95 b9       	out	0x05, r25	; 5
   }
   R_DDR |= PinToCharge;		//switch Pin to output, across R to GND or VCC
    49f8:	94 b1       	in	r25, 0x04	; 4
    49fa:	89 2b       	or	r24, r25
    49fc:	84 b9       	out	0x04, r24	; 4
   wait_about10ms();			// wait about 10ms
    49fe:	82 e0       	ldi	r24, 0x02	; 2
    4a00:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
   // switch back Input, no current
   R_DDR &= ~PinToCharge;	// switch back to input
    4a04:	84 b1       	in	r24, 0x04	; 4
    4a06:	8c 23       	and	r24, r28
    4a08:	84 b9       	out	0x04, r24	; 4
   R_PORT &= ~PinToCharge;	// no Pull up
    4a0a:	85 b1       	in	r24, 0x05	; 5
    4a0c:	8c 23       	and	r24, r28
    4a0e:	85 b9       	out	0x05, r24	; 5
}
    4a10:	cf 91       	pop	r28
    4a12:	08 95       	ret
      R_PORT &= ~PinToCharge; // or 0 (GND)
    4a14:	9c 23       	and	r25, r28
    4a16:	ef cf       	rjmp	.-34     	; 0x49f6 <ChargePin10ms+0xe>

00004a18 <EntladePins>:
#include <avr/pgmspace.h>
#include "Transistortester.h"


// first discharge any charge of capacitors
void EntladePins() {
    4a18:	b0 e0       	ldi	r27, 0x00	; 0
    4a1a:	a0 e0       	ldi	r26, 0x00	; 0
    4a1c:	e2 e1       	ldi	r30, 0x12	; 18
    4a1e:	f5 e2       	ldi	r31, 0x25	; 37
    4a20:	0c 94 dc 3d 	jmp	0x7bb8	; 0x7bb8 <__prologue_saves__+0x12>
    4a24:	8a e0       	ldi	r24, 0x0A	; 10
    4a26:	d8 2e       	mov	r13, r24
     adc_gnd = TXD_MSK;		// put all ADC to Input
     ADC_DDR = adc_gnd;
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
     R_PORT = 0;			// R-outputs auf 0
//     R_DDR = (1<<PIN_RH3) | (1<<PIN_RH2) | (1<<PIN_RH1); // R_H for all Pins to GND
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    4a28:	9f e3       	ldi	r25, 0x3F	; 63
    4a2a:	b9 2e       	mov	r11, r25
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
           break;
        }
     }
     if (clr_cnt == MAX_ENTLADE_ZEIT) {
        PartFound = PART_CELL;	// mark as Battery
    4a2c:	29 e0       	ldi	r18, 0x09	; 9
    4a2e:	c2 2e       	mov	r12, r18
     ADC_DDR = adc_gnd;
    4a30:	17 b8       	out	0x07, r1	; 7
     ADC_PORT = TXD_VAL;		// ADC-outputs auf 0
    4a32:	18 b8       	out	0x08, r1	; 8
     R_PORT = 0;			// R-outputs auf 0
    4a34:	15 b8       	out	0x05, r1	; 5
     R_DDR = (1<<PIN_RH3) | (1<<PIN_RL3) | (1<<PIN_RH2) | (1<<PIN_RL2) | (1<<PIN_RH1) | (1<<PIN_RL1); // R_H and R_L for all Pins to GND
    4a36:	b4 b8       	out	0x04, r11	; 4
     adcmv[0] = W5msReadADC(TP1);	// which voltage has Pin 1?
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    4a3e:	8c 01       	movw	r16, r24
     adcmv[1] = ReadADC(TP2);	// which voltage has Pin 2?
    4a40:	81 e0       	ldi	r24, 0x01	; 1
    4a42:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4a46:	ec 01       	movw	r28, r24
     adcmv[2] = ReadADC(TP3);	// which voltage has Pin 3?
    4a48:	82 e0       	ldi	r24, 0x02	; 2
    4a4a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4a4e:	9c 01       	movw	r18, r24
     if ((PartFound == PART_CELL) || ((adcmv[0] < CAP_EMPTY_LEVEL) && (adcmv[1] < CAP_EMPTY_LEVEL) && (adcmv[2] < CAP_EMPTY_LEVEL))) {
    4a50:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    4a54:	89 30       	cpi	r24, 0x09	; 9
    4a56:	99 f4       	brne	.+38     	; 0x4a7e <EntladePins+0x66>
        ADC_DDR = TXD_MSK;		// switch all ADC-Pins to input
    4a58:	17 b8       	out	0x07, r1	; 7
        R_DDR = 0;			// switch all R_L Ports (and R_H) to input
    4a5a:	14 b8       	out	0x04, r1	; 4
        cell_mv[0] = adcmv[0];		// save the voltage of pin 1
    4a5c:	10 93 37 01 	sts	0x0137, r17	; 0x800137 <cell_mv+0x1>
    4a60:	00 93 36 01 	sts	0x0136, r16	; 0x800136 <cell_mv>
        cell_mv[1] = adcmv[1];		// save the voltage of pin 2
    4a64:	d0 93 39 01 	sts	0x0139, r29	; 0x800139 <cell_mv+0x3>
    4a68:	c0 93 38 01 	sts	0x0138, r28	; 0x800138 <cell_mv+0x2>
        cell_mv[2] = adcmv[2];		// save the voltage of pin 3
    4a6c:	30 93 3b 01 	sts	0x013B, r19	; 0x80013b <cell_mv+0x5>
    4a70:	20 93 3a 01 	sts	0x013A, r18	; 0x80013a <cell_mv+0x4>
     }
  } // end for lop_cnt
#if DebugOut == 99
  uart_putc('x');		//Debug
#endif
 }
    4a74:	cd b7       	in	r28, 0x3d	; 61
    4a76:	de b7       	in	r29, 0x3e	; 62
    4a78:	e9 e0       	ldi	r30, 0x09	; 9
    4a7a:	0c 94 f8 3d 	jmp	0x7bf0	; 0x7bf0 <__epilogue_restores__+0x12>
     if ((PartFound == PART_CELL) || ((adcmv[0] < CAP_EMPTY_LEVEL) && (adcmv[1] < CAP_EMPTY_LEVEL) && (adcmv[2] < CAP_EMPTY_LEVEL))) {
    4a7e:	04 30       	cpi	r16, 0x04	; 4
    4a80:	11 05       	cpc	r17, r1
    4a82:	50 f4       	brcc	.+20     	; 0x4a98 <EntladePins+0x80>
    4a84:	c4 30       	cpi	r28, 0x04	; 4
    4a86:	d1 05       	cpc	r29, r1
    4a88:	08 f0       	brcs	.+2      	; 0x4a8c <EntladePins+0x74>
    4a8a:	4c c0       	rjmp	.+152    	; 0x4b24 <EntladePins+0x10c>
    4a8c:	24 30       	cpi	r18, 0x04	; 4
    4a8e:	31 05       	cpc	r19, r1
    4a90:	18 f3       	brcs	.-58     	; 0x4a58 <EntladePins+0x40>
        adc_gnd |= (1<<TP1);	//Pin 1 directly to GND
    4a92:	81 e0       	ldi	r24, 0x01	; 1
        adc_gnd |= (1<<TP2);	//Pin 2 directly to GND
    4a94:	82 60       	ori	r24, 0x02	; 2
    4a96:	08 c0       	rjmp	.+16     	; 0x4aa8 <EntladePins+0x90>
     if (adcmv[0] < 1000) {
    4a98:	81 e0       	ldi	r24, 0x01	; 1
    4a9a:	08 3e       	cpi	r16, 0xE8	; 232
    4a9c:	13 40       	sbci	r17, 0x03	; 3
    4a9e:	08 f0       	brcs	.+2      	; 0x4aa2 <EntladePins+0x8a>
    4aa0:	80 e0       	ldi	r24, 0x00	; 0
     if (adcmv[1] < 1000) {
    4aa2:	c8 3e       	cpi	r28, 0xE8	; 232
    4aa4:	d3 40       	sbci	r29, 0x03	; 3
    4aa6:	b0 f3       	brcs	.-20     	; 0x4a94 <EntladePins+0x7c>
     if (adcmv[2] < 1000) {
    4aa8:	28 3e       	cpi	r18, 0xE8	; 232
    4aaa:	33 40       	sbci	r19, 0x03	; 3
    4aac:	08 f4       	brcc	.+2      	; 0x4ab0 <EntladePins+0x98>
        adc_gnd |= (1<<TP3);	//Pin 3 directly to  GND
    4aae:	84 60       	ori	r24, 0x04	; 4
     ADC_DDR = adc_gnd;		// switch all selected ADC-Ports at the same time
    4ab0:	87 b9       	out	0x07, r24	; 7
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    4ab2:	d0 e0       	ldi	r29, 0x00	; 0
    4ab4:	c0 e0       	ldi	r28, 0x00	; 0
        wdt_reset();
    4ab6:	a8 95       	wdr
        adcmv[0] = W20msReadADC(TP1);	// which voltage has Pin 1?
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <W20msReadADC>
    4abe:	7c 01       	movw	r14, r24
        adcmv[1] = ReadADC(TP2);	// which voltage has Pin 2?
    4ac0:	81 e0       	ldi	r24, 0x01	; 1
    4ac2:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4ac6:	8c 01       	movw	r16, r24
        adcmv[2] = ReadADC(TP3);	// which voltage has Pin 3?
    4ac8:	82 e0       	ldi	r24, 0x02	; 2
    4aca:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4ace:	9c 01       	movw	r18, r24
        if (adcmv[0] < 1300) {
    4ad0:	84 e1       	ldi	r24, 0x14	; 20
    4ad2:	e8 16       	cp	r14, r24
    4ad4:	85 e0       	ldi	r24, 0x05	; 5
    4ad6:	f8 06       	cpc	r15, r24
    4ad8:	08 f4       	brcc	.+2      	; 0x4adc <EntladePins+0xc4>
           ADC_DDR |= (1<<TP1);	// below 1.3V , switch directly with ADC-Port to GND
    4ada:	38 9a       	sbi	0x07, 0	; 7
        if (adcmv[1] < 1300) {
    4adc:	04 31       	cpi	r16, 0x14	; 20
    4ade:	95 e0       	ldi	r25, 0x05	; 5
    4ae0:	19 07       	cpc	r17, r25
    4ae2:	08 f4       	brcc	.+2      	; 0x4ae6 <EntladePins+0xce>
           ADC_DDR |= (1<<TP2);	// below 1.3V, switch directly with ADC-Port to GND
    4ae4:	39 9a       	sbi	0x07, 1	; 7
        if (adcmv[2] < 1300) {
    4ae6:	24 31       	cpi	r18, 0x14	; 20
    4ae8:	85 e0       	ldi	r24, 0x05	; 5
    4aea:	38 07       	cpc	r19, r24
    4aec:	08 f4       	brcc	.+2      	; 0x4af0 <EntladePins+0xd8>
           ADC_DDR |= (1<<TP3);	// below 1.3V, switch directly with ADC-Port to GND
    4aee:	3a 9a       	sbi	0x07, 2	; 7
        if ((adcmv[0] < (CAP_EMPTY_LEVEL+2)) && (adcmv[1] < (CAP_EMPTY_LEVEL+2)) && (adcmv[2] < (CAP_EMPTY_LEVEL+2))) {
    4af0:	96 e0       	ldi	r25, 0x06	; 6
    4af2:	e9 16       	cp	r14, r25
    4af4:	f1 04       	cpc	r15, r1
    4af6:	30 f4       	brcc	.+12     	; 0x4b04 <EntladePins+0xec>
    4af8:	06 30       	cpi	r16, 0x06	; 6
    4afa:	11 05       	cpc	r17, r1
    4afc:	18 f4       	brcc	.+6      	; 0x4b04 <EntladePins+0xec>
    4afe:	26 30       	cpi	r18, 0x06	; 6
    4b00:	31 05       	cpc	r19, r1
    4b02:	38 f0       	brcs	.+14     	; 0x4b12 <EntladePins+0xfa>
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    4b04:	21 96       	adiw	r28, 0x01	; 1
    4b06:	c4 3f       	cpi	r28, 0xF4	; 244
    4b08:	81 e0       	ldi	r24, 0x01	; 1
    4b0a:	d8 07       	cpc	r29, r24
    4b0c:	a1 f6       	brne	.-88     	; 0x4ab6 <EntladePins+0x9e>
        PartFound = PART_CELL;	// mark as Battery
    4b0e:	c0 92 2f 01 	sts	0x012F, r12	; 0x80012f <PartFound>
     for(clr_cnt=0;clr_cnt<MAX_ENTLADE_ZEIT;clr_cnt++) {
    4b12:	10 e0       	ldi	r17, 0x00	; 0
    4b14:	00 e0       	ldi	r16, 0x00	; 0
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    4b16:	0c 17       	cp	r16, r28
    4b18:	1d 07       	cpc	r17, r29
    4b1a:	31 f4       	brne	.+12     	; 0x4b28 <EntladePins+0x110>
  for(lop_cnt=0;lop_cnt<10;lop_cnt++) {
    4b1c:	da 94       	dec	r13
    4b1e:	d1 10       	cpse	r13, r1
    4b20:	87 cf       	rjmp	.-242    	; 0x4a30 <EntladePins+0x18>
    4b22:	a8 cf       	rjmp	.-176    	; 0x4a74 <EntladePins+0x5c>
        adc_gnd |= (1<<TP1);	//Pin 1 directly to GND
    4b24:	81 e0       	ldi	r24, 0x01	; 1
    4b26:	bd cf       	rjmp	.-134    	; 0x4aa2 <EntladePins+0x8a>
        wait1ms();
    4b28:	0e 94 a3 07 	call	0xf46	; 0xf46 <wait1ms>
     for(adcmv[0]=0;adcmv[0]<clr_cnt;adcmv[0]++) {
    4b2c:	0f 5f       	subi	r16, 0xFF	; 255
    4b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b30:	f2 cf       	rjmp	.-28     	; 0x4b16 <EntladePins+0xfe>

00004b32 <Scale_C_with_vcc>:
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
  return;
 } // end ReadCapacity()


void Scale_C_with_vcc(void) {
    4b32:	cf 92       	push	r12
    4b34:	df 92       	push	r13
    4b36:	ef 92       	push	r14
    4b38:	ff 92       	push	r15
    4b3a:	cf 93       	push	r28
    4b3c:	df 93       	push	r29
    4b3e:	00 d0       	rcall	.+0      	; 0x4b40 <Scale_C_with_vcc+0xe>
    4b40:	00 d0       	rcall	.+0      	; 0x4b42 <Scale_C_with_vcc+0x10>
    4b42:	cd b7       	in	r28, 0x3d	; 61
    4b44:	de b7       	in	r29, 0x3e	; 62
   while (cap.cval > 100000) {
    4b46:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <cap>
    4b4a:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <cap+0x1>
    4b4e:	40 91 3e 01 	lds	r20, 0x013E	; 0x80013e <cap+0x2>
    4b52:	50 91 3f 01 	lds	r21, 0x013F	; 0x80013f <cap+0x3>
    4b56:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    4b5a:	89 83       	std	Y+1, r24	; 0x01
      cap.cval /= 10;
    4b5c:	8a e0       	ldi	r24, 0x0A	; 10
    4b5e:	c8 2e       	mov	r12, r24
    4b60:	d1 2c       	mov	r13, r1
    4b62:	e1 2c       	mov	r14, r1
    4b64:	f1 2c       	mov	r15, r1
    4b66:	89 81       	ldd	r24, Y+1	; 0x01
   while (cap.cval > 100000) {
    4b68:	98 2f       	mov	r25, r24
    4b6a:	9f 5f       	subi	r25, 0xFF	; 255
    4b6c:	99 83       	std	Y+1, r25	; 0x01
    4b6e:	21 3a       	cpi	r18, 0xA1	; 161
    4b70:	96 e8       	ldi	r25, 0x86	; 134
    4b72:	39 07       	cpc	r19, r25
    4b74:	91 e0       	ldi	r25, 0x01	; 1
    4b76:	49 07       	cpc	r20, r25
    4b78:	51 05       	cpc	r21, r1
    4b7a:	08 f5       	brcc	.+66     	; 0x4bbe <Scale_C_with_vcc+0x8c>
    4b7c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
      cap.cpre ++;			// prevent overflow
   }
   cap.cval *= ADCconfig.U_AVCC;	// scale with measured voltage
    4b80:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <ADCconfig+0x4>
    4b84:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <ADCconfig+0x5>
    4b88:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
   cap.cval /= U_VCC;			// Factors are computed for U_VCC
    4b8c:	28 e8       	ldi	r18, 0x88	; 136
    4b8e:	33 e1       	ldi	r19, 0x13	; 19
    4b90:	40 e0       	ldi	r20, 0x00	; 0
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4b98:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    4b9c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    4ba0:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    4ba4:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>
}
    4ba8:	0f 90       	pop	r0
    4baa:	0f 90       	pop	r0
    4bac:	0f 90       	pop	r0
    4bae:	0f 90       	pop	r0
    4bb0:	df 91       	pop	r29
    4bb2:	cf 91       	pop	r28
    4bb4:	ff 90       	pop	r15
    4bb6:	ef 90       	pop	r14
    4bb8:	df 90       	pop	r13
    4bba:	cf 90       	pop	r12
    4bbc:	08 95       	ret
      cap.cval /= 10;
    4bbe:	ca 01       	movw	r24, r20
    4bc0:	b9 01       	movw	r22, r18
    4bc2:	a7 01       	movw	r20, r14
    4bc4:	96 01       	movw	r18, r12
    4bc6:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
      cap.cpre ++;			// prevent overflow
    4bca:	cd cf       	rjmp	.-102    	; 0x4b66 <Scale_C_with_vcc+0x34>

00004bcc <ReadCapacity>:
void ReadCapacity(uint8_t HighPin, uint8_t LowPin) {
    4bcc:	a6 e0       	ldi	r26, 0x06	; 6
    4bce:	b0 e0       	ldi	r27, 0x00	; 0
    4bd0:	ec ee       	ldi	r30, 0xEC	; 236
    4bd2:	f5 e2       	ldi	r31, 0x25	; 37
    4bd4:	0c 94 db 3d 	jmp	0x7bb6	; 0x7bb6 <__prologue_saves__+0x10>
    4bd8:	8d 83       	std	Y+5, r24	; 0x05
    4bda:	b6 2e       	mov	r11, r22
  pin_combination = ((HighPin - TP_MIN) * 3) + LowPin - TP_MIN - 1;	// coded Pin combination for capacity zero offset
    4bdc:	88 0f       	add	r24, r24
    4bde:	2d 81       	ldd	r18, Y+5	; 0x05
    4be0:	82 0f       	add	r24, r18
    4be2:	9f ef       	ldi	r25, 0xFF	; 255
    4be4:	96 0f       	add	r25, r22
    4be6:	89 0f       	add	r24, r25
    4be8:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <pin_combination>
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin - TP_MIN]);	//R_L mask for HighPin R_L load
    4bec:	e2 2f       	mov	r30, r18
    4bee:	f0 e0       	ldi	r31, 0x00	; 0
    4bf0:	ef 5b       	subi	r30, 0xBF	; 191
    4bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    4bf4:	44 91       	lpm	r20, Z
    4bf6:	4e 83       	std	Y+6, r20	; 0x06
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[LowPin - TP_MIN]);	//R_L mask for LowPin R_L load
    4bf8:	86 2f       	mov	r24, r22
    4bfa:	90 e0       	ldi	r25, 0x00	; 0
    4bfc:	fc 01       	movw	r30, r24
    4bfe:	ef 5b       	subi	r30, 0xBF	; 191
    4c00:	fd 4f       	sbci	r31, 0xFD	; 253
    4c02:	14 91       	lpm	r17, Z
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin-TP_MIN) | TXD_MSK;
    4c04:	fc 01       	movw	r30, r24
    4c06:	ec 5b       	subi	r30, 0xBC	; 188
    4c08:	fd 4f       	sbci	r31, 0xFD	; 253
    4c0a:	a4 90       	lpm	r10, Z
  if(PartFound == PART_RESISTOR) {
    4c0c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	c1 f1       	breq	.+112    	; 0x4c84 <ReadCapacity+0xb8>
  for (ii=0;ii<NumOfDiodes;ii++) {
    4c14:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <NumOfDiodes>
    4c18:	26 e8       	ldi	r18, 0x86	; 134
    4c1a:	31 e0       	ldi	r19, 0x01	; 1
    4c1c:	f9 01       	movw	r30, r18
    4c1e:	d9 01       	movw	r26, r18
    4c20:	8a 2f       	mov	r24, r26
    4c22:	82 1b       	sub	r24, r18
    4c24:	89 17       	cp	r24, r25
    4c26:	90 f1       	brcs	.+100    	; 0x4c8c <ReadCapacity+0xc0>
  cap.esr = 0;				// set ESR of capacitor to zero
    4c28:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cap+0xd>
    4c2c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cap+0xc>
  cap.cpre = -15;			// mark for no cap
    4c30:	81 ef       	ldi	r24, 0xF1	; 241
    4c32:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
  cap.cval = 0;				// set capacity value to zero
    4c36:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cap>
    4c3a:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <cap+0x1>
    4c3e:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <cap+0x2>
    4c42:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cap+0x3>
  EntladePins();			// discharge capacitor
    4c46:	e8 de       	rcall	.-560    	; 0x4a18 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    4c48:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    4c4a:	a7 b8       	out	0x07, r10	; 7
  R_DDR = LoPinR_L;			// switch R_L Port of LoPin to VCC
    4c4c:	14 b9       	out	0x04, r17	; 4
  R_PORT = LoPinR_L;			// switch R_L Port of LoPin to VCC
    4c4e:	15 b9       	out	0x05, r17	; 5
  residual_voltage = ReadADC(HighPin) - ReadADC(LowPin); // voltage at HighPin before any load 
    4c50:	8d 81       	ldd	r24, Y+5	; 0x05
    4c52:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4c56:	8c 01       	movw	r16, r24
    4c58:	8b 2d       	mov	r24, r11
    4c5a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
  R_DDR = 0;				// switch all R_L ports to input
    4c5e:	14 b8       	out	0x04, r1	; 4
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    4c60:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ovcnt16+0x1>
    4c64:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovcnt16>
    4c68:	6c 01       	movw	r12, r24
    4c6a:	c0 1a       	sub	r12, r16
    4c6c:	d1 0a       	sbc	r13, r17
    4c6e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4c72:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4c76:	84 3f       	cpi	r24, 0xF4	; 244
    4c78:	91 40       	sbci	r25, 0x01	; 1
    4c7a:	c8 f0       	brcs	.+50     	; 0x4cae <ReadCapacity+0xe2>
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    4c7c:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    4c7e:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			// switch all resistor ports to input
    4c80:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    4c82:	15 b8       	out	0x05, r1	; 5
 } // end ReadCapacity()
    4c84:	26 96       	adiw	r28, 0x06	; 6
    4c86:	ea e0       	ldi	r30, 0x0A	; 10
    4c88:	0c 94 f7 3d 	jmp	0x7bee	; 0x7bee <__epilogue_restores__+0x10>
     if ((diodes.Cathode[ii] == LowPin) && (diodes.Anode[ii] == HighPin) && (diodes.Voltage[ii] < 1500)) {
    4c8c:	16 96       	adiw	r26, 0x06	; 6
    4c8e:	8c 91       	ld	r24, X
    4c90:	16 97       	sbiw	r26, 0x06	; 6
    4c92:	8b 11       	cpse	r24, r11
    4c94:	09 c0       	rjmp	.+18     	; 0x4ca8 <ReadCapacity+0xdc>
    4c96:	8c 91       	ld	r24, X
    4c98:	4d 81       	ldd	r20, Y+5	; 0x05
    4c9a:	84 13       	cpse	r24, r20
    4c9c:	05 c0       	rjmp	.+10     	; 0x4ca8 <ReadCapacity+0xdc>
    4c9e:	44 85       	ldd	r20, Z+12	; 0x0c
    4ca0:	55 85       	ldd	r21, Z+13	; 0x0d
    4ca2:	4c 3d       	cpi	r20, 0xDC	; 220
    4ca4:	55 40       	sbci	r21, 0x05	; 5
    4ca6:	70 f3       	brcs	.-36     	; 0x4c84 <ReadCapacity+0xb8>
  for (ii=0;ii<NumOfDiodes;ii++) {
    4ca8:	11 96       	adiw	r26, 0x01	; 1
    4caa:	32 96       	adiw	r30, 0x02	; 2
    4cac:	b9 cf       	rjmp	.-142    	; 0x4c20 <ReadCapacity+0x54>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    4cae:	9e 81       	ldd	r25, Y+6	; 0x06
    4cb0:	95 b9       	out	0x05, r25	; 5
     R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    4cb2:	94 b9       	out	0x04, r25	; 4
     wait10ms();			// wait exactly 10ms, do not sleep
    4cb4:	0e 94 9d 07 	call	0xf3a	; 0xf3a <wait10ms>
     R_DDR = 0;				// switch back to input
    4cb8:	14 b8       	out	0x04, r1	; 4
     R_PORT = 0;			// no Pull up
    4cba:	15 b8       	out	0x05, r1	; 5
     wait500us();			//wait a little time
    4cbc:	0e 94 a4 07 	call	0xf48	; 0xf48 <wait500us>
     wdt_reset();
    4cc0:	a8 95       	wdr
     cap_voltage1 = ReadADC(HighPin) - residual_voltage; // voltage of capacitor
    4cc2:	8d 81       	ldd	r24, Y+5	; 0x05
    4cc4:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4cc8:	7c 01       	movw	r14, r24
    4cca:	ec 0c       	add	r14, r12
    4ccc:	fd 1c       	adc	r15, r13
     if ((ovcnt16 > (MAX_LOAD_TIME/4)) && (cap_voltage1 < (MIN_VOLTAGE/4))) {
    4cce:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4cd2:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4cd6:	8e 37       	cpi	r24, 0x7E	; 126
    4cd8:	91 05       	cpc	r25, r1
    4cda:	20 f0       	brcs	.+8      	; 0x4ce4 <ReadCapacity+0x118>
    4cdc:	ab e4       	ldi	r26, 0x4B	; 75
    4cde:	ea 16       	cp	r14, r26
    4ce0:	f1 04       	cpc	r15, r1
    4ce2:	64 f2       	brlt	.-104    	; 0x4c7c <ReadCapacity+0xb0>
     if (cap_voltage1 > MIN_VOLTAGE) {
    4ce4:	bd e2       	ldi	r27, 0x2D	; 45
    4ce6:	eb 16       	cp	r14, r27
    4ce8:	b1 e0       	ldi	r27, 0x01	; 1
    4cea:	fb 06       	cpc	r15, r27
    4cec:	0c f0       	brlt	.+2      	; 0x4cf0 <ReadCapacity+0x124>
    4cee:	38 c2       	rjmp	.+1136   	; 0x5160 <ReadCapacity+0x594>
  for (ovcnt16=0;ovcnt16<MAX_LOAD_TIME;ovcnt16++) {
    4cf0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4cf4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4cf8:	01 96       	adiw	r24, 0x01	; 1
    4cfa:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    4cfe:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>
    4d02:	b5 cf       	rjmp	.-150    	; 0x4c6e <ReadCapacity+0xa2>
    4d04:	c7 01       	movw	r24, r14
  if ((ovcnt16 == 0 ) && (cap_voltage1 > 1300)) {
    4d06:	45 e1       	ldi	r20, 0x15	; 21
    4d08:	e4 16       	cp	r14, r20
    4d0a:	45 e0       	ldi	r20, 0x05	; 5
    4d0c:	f4 06       	cpc	r15, r20
    4d0e:	0c f4       	brge	.+2      	; 0x4d12 <ReadCapacity+0x146>
  EntladePins();			// discharge capacitor
    4d10:	43 c1       	rjmp	.+646    	; 0x4f98 <ReadCapacity+0x3cc>
    4d12:	82 de       	rcall	.-764    	; 0x4a18 <EntladePins>
  R_PORT = 0;		// R_DDR ist HiPinR_L
    4d14:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = (1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK;	//switch all Pins to output
    4d16:	87 e0       	ldi	r24, 0x07	; 7
    4d18:	87 b9       	out	0x07, r24	; 7
  ADC_PORT = TXD_VAL;		//switch all ADC Pins to GND
    4d1a:	18 b8       	out	0x08, r1	; 8
  R_DDR = HiPinR_H;   		// switch R_H resistor port for HighPin to output (GND)
    4d1c:	fe 80       	ldd	r15, Y+6	; 0x06
    4d1e:	ff 0c       	add	r15, r15
    4d20:	f4 b8       	out	0x04, r15	; 4
  ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    4d22:	80 e4       	ldi	r24, 0x40	; 64
    4d24:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    4d28:	84 e5       	ldi	r24, 0x54	; 84
    4d2a:	80 bf       	out	0x30, r24	; 48
  ADMUX = (1<<REFS0) | HighPin;			// switch Mux to High-Pin
    4d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d2e:	80 64       	ori	r24, 0x40	; 64
    4d30:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    4d34:	87 e1       	ldi	r24, 0x17	; 23
    4d36:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  wait200us();			//wait for bandgap to start up
    4d3a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <wait200us>
  ovcnt16 = 0;
    4d3e:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ovcnt16+0x1>
    4d42:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovcnt16>
  TCCR1A = 0;			// set Counter1 to normal Mode
    4d46:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCNT1 = 0;			//set Counter to 0
    4d4a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    4d4e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// clear interrupt flags
    4d52:	87 e2       	ldi	r24, 0x27	; 39
    4d54:	86 bb       	out	0x16, r24	; 22
  TIMSK1 = (1<<TOIE1) | (1<<ICIE1);	// enable Timer overflow interrupt and input capture interrupt
    4d56:	81 e2       	ldi	r24, 0x21	; 33
    4d58:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  unfinished = 1;
    4d5c:	81 e0       	ldi	r24, 0x01	; 1
    4d5e:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <unfinished>
  R_PORT = HiPinR_H;           	// switch R_H resistor port for HighPin to VCC
    4d62:	f5 b8       	out	0x05, r15	; 5
  if(PartFound == PART_FET) {
    4d64:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <PartFound>
    4d68:	95 30       	cpi	r25, 0x05	; 5
    4d6a:	09 f0       	breq	.+2      	; 0x4d6e <ReadCapacity+0x1a2>
    4d6c:	d9 c1       	rjmp	.+946    	; 0x5120 <ReadCapacity+0x554>
     TCCR1B = (0<<ICNC1) | (1<<CS10);	//Start counter 1MHz or 8MHz without Noise Canceler
    4d6e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ADC_DDR = (((1<<TP1) | (1<<TP2) | (1<<TP3) | TXD_MSK) & ~(1<<HighPin));	// release only HighPin ADC port
    4d72:	81 e0       	ldi	r24, 0x01	; 1
    4d74:	90 e0       	ldi	r25, 0x00	; 0
    4d76:	0d 80       	ldd	r0, Y+5	; 0x05
    4d78:	02 c0       	rjmp	.+4      	; 0x4d7e <ReadCapacity+0x1b2>
    4d7a:	88 0f       	add	r24, r24
    4d7c:	99 1f       	adc	r25, r25
    4d7e:	0a 94       	dec	r0
    4d80:	e2 f7       	brpl	.-8      	; 0x4d7a <ReadCapacity+0x1ae>
    4d82:	80 95       	com	r24
    4d84:	87 70       	andi	r24, 0x07	; 7
    4d86:	87 b9       	out	0x07, r24	; 7
  cli();		// disable interrupts to prevent wakeup Interrupts before sleeping
    4d88:	f8 94       	cli
  set_sleep_mode(SLEEP_MODE_IDLE);
    4d8a:	83 b7       	in	r24, 0x33	; 51
    4d8c:	81 7f       	andi	r24, 0xF1	; 241
    4d8e:	83 bf       	out	0x33, r24	; 51
  while(unfinished) {
    4d90:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <unfinished>
    4d94:	88 23       	and	r24, r24
    4d96:	89 f0       	breq	.+34     	; 0x4dba <ReadCapacity+0x1ee>
    sleep_enable();
    4d98:	83 b7       	in	r24, 0x33	; 51
    4d9a:	81 60       	ori	r24, 0x01	; 1
    4d9c:	83 bf       	out	0x33, r24	; 51
    sei();		// enable interrupts after next instruction
    4d9e:	78 94       	sei
    sleep_cpu();	// only enable interrupts during sleeping
    4da0:	88 95       	sleep
    sleep_disable();
    4da2:	83 b7       	in	r24, 0x33	; 51
    4da4:	8e 7f       	andi	r24, 0xFE	; 254
    4da6:	83 bf       	out	0x33, r24	; 51
    cli();		// disable interrupts again
    4da8:	f8 94       	cli
    wdt_reset();	// reset watch dog during waiting
    4daa:	a8 95       	wdr
    if(ovcnt16 == (F_CPU/5000)) {
    4dac:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4db0:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4db4:	80 38       	cpi	r24, 0x80	; 128
    4db6:	9c 40       	sbci	r25, 0x0C	; 12
    4db8:	59 f7       	brne	.-42     	; 0x4d90 <ReadCapacity+0x1c4>
  sei();		// enable interrupts again
    4dba:	78 94       	sei
  TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    4dbc:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  tmpint = ICR1;		// get previous Input Capture Counter flag
    4dc0:	e0 90 86 00 	lds	r14, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    4dc4:	f0 90 87 00 	lds	r15, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  TIMSK1 = (0<<TOIE1) | (0<<ICIE1);	// disable Timer overflow interrupt and input capture interrupt
    4dc8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    4dcc:	87 e9       	ldi	r24, 0x97	; 151
    4dce:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  R_DDR = 0;			// switch R_H resistor port for input
    4dd2:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// switch R_H resistor port pull up for HighPin off
    4dd4:	15 b8       	out	0x05, r1	; 5
  load_diff = ReadADC(HighPin) + REF_C_KORR - ref_mv;	// build difference of capacitor voltage to Reference Voltage
    4dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd8:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4ddc:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <ref_mv>
    4de0:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <ref_mv+0x1>
    4de4:	82 1b       	sub	r24, r18
    4de6:	93 0b       	sbc	r25, r19
    4de8:	0c 96       	adiw	r24, 0x0c	; 12
    4dea:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <load_diff+0x1>
    4dee:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <load_diff>
  if (ovcnt16 >= (F_CPU/10000)) {
    4df2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4df6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4dfa:	80 34       	cpi	r24, 0x40	; 64
    4dfc:	96 40       	sbci	r25, 0x06	; 6
    4dfe:	08 f0       	brcs	.+2      	; 0x4e02 <ReadCapacity+0x236>
    4e00:	3d cf       	rjmp	.-390    	; 0x4c7c <ReadCapacity+0xb0>
  cap.cval_uncorrected.w[1] = ovcnt16;
    4e02:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4e06:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4e0a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap+0xb>
    4e0e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap+0xa>
  cap.cval_uncorrected.w[0] = tmpint;
    4e12:	f0 92 45 01 	sts	0x0145, r15	; 0x800145 <cap+0x9>
    4e16:	e0 92 44 01 	sts	0x0144, r14	; 0x800144 <cap+0x8>
  cap.cpre = -12;			// cap.cval unit is pF 
    4e1a:	84 ef       	ldi	r24, 0xF4	; 244
    4e1c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
  if (ovcnt16 > 65) {
    4e20:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4e24:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4e28:	82 34       	cpi	r24, 0x42	; 66
    4e2a:	91 05       	cpc	r25, r1
    4e2c:	d8 f0       	brcs	.+54     	; 0x4e64 <ReadCapacity+0x298>
     cap.cval_uncorrected.dw /= 100;	// switch to next unit
    4e2e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <cap+0x8>
    4e32:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <cap+0x9>
    4e36:	a0 91 46 01 	lds	r26, 0x0146	; 0x800146 <cap+0xa>
    4e3a:	b0 91 47 01 	lds	r27, 0x0147	; 0x800147 <cap+0xb>
    4e3e:	bc 01       	movw	r22, r24
    4e40:	cd 01       	movw	r24, r26
    4e42:	24 e6       	ldi	r18, 0x64	; 100
    4e44:	30 e0       	ldi	r19, 0x00	; 0
    4e46:	40 e0       	ldi	r20, 0x00	; 0
    4e48:	50 e0       	ldi	r21, 0x00	; 0
    4e4a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4e4e:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <cap+0x8>
    4e52:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <cap+0x9>
    4e56:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <cap+0xa>
    4e5a:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <cap+0xb>
     cap.cpre += 2;			// set unit, prevent overflow
    4e5e:	86 ef       	ldi	r24, 0xF6	; 246
    4e60:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
  cap.cval_uncorrected.dw *= RHmultip;		// 708
    4e64:	a0 91 58 01 	lds	r26, 0x0158	; 0x800158 <RHmultip>
    4e68:	b0 91 59 01 	lds	r27, 0x0159	; 0x800159 <RHmultip+0x1>
    4e6c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cap+0x8>
    4e70:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cap+0x9>
    4e74:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <cap+0xa>
    4e78:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <cap+0xb>
    4e7c:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
  cap.cval_uncorrected.dw /= (F_CPU / 10000);	// divide by 100 (@ 1MHz clock), 800 (@ 8MHz clock)
    4e80:	20 e4       	ldi	r18, 0x40	; 64
    4e82:	36 e0       	ldi	r19, 0x06	; 6
    4e84:	40 e0       	ldi	r20, 0x00	; 0
    4e86:	50 e0       	ldi	r21, 0x00	; 0
    4e88:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4e8c:	20 93 44 01 	sts	0x0144, r18	; 0x800144 <cap+0x8>
    4e90:	30 93 45 01 	sts	0x0145, r19	; 0x800145 <cap+0x9>
    4e94:	40 93 46 01 	sts	0x0146, r20	; 0x800146 <cap+0xa>
    4e98:	50 93 47 01 	sts	0x0147, r21	; 0x800147 <cap+0xb>
  cap.cval = cap.cval_uncorrected.dw;		// set the corrected cap.cval
    4e9c:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    4ea0:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    4ea4:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    4ea8:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>
  Scale_C_with_vcc();
    4eac:	42 de       	rcall	.-892    	; 0x4b32 <Scale_C_with_vcc>
  if (cap.cpre == -12) {
    4eae:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    4eb2:	84 3f       	cpi	r24, 0xF4	; 244
    4eb4:	09 f0       	breq	.+2      	; 0x4eb8 <ReadCapacity+0x2ec>
    4eb6:	56 c0       	rjmp	.+172    	; 0x4f64 <ReadCapacity+0x398>
     if (cap.cval < COMP_SLEW1) {
    4eb8:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <cap>
    4ebc:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <cap+0x1>
    4ec0:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <cap+0x2>
    4ec4:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <cap+0x3>
    4ec8:	90 ea       	ldi	r25, 0xA0	; 160
    4eca:	c9 16       	cp	r12, r25
    4ecc:	9f e0       	ldi	r25, 0x0F	; 15
    4ece:	d9 06       	cpc	r13, r25
    4ed0:	e1 04       	cpc	r14, r1
    4ed2:	f1 04       	cpc	r15, r1
    4ed4:	c0 f4       	brcc	.+48     	; 0x4f06 <ReadCapacity+0x33a>
        cap.cval += (COMP_SLEW1 / (cap.cval+COMP_SLEW2 ));
    4ed6:	a7 01       	movw	r20, r14
    4ed8:	96 01       	movw	r18, r12
    4eda:	2c 54       	subi	r18, 0x4C	; 76
    4edc:	3f 4f       	sbci	r19, 0xFF	; 255
    4ede:	4f 4f       	sbci	r20, 0xFF	; 255
    4ee0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee2:	60 ea       	ldi	r22, 0xA0	; 160
    4ee4:	7f e0       	ldi	r23, 0x0F	; 15
    4ee6:	80 e0       	ldi	r24, 0x00	; 0
    4ee8:	90 e0       	ldi	r25, 0x00	; 0
    4eea:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4eee:	c2 0e       	add	r12, r18
    4ef0:	d3 1e       	adc	r13, r19
    4ef2:	e4 1e       	adc	r14, r20
    4ef4:	f5 1e       	adc	r15, r21
    4ef6:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <cap>
    4efa:	d0 92 3d 01 	sts	0x013D, r13	; 0x80013d <cap+0x1>
    4efe:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <cap+0x2>
    4f02:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <cap+0x3>
     if ( cap.cval < 65536) lc_cpartmp=cap.cval; /* prevent wrong value */
    4f06:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <cap>
    4f0a:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <cap+0x1>
    4f0e:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <cap+0x2>
    4f12:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <cap+0x3>
    4f16:	c1 14       	cp	r12, r1
    4f18:	d1 04       	cpc	r13, r1
    4f1a:	a1 e0       	ldi	r26, 0x01	; 1
    4f1c:	ea 06       	cpc	r14, r26
    4f1e:	f1 04       	cpc	r15, r1
    4f20:	08 f0       	brcs	.+2      	; 0x4f24 <ReadCapacity+0x358>
    4f22:	02 c1       	rjmp	.+516    	; 0x5128 <ReadCapacity+0x55c>
    4f24:	d0 92 b7 01 	sts	0x01B7, r13	; 0x8001b7 <lc_cpartmp+0x1>
    4f28:	c0 92 b6 01 	sts	0x01B6, r12	; 0x8001b6 <lc_cpartmp>
     tmpint = eeprom_read_byte(&c_zero_tab[pin_combination]);	// read zero offset
    4f2c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <pin_combination>
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	88 5c       	subi	r24, 0xC8	; 200
    4f34:	9c 4f       	sbci	r25, 0xFC	; 252
    4f36:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
     if (cap.cval > tmpint) {
    4f3a:	90 e0       	ldi	r25, 0x00	; 0
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	a0 e0       	ldi	r26, 0x00	; 0
    4f40:	8c 15       	cp	r24, r12
    4f42:	9d 05       	cpc	r25, r13
    4f44:	ae 05       	cpc	r26, r14
    4f46:	bf 05       	cpc	r27, r15
    4f48:	08 f0       	brcs	.+2      	; 0x4f4c <ReadCapacity+0x380>
    4f4a:	f5 c0       	rjmp	.+490    	; 0x5136 <ReadCapacity+0x56a>
         cap.cval -= tmpint;		//subtract zero offset (pF)
    4f4c:	c8 1a       	sub	r12, r24
    4f4e:	d9 0a       	sbc	r13, r25
    4f50:	ea 0a       	sbc	r14, r26
    4f52:	fb 0a       	sbc	r15, r27
    4f54:	c0 92 3c 01 	sts	0x013C, r12	; 0x80013c <cap>
    4f58:	d0 92 3d 01 	sts	0x013D, r13	; 0x80013d <cap+0x1>
    4f5c:	e0 92 3e 01 	sts	0x013E, r14	; 0x80013e <cap+0x2>
    4f60:	f0 92 3f 01 	sts	0x013F, r15	; 0x80013f <cap+0x3>
  R_DDR = HiPinR_L; 		//switch R_L for High-Pin to GND
    4f64:	4e 81       	ldd	r20, Y+6	; 0x06
    4f66:	44 b9       	out	0x04, r20	; 4
   if(cap.cval < 25)
    4f68:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    4f6c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    4f70:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    4f74:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    4f78:	49 97       	sbiw	r24, 0x19	; 25
    4f7a:	a1 05       	cpc	r26, r1
    4f7c:	b1 05       	cpc	r27, r1
    4f7e:	08 f0       	brcs	.+2      	; 0x4f82 <ReadCapacity+0x3b6>
    4f80:	86 c0       	rjmp	.+268    	; 0x508e <ReadCapacity+0x4c2>
    4f82:	7c ce       	rjmp	.-776    	; 0x4c7c <ReadCapacity+0xb0>
     wait5ms();
    4f84:	0e 94 9e 07 	call	0xf3c	; 0xf3c <wait5ms>
     cap_voltage2 = ReadADC(HighPin) - residual_voltage;	// read voltage again, is discharged only a little bit ?
    4f88:	8d 81       	ldd	r24, Y+5	; 0x05
    4f8a:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    4f8e:	8c 0d       	add	r24, r12
    4f90:	9d 1d       	adc	r25, r13
     wdt_reset();
    4f92:	a8 95       	wdr
  for (tmpint=0;tmpint<=ovcnt16;tmpint++) {
    4f94:	0f 5f       	subi	r16, 0xFF	; 255
    4f96:	1f 4f       	sbci	r17, 0xFF	; 255
    4f98:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <ovcnt16>
    4f9c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <ovcnt16+0x1>
    4fa0:	20 17       	cp	r18, r16
    4fa2:	31 07       	cpc	r19, r17
    4fa4:	78 f7       	brcc	.-34     	; 0x4f84 <ReadCapacity+0x3b8>
     cap_voltage2 = cap_voltage1 - cap_voltage2; 	// lost voltage during load time wait
    4fa6:	67 01       	movw	r12, r14
    4fa8:	c8 1a       	sub	r12, r24
    4faa:	d9 0a       	sbc	r13, r25
  if (cap_voltage2 > 0) {
    4fac:	1c 14       	cp	r1, r12
    4fae:	1d 04       	cpc	r1, r13
    4fb0:	0c f0       	brlt	.+2      	; 0x4fb4 <ReadCapacity+0x3e8>
    4fb2:	b3 c0       	rjmp	.+358    	; 0x511a <ReadCapacity+0x54e>
  if (cap_voltage2 > 200) {
    4fb4:	89 ec       	ldi	r24, 0xC9	; 201
    4fb6:	c8 16       	cp	r12, r24
    4fb8:	d1 04       	cpc	r13, r1
    4fba:	0c f0       	brlt	.+2      	; 0x4fbe <ReadCapacity+0x3f2>
    4fbc:	5f ce       	rjmp	.-834    	; 0x4c7c <ReadCapacity+0xb0>
     vloss = (unsigned long)(cap_voltage2 * 1000UL) / cap_voltage1;
    4fbe:	28 ee       	ldi	r18, 0xE8	; 232
    4fc0:	33 e0       	ldi	r19, 0x03	; 3
    4fc2:	d6 01       	movw	r26, r12
    4fc4:	0e 94 38 3d 	call	0x7a70	; 0x7a70 <__usmulhisi3>
    4fc8:	69 83       	std	Y+1, r22	; 0x01
    4fca:	7a 83       	std	Y+2, r23	; 0x02
    4fcc:	8b 83       	std	Y+3, r24	; 0x03
    4fce:	9c 83       	std	Y+4, r25	; 0x04
    4fd0:	97 01       	movw	r18, r14
    4fd2:	0f 2c       	mov	r0, r15
    4fd4:	00 0c       	add	r0, r0
    4fd6:	44 0b       	sbc	r20, r20
    4fd8:	55 0b       	sbc	r21, r21
    4fda:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    4fde:	89 01       	movw	r16, r18
  cap.cval_uncorrected.dw = ovcnt16 + 1;
    4fe0:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    4fe4:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    4fe8:	01 96       	adiw	r24, 0x01	; 1
    4fea:	b0 e0       	ldi	r27, 0x00	; 0
    4fec:	a0 e0       	ldi	r26, 0x00	; 0
    4fee:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cap+0x8>
    4ff2:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cap+0x9>
    4ff6:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <cap+0xa>
    4ffa:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <cap+0xb>
  cap.cval_uncorrected.dw *= GetRLmultip(cap_voltage1+cap_voltage2);	// get factor to convert time to capacity from table
    4ffe:	c7 01       	movw	r24, r14
    5000:	8c 0d       	add	r24, r12
    5002:	9d 1d       	adc	r25, r13
    5004:	0e 94 b7 08 	call	0x116e	; 0x116e <GetRLmultip>
    5008:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cap+0x8>
    500c:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cap+0x9>
    5010:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <cap+0xa>
    5014:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <cap+0xb>
    5018:	dc 01       	movw	r26, r24
    501a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    501e:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    5022:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    5026:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    502a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>
    502e:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <cap+0x8>
    5032:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <cap+0x9>
    5036:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap+0xa>
    503a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap+0xb>
   cap.cpre = -9;		// switch units to nF 
    503e:	87 ef       	ldi	r24, 0xF7	; 247
    5040:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
   Scale_C_with_vcc();		// value is below 100000 after this call, cpre is changed
    5044:	76 dd       	rcall	.-1300   	; 0x4b32 <Scale_C_with_vcc>
   cap.cval *= (1000 - (int8_t)eeprom_read_byte((uint8_t *)&big_cap_corr));	// correct with C_H_KORR with 0.1% resolution, but prevent overflow
    5046:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <cap>
    504a:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <cap+0x1>
    504e:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <cap+0x2>
    5052:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <cap+0x3>
    5056:	8b e1       	ldi	r24, 0x1B	; 27
    5058:	93 e0       	ldi	r25, 0x03	; 3
    505a:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    505e:	a8 ee       	ldi	r26, 0xE8	; 232
    5060:	b3 e0       	ldi	r27, 0x03	; 3
    5062:	a8 1b       	sub	r26, r24
    5064:	b1 09       	sbc	r27, r1
    5066:	87 fd       	sbrc	r24, 7
    5068:	b3 95       	inc	r27
    506a:	a7 01       	movw	r20, r14
    506c:	96 01       	movw	r18, r12
    506e:	0e 94 48 3d 	call	0x7a90	; 0x7a90 <__mulshisi3>
   cap.cval /= 100;		// was multiplied with 1000, now divided by 100
    5072:	24 e6       	ldi	r18, 0x64	; 100
    5074:	30 e0       	ldi	r19, 0x00	; 0
    5076:	40 e0       	ldi	r20, 0x00	; 0
    5078:	50 e0       	ldi	r21, 0x00	; 0
    507a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    507e:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    5082:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    5086:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    508a:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>
   if((NumOfDiodes > 0)  && (PartFound != PART_FET)) {
    508e:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <NumOfDiodes>
    5092:	88 23       	and	r24, r24
    5094:	29 f0       	breq	.+10     	; 0x50a0 <ReadCapacity+0x4d4>
    5096:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    509a:	85 30       	cpi	r24, 0x05	; 5
    509c:	09 f0       	breq	.+2      	; 0x50a0 <ReadCapacity+0x4d4>
    509e:	ee cd       	rjmp	.-1060   	; 0x4c7c <ReadCapacity+0xb0>
      PartFound = PART_CAPACITOR;	//capacitor is found
    50a0:	88 e0       	ldi	r24, 0x08	; 8
    50a2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
      if ((cap.cpre > cap.cpre_max) || ((cap.cpre == cap.cpre_max) && (cap.cval > cap.cval_max))) {
    50a6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    50aa:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <cap+0x13>
    50ae:	98 17       	cp	r25, r24
    50b0:	c4 f0       	brlt	.+48     	; 0x50e2 <ReadCapacity+0x516>
    50b2:	89 13       	cpse	r24, r25
    50b4:	e3 cd       	rjmp	.-1082   	; 0x4c7c <ReadCapacity+0xb0>
    50b6:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <cap>
    50ba:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <cap+0x1>
    50be:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <cap+0x2>
    50c2:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <cap+0x3>
    50c6:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <cap+0x4>
    50ca:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <cap+0x5>
    50ce:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <cap+0x6>
    50d2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <cap+0x7>
    50d6:	4c 15       	cp	r20, r12
    50d8:	5d 05       	cpc	r21, r13
    50da:	6e 05       	cpc	r22, r14
    50dc:	7f 05       	cpc	r23, r15
    50de:	08 f0       	brcs	.+2      	; 0x50e2 <ReadCapacity+0x516>
    50e0:	cd cd       	rjmp	.-1126   	; 0x4c7c <ReadCapacity+0xb0>
         cap.cval_max = cap.cval;
    50e2:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <cap>
    50e6:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <cap+0x1>
    50ea:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <cap+0x2>
    50ee:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <cap+0x3>
    50f2:	40 93 40 01 	sts	0x0140, r20	; 0x800140 <cap+0x4>
    50f6:	50 93 41 01 	sts	0x0141, r21	; 0x800141 <cap+0x5>
    50fa:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <cap+0x6>
    50fe:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <cap+0x7>
         cap.cpre_max = cap.cpre;
    5102:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cap+0x13>
         cap.v_loss = vloss;		// lost voltage in 0.01%
    5106:	10 93 4b 01 	sts	0x014B, r17	; 0x80014b <cap+0xf>
    510a:	00 93 4a 01 	sts	0x014A, r16	; 0x80014a <cap+0xe>
         cap.ca = LowPin;		// save LowPin
    510e:	b0 92 4c 01 	sts	0x014C, r11	; 0x80014c <cap+0x10>
         cap.cb = HighPin;		// save HighPin
    5112:	8d 81       	ldd	r24, Y+5	; 0x05
    5114:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <cap+0x11>
    5118:	b1 cd       	rjmp	.-1182   	; 0x4c7c <ReadCapacity+0xb0>
  vloss = 0;				// set lost voltage to zero
    511a:	10 e0       	ldi	r17, 0x00	; 0
    511c:	00 e0       	ldi	r16, 0x00	; 0
    511e:	60 cf       	rjmp	.-320    	; 0x4fe0 <ReadCapacity+0x414>
     TCCR1B =  (0<<ICNC1) | (1<<CS10);	//start counter 1MHz or 8MHz without Noise Canceler
    5120:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     ADC_DDR = LoADC;		// stay LoADC Pin switched to GND, charge capacitor with R_H slowly
    5124:	a7 b8       	out	0x07, r10	; 7
    5126:	30 ce       	rjmp	.-928    	; 0x4d88 <ReadCapacity+0x1bc>
     else                   lc_cpartmp = 1;	/* set to 1pF, if too big */
    5128:	81 e0       	ldi	r24, 0x01	; 1
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <lc_cpartmp+0x1>
    5130:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <lc_cpartmp>
    5134:	fb ce       	rjmp	.-522    	; 0x4f2c <ReadCapacity+0x360>
       if ((cap.cval+C_LIMIT_TO_UNCALIBRATED) < tmpint) {
    5136:	24 e1       	ldi	r18, 0x14	; 20
    5138:	c2 0e       	add	r12, r18
    513a:	d1 1c       	adc	r13, r1
    513c:	e1 1c       	adc	r14, r1
    513e:	f1 1c       	adc	r15, r1
    5140:	c8 16       	cp	r12, r24
    5142:	d9 06       	cpc	r13, r25
    5144:	ea 06       	cpc	r14, r26
    5146:	fb 06       	cpc	r15, r27
    5148:	10 f4       	brcc	.+4      	; 0x514e <ReadCapacity+0x582>
         mark_as_uncalibrated();	// set in EEprom to uncalibrated
    514a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <mark_as_uncalibrated>
         cap.cval = 0;			//unsigned long may not reach negativ value
    514e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cap>
    5152:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <cap+0x1>
    5156:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <cap+0x2>
    515a:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cap+0x3>
    515e:	02 cf       	rjmp	.-508    	; 0x4f64 <ReadCapacity+0x398>
  if ((ovcnt16 == 0 ) && (cap_voltage1 > 1300)) {
    5160:	00 91 34 01 	lds	r16, 0x0134	; 0x800134 <ovcnt16>
    5164:	10 91 35 01 	lds	r17, 0x0135	; 0x800135 <ovcnt16+0x1>
    5168:	01 15       	cp	r16, r1
    516a:	11 05       	cpc	r17, r1
    516c:	09 f4       	brne	.+2      	; 0x5170 <ReadCapacity+0x5a4>
    516e:	ca cd       	rjmp	.-1132   	; 0x4d04 <ReadCapacity+0x138>
    5170:	c7 01       	movw	r24, r14
    5172:	10 e0       	ldi	r17, 0x00	; 0
    5174:	00 e0       	ldi	r16, 0x00	; 0
    5176:	10 cf       	rjmp	.-480    	; 0x4f98 <ReadCapacity+0x3cc>

00005178 <__vector_13>:
#ifndef INHIBIT_SLEEP_MODE
/* Interrupt Service Routine for timer1 Overflow */
 ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
    5178:	1f 92       	push	r1
    517a:	1f b6       	in	r1, 0x3f	; 63
    517c:	1f 92       	push	r1
    517e:	11 24       	eor	r1, r1
    5180:	8f 93       	push	r24
    5182:	9f 93       	push	r25
 if ((!(TI1_INT_FLAGS & (1<<ICF1)) && (unfinished !=0)) || ((TI1_INT_FLAGS & (1<<ICF1)) && (ICR1 < 250))) {
    5184:	b5 99       	sbic	0x16, 5	; 22
    5186:	04 c0       	rjmp	.+8      	; 0x5190 <__vector_13+0x18>
    5188:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <unfinished>
    518c:	81 11       	cpse	r24, r1
    518e:	09 c0       	rjmp	.+18     	; 0x51a2 <__vector_13+0x2a>
    5190:	b5 9b       	sbis	0x16, 5	; 22
    5192:	10 c0       	rjmp	.+32     	; 0x51b4 <__vector_13+0x3c>
    5194:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    5198:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    519c:	8a 3f       	cpi	r24, 0xFA	; 250
    519e:	91 05       	cpc	r25, r1
    51a0:	48 f4       	brcc	.+18     	; 0x51b4 <__vector_13+0x3c>
    // Capture Event not pending or (Capture Event pending and ICR1 < 250
    // the ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   ovcnt16++;				// count Overflow
    51a2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    51a6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    51aa:	01 96       	adiw	r24, 0x01	; 1
    51ac:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    51b0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>
 }
}
    51b4:	9f 91       	pop	r25
    51b6:	8f 91       	pop	r24
    51b8:	1f 90       	pop	r1
    51ba:	1f be       	out	0x3f, r1	; 63
    51bc:	1f 90       	pop	r1
    51be:	18 95       	reti

000051c0 <__vector_10>:
/* Interrupt Service Routine for timer1 capture event (Comparator) */
 ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    51c0:	1f 92       	push	r1
    51c2:	1f b6       	in	r1, 0x3f	; 63
    51c4:	1f 92       	push	r1
    51c6:	11 24       	eor	r1, r1
    51c8:	8f 93       	push	r24
    51ca:	9f 93       	push	r25
 unfinished = 0;			// clear unfinished flag
    51cc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <unfinished>
 // With unfinished set to 0, we prevent further counting the Overflow.s
 // Is already a Overflow detected?
 if((TI1_INT_FLAGS & (1<<TOV1))) {	// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    51d0:	b0 9b       	sbis	0x16, 0	; 22
    51d2:	10 c0       	rjmp	.+32     	; 0x51f4 <__vector_10+0x34>
   //there is already a Overflow detected, before or after the capture event?
   // ICR1H is buffered and can not examined alone, we must read the ICR1L first (with ICR1 access) !
   if (ICR1 < 250) {
    51d4:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    51d8:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    51dc:	8a 3f       	cpi	r24, 0xFA	; 250
    51de:	91 05       	cpc	r25, r1
    51e0:	48 f4       	brcc	.+18     	; 0x51f4 <__vector_10+0x34>
     //  Yes, Input Capture Counter is low, Overflow has occured before the capture event
     ovcnt16++;				// count Overflow
    51e2:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    51e6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    51ea:	01 96       	adiw	r24, 0x01	; 1
    51ec:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    51f0:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>
   }
 }
}
    51f4:	9f 91       	pop	r25
    51f6:	8f 91       	pop	r24
    51f8:	1f 90       	pop	r1
    51fa:	1f be       	out	0x3f, r1	; 63
    51fc:	1f 90       	pop	r1
    51fe:	18 95       	reti

00005200 <Calibrate_UR>:
#include "Transistortester.h"

void Calibrate_UR(void) {
    5200:	a6 e0       	ldi	r26, 0x06	; 6
    5202:	b0 e0       	ldi	r27, 0x00	; 0
    5204:	e6 e0       	ldi	r30, 0x06	; 6
    5206:	f9 e2       	ldi	r31, 0x29	; 41
    5208:	0c 94 d9 3d 	jmp	0x7bb2	; 0x7bb2 <__prologue_saves__+0xc>
  uint16_t sum_rp;	// sum of 3 Pin voltages with 680 Ohm load
  uint16_t u680;	// 3 * (Voltage at 680 Ohm)
#endif


  adc_vcc_reference = U_VCC;     // set initial VCC Voltage to 5000mV
    520c:	88 e8       	ldi	r24, 0x88	; 136
    520e:	93 e1       	ldi	r25, 0x13	; 19
    5210:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <adc_vcc_reference+0x1>
    5214:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <adc_vcc_reference>
  ADCconfig.U_AVCC = adc_vcc_reference;	// set ADC to normal VCC value
    5218:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCconfig+0x5>
    521c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADCconfig+0x4>
  ADCconfig.Samples = R_ANZ_MESS;	// set number of ADC reads near to maximum
    5220:	8e eb       	ldi	r24, 0xBE	; 190
    5222:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
                                        //############################################
#if FLASHEND > 0x1fff
  uint16_t mv2500;
  ADC_PORT = TXD_VAL;                   // switch to 0V
    5226:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = (1<<TPRELAY) | TXD_MSK;       // switch pin with 2.5V reference to GND
    5228:	80 e1       	ldi	r24, 0x10	; 16
    522a:	87 b9       	out	0x07, r24	; 7
  wait20us();			// switch only short time, so that the relais do not really switch
    522c:	0e 94 ac 07 	call	0xf58	; 0xf58 <wait20us>
  ADC_DDR =  TXD_MSK;		// switch pin with reference back to input
    5230:	17 b8       	out	0x07, r1	; 7
  mv2500 = W5msReadADC(TPREF); // read voltage of 2.5V precision reference
    5232:	84 e0       	ldi	r24, 0x04	; 4
    5234:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    5238:	ac 01       	movw	r20, r24
  if ((mv2500 > 2250) && (mv2500 < 2750)) {
    523a:	8b 5c       	subi	r24, 0xCB	; 203
    523c:	98 40       	sbci	r25, 0x08	; 8
    523e:	83 3f       	cpi	r24, 0xF3	; 243
    5240:	91 40       	sbci	r25, 0x01	; 1
    5242:	a0 f4       	brcc	.+40     	; 0x526c <Calibrate_UR+0x6c>
     // precision voltage reference connected, update U_AVCC
     WithReference = 1;
    5244:	81 e0       	ldi	r24, 0x01	; 1
    5246:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <WithReference>
     adc_vcc_reference = (unsigned long)((unsigned long)ADCconfig.U_AVCC * 2495) / mv2500;
    524a:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <ADCconfig+0x4>
    524e:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <ADCconfig+0x5>
    5252:	af eb       	ldi	r26, 0xBF	; 191
    5254:	b9 e0       	ldi	r27, 0x09	; 9
    5256:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    525a:	9a 01       	movw	r18, r20
    525c:	50 e0       	ldi	r21, 0x00	; 0
    525e:	40 e0       	ldi	r20, 0x00	; 0
    5260:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    5264:	30 93 5b 01 	sts	0x015B, r19	; 0x80015b <adc_vcc_reference+0x1>
    5268:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <adc_vcc_reference>
  }
  ADCconfig.U_AVCC = adc_vcc_reference;	// set ADC to normal VCC value
    526c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <adc_vcc_reference>
    5270:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <adc_vcc_reference+0x1>
    5274:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <ADCconfig+0x5>
    5278:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <ADCconfig+0x4>
#endif
#ifdef WITH_AUTO_REF
  (void) ReadADC(MUX_INT_REF);	// read reference voltage 
    527c:	8e e0       	ldi	r24, 0x0E	; 14
    527e:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
  ref_mv = W5msReadADC(MUX_INT_REF);	// read reference voltage 
    5282:	8e e0       	ldi	r24, 0x0E	; 14
    5284:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    5288:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <ref_mv+0x1>
    528c:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <ref_mv>
#else
  ref_mv = DEFAULT_BAND_GAP;    // set to default Reference Voltage
#endif
  (void) RefVoltage();			//compute RHmultip = f(reference voltage)
    5290:	0e 94 5f 08 	call	0x10be	; 0x10be <RefVoltage>
                                        // ref_mv_offs, ADCconfig.U_Bandgap
                                        //############################################

  EntladePins();	// make sure, that no voltage is left from capacitors
    5294:	c1 db       	rcall	.-2174   	; 0x4a18 <EntladePins>
#ifdef AUTO_CAL
  // measurement of internal resistance of the ADC port outputs switched to GND
  ADC_PORT =  TXD_VAL;	//ADC-Ports to GND
    5296:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    5298:	31 e0       	ldi	r19, 0x01	; 1
    529a:	37 b9       	out	0x07, r19	; 7
 #ifdef PULLUP_DISABLE
  R_PORT = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		//R_L-PORTs to VCC
    529c:	85 e1       	ldi	r24, 0x15	; 21
    529e:	85 b9       	out	0x05, r24	; 5
 #else
  R_PORT = 1<<PIN_RL1;		//R_L-PORT 1 to VCC
 #endif
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to VCC
    52a0:	34 b9       	out	0x04, r19	; 4
  sum_rm = W5msReadADC(TP1);
    52a2:	80 e0       	ldi	r24, 0x00	; 0
    52a4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    52a8:	8c 01       	movw	r16, r24
// - - - - - - - 
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin 2 to output 0V
    52aa:	82 e0       	ldi	r24, 0x02	; 2
    52ac:	e8 2e       	mov	r14, r24
    52ae:	e7 b8       	out	0x07, r14	; 7
 #ifndef PULLUP_DISABLE
  R_PORT =  1<<PIN_RL2;		//R_L-PORT 2 to VCC
 #endif
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to VCC
    52b0:	94 e0       	ldi	r25, 0x04	; 4
    52b2:	f9 2e       	mov	r15, r25
    52b4:	f4 b8       	out	0x04, r15	; 4
  sum_rm += W5msReadADC(TP2);
    52b6:	81 e0       	ldi	r24, 0x01	; 1
    52b8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    52bc:	08 0f       	add	r16, r24
    52be:	19 1f       	adc	r17, r25
// - - - - - - - 
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin 3 to output 0V
    52c0:	f7 b8       	out	0x07, r15	; 7
 #ifndef PULLUP_DISABLE
  R_PORT =  1<<PIN_RL3;		//R_L-PORT 3 to VCC
 #endif
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to VCC
    52c2:	20 e1       	ldi	r18, 0x10	; 16
    52c4:	d2 2e       	mov	r13, r18
    52c6:	d4 b8       	out	0x04, r13	; 4
  sum_rm += W5msReadADC(TP3);	//add all three values
    52c8:	82 e0       	ldi	r24, 0x02	; 2
    52ca:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    52ce:	08 0f       	add	r16, r24
    52d0:	19 1f       	adc	r17, r25
// - - - - - - - 

  // measurement of internal resistance of the ADC port output switched to VCC
  R_PORT = 0;			// R-Ports to GND
    52d2:	15 b8       	out	0x05, r1	; 5
  ADC_PORT = 1<<TP1 | TXD_VAL;	//ADC-Port 1 to VCC
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	88 b9       	out	0x08, r24	; 8
  ADC_DDR = 1<<TP1 | TXD_MSK;	//ADC-Pin  1 to output 0V
    52d8:	87 b9       	out	0x07, r24	; 7
  R_DDR = 1<<PIN_RL1;		//Pin 1 to output and over R_L to GND
    52da:	84 b9       	out	0x04, r24	; 4
  sum_rp = vcc_diff(W5msReadADC(TP1));
    52dc:	80 e0       	ldi	r24, 0x00	; 0
    52de:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    52e2:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    52e6:	89 83       	std	Y+1, r24	; 0x01
    52e8:	9a 83       	std	Y+2, r25	; 0x02
// - - - - - - - 
      
  ADC_PORT = 1<<TP2 | TXD_VAL;	//ADC-Port 2 to VCC
    52ea:	e8 b8       	out	0x08, r14	; 8
  ADC_DDR = 1<<TP2 | TXD_MSK;	//ADC-Pin  2 to output 0V
    52ec:	e7 b8       	out	0x07, r14	; 7
  R_DDR = 1<<PIN_RL2;		//Pin 2 to output and over R_L to GND
    52ee:	f4 b8       	out	0x04, r15	; 4
  sum_rp += vcc_diff(W5msReadADC(TP2));
    52f0:	81 e0       	ldi	r24, 0x01	; 1
    52f2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    52f6:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    52fa:	29 81       	ldd	r18, Y+1	; 0x01
    52fc:	3a 81       	ldd	r19, Y+2	; 0x02
    52fe:	28 0f       	add	r18, r24
    5300:	39 1f       	adc	r19, r25
    5302:	3a 83       	std	Y+2, r19	; 0x02
    5304:	29 83       	std	Y+1, r18	; 0x01
// - - - - - - - 

  ADC_PORT = 1<<TP3 | TXD_VAL;	//ADC-Port 3 to VCC
    5306:	f8 b8       	out	0x08, r15	; 8
  ADC_DDR = 1<<TP3 | TXD_MSK;	//ADC-Pin  3 to output 0V
    5308:	f7 b8       	out	0x07, r15	; 7
  R_DDR = 1<<PIN_RL3;		//Pin 3 to output and over R_L to GND
    530a:	d4 b8       	out	0x04, r13	; 4
  sum_rp += vcc_diff(W5msReadADC(TP3));
    530c:	82 e0       	ldi	r24, 0x02	; 2
    530e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
    5312:	0e 94 51 08 	call	0x10a2	; 0x10a2 <vcc_diff>
    5316:	29 81       	ldd	r18, Y+1	; 0x01
    5318:	3a 81       	ldd	r19, Y+2	; 0x02
    531a:	28 0f       	add	r18, r24
    531c:	39 1f       	adc	r19, r25
    531e:	3e 83       	std	Y+6, r19	; 0x06
    5320:	2d 83       	std	Y+5, r18	; 0x05
// - - - - - - - 
  ADC_DDR =  TXD_MSK;	//ADC-Pins to input
    5322:	17 b8       	out	0x07, r1	; 7
  ADC_PORT =  TXD_VAL;	//ADC-Ports to GND
    5324:	18 b8       	out	0x08, r1	; 8
  R_DDR   = 0;
    5326:	14 b8       	out	0x04, r1	; 4

  u680 = ((ADCconfig.U_AVCC * 3) - sum_rm - sum_rp);	//three times the voltage at the 680 Ohm
    5328:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <ADCconfig+0x4>
    532c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <ADCconfig+0x5>
    5330:	6c 01       	movw	r12, r24
    5332:	cc 0c       	add	r12, r12
    5334:	dd 1c       	adc	r13, r13
    5336:	c8 0e       	add	r12, r24
    5338:	d9 1e       	adc	r13, r25
    533a:	c9 01       	movw	r24, r18
    533c:	80 0f       	add	r24, r16
    533e:	91 1f       	adc	r25, r17
    5340:	c8 1a       	sub	r12, r24
    5342:	d9 0a       	sbc	r13, r25
  pin_rmi = (unsigned long)((unsigned long)sum_rm * (unsigned long)R_L_VAL) / (unsigned long)u680;
    5344:	f1 2c       	mov	r15, r1
    5346:	e1 2c       	mov	r14, r1
    5348:	98 01       	movw	r18, r16
    534a:	a0 e9       	ldi	r26, 0x90	; 144
    534c:	ba e1       	ldi	r27, 0x1A	; 26
    534e:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    5352:	a7 01       	movw	r20, r14
    5354:	96 01       	movw	r18, r12
    5356:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    535a:	49 01       	movw	r8, r18
    535c:	5a 01       	movw	r10, r20
    535e:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <pin_rmi+0x1>
    5362:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <pin_rmi>
//  adcmv[2] = pin_rm;	// for last output in row 2
  pin_rpl = (unsigned long)((unsigned long)sum_rp * (unsigned long)R_L_VAL) / (unsigned long)u680;
    5366:	2d 81       	ldd	r18, Y+5	; 0x05
    5368:	3e 81       	ldd	r19, Y+6	; 0x06
    536a:	a0 e9       	ldi	r26, 0x90	; 144
    536c:	ba e1       	ldi	r27, 0x1A	; 26
    536e:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    5372:	a7 01       	movw	r20, r14
    5374:	96 01       	movw	r18, r12
    5376:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    537a:	30 93 16 01 	sts	0x0116, r19	; 0x800116 <pin_rpl+0x1>
    537e:	20 93 15 01 	sts	0x0115, r18	; 0x800115 <pin_rpl>
  resis680pl = pin_rpl + R_L_VAL;
    5382:	20 57       	subi	r18, 0x70	; 112
    5384:	35 4e       	sbci	r19, 0xE5	; 229
    5386:	30 93 1c 01 	sts	0x011C, r19	; 0x80011c <resis680pl+0x1>
    538a:	20 93 1b 01 	sts	0x011B, r18	; 0x80011b <resis680pl>
  resis680mi = pin_rmi + R_L_VAL;
    538e:	30 e7       	ldi	r19, 0x70	; 112
    5390:	83 1a       	sub	r8, r19
    5392:	35 ee       	ldi	r19, 0xE5	; 229
    5394:	93 0a       	sbc	r9, r19
    5396:	90 92 1a 01 	sts	0x011A, r9	; 0x80011a <resis680mi+0x1>
    539a:	80 92 19 01 	sts	0x0119, r8	; 0x800119 <resis680mi>
#endif

  ADCconfig.Samples = ANZ_MESS;	// set to configured number of ADC samples
    539e:	89 e1       	ldi	r24, 0x19	; 25
    53a0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
 } 
    53a4:	26 96       	adiw	r28, 0x06	; 6
    53a6:	ec e0       	ldi	r30, 0x0C	; 12
    53a8:	0c 94 f5 3d 	jmp	0x7bea	; 0x7bea <__epilogue_restores__+0xc>

000053ac <show_resis>:
void show_resis(byte pin1, byte pin2, byte how)
// can be invoked both from main() and from show_Resis13()
// pin1 and pin2 are resistor's pin numbers, but ResistorList[0] should also be correctly filled
// assumes resistance has already been measured, but will do inductance measurements as appropriate
// "how" flag tells how to show the results: if set [R] or [RL] will be shown in top right corner
{
    53ac:	a5 e0       	ldi	r26, 0x05	; 5
    53ae:	b0 e0       	ldi	r27, 0x00	; 0
    53b0:	ec ed       	ldi	r30, 0xDC	; 220
    53b2:	f9 e2       	ldi	r31, 0x29	; 41
    53b4:	0c 94 dd 3d 	jmp	0x7bba	; 0x7bba <__prologue_saves__+0x14>
    53b8:	8d 83       	std	Y+5, r24	; 0x05
    53ba:	69 83       	std	Y+1, r22	; 0x01
    53bc:	14 2f       	mov	r17, r20
 #ifdef RMETER_WITH_L
           lcd_testpin(pin1);
    53be:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
           lcd_MEM_string(Resistor_str);	// -[==]-
    53c2:	88 e0       	ldi	r24, 0x08	; 8
    53c4:	91 e0       	ldi	r25, 0x01	; 1
    53c6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
           lcd_refresh();
	   ReadInductance();	// measure inductance, possible only with R<2.1k
    53ca:	09 d2       	rcall	.+1042   	; 0x57de <ReadInductance>

  #ifdef SamplingADC
           sampling_lc(pin1,pin2);    // measure inductance using resonance method
    53cc:	69 81       	ldd	r22, Y+1	; 0x01
    53ce:	8d 81       	ldd	r24, Y+5	; 0x05
    53d0:	0e 94 cb 3a 	call	0x7596	; 0x7596 <sampling_lc>

           // draw first line: the pin numbers, RR and possibly LL symbol, and possibly [R] or [RL]
           byte lclx0=(lc_lx==0);
    53d4:	c0 90 b8 01 	lds	r12, 0x01B8	; 0x8001b8 <lc_lx>
    53d8:	d0 90 b9 01 	lds	r13, 0x01B9	; 0x8001b9 <lc_lx+0x1>
    53dc:	e0 90 ba 01 	lds	r14, 0x01BA	; 0x8001ba <lc_lx+0x2>
    53e0:	f0 90 bb 01 	lds	r15, 0x01BB	; 0x8001bb <lc_lx+0x3>
           if (inductor_lpre < 0 || !lclx0) 
    53e4:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    53e8:	87 fd       	sbrc	r24, 7
    53ea:	05 c0       	rjmp	.+10     	; 0x53f6 <show_resis+0x4a>
    53ec:	c1 14       	cp	r12, r1
    53ee:	d1 04       	cpc	r13, r1
    53f0:	e1 04       	cpc	r14, r1
    53f2:	f1 04       	cpc	r15, r1
    53f4:	21 f0       	breq	.+8      	; 0x53fe <show_resis+0x52>
  #else 
           if (inductor_lpre < 0)
  #endif

           {
              lcd_MEM_string(Inductor_str+1);            // "LL-"
    53f6:	84 e0       	ldi	r24, 0x04	; 4
    53f8:	91 e0       	ldi	r25, 0x01	; 1
    53fa:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
           }
           lcd_testpin(pin2);
    53fe:	89 81       	ldd	r24, Y+1	; 0x01
    5400:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>

           // second line: measured R value (but that goes on first line if lc_lx!=0), and measured inductance, if applicable

  #ifdef SamplingADC
           if (!lclx0) {  /* inductance measured by sampling method */
    5404:	c1 14       	cp	r12, r1
    5406:	d1 04       	cpc	r13, r1
    5408:	e1 04       	cpc	r14, r1
    540a:	f1 04       	cpc	r15, r1
    540c:	31 f0       	breq	.+12     	; 0x541a <show_resis+0x6e>
              lcd_space();
    540e:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
              RvalOut(ResistorList[0]);		// show Resistance, probably ESR, still on first line
    5412:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <ResistorList>
    5416:	0e 94 08 07 	call	0xe10	; 0xe10 <RvalOut>
           }
  #endif
 
  #if FLASHEND > 0x3fff
           if ((how) && (_lcd_column<=LCD_LINE_LENGTH-4)) {
    541a:	11 23       	and	r17, r17
    541c:	09 f4       	brne	.+2      	; 0x5420 <show_resis+0x74>
    541e:	5f c0       	rjmp	.+190    	; 0x54de <show_resis+0x132>
    5420:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>
    5424:	81 31       	cpi	r24, 0x11	; 17
    5426:	08 f0       	brcs	.+2      	; 0x542a <show_resis+0x7e>
    5428:	5a c0       	rjmp	.+180    	; 0x54de <show_resis+0x132>
              // still need to write "[RL]" or "[R]" at the end of first line, if it fits
                 lcd_MEM_string(RL_METER_str+(_lcd_column-6));	// " [R]" or "[RL]"
    542a:	86 50       	subi	r24, 0x06	; 6
    542c:	99 0b       	sbc	r25, r25
    542e:	8e 5b       	subi	r24, 0xBE	; 190
    5430:	9c 4f       	sbci	r25, 0xFC	; 252
    5432:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
	   }
  #else
           lcd_clear_line();
  #endif
//           lcd_line2();
           lcd_next_line_wait(0);
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
  #ifdef SamplingADC
           if (!lclx0) {  /* Frequency found */
    543c:	c1 14       	cp	r12, r1
    543e:	d1 04       	cpc	r13, r1
    5440:	e1 04       	cpc	r14, r1
    5442:	f1 04       	cpc	r15, r1
    5444:	09 f4       	brne	.+2      	; 0x5448 <show_resis+0x9c>
    5446:	4e c0       	rjmp	.+156    	; 0x54e4 <show_resis+0x138>
//              lcd_next_line(0);
              DisplayValue(lc_lx,lc_lpre,'H',3);	// output inductance
    5448:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <lc_lx>
    544c:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <lc_lx+0x1>
    5450:	a0 91 ba 01 	lds	r26, 0x01BA	; 0x8001ba <lc_lx+0x2>
    5454:	b0 91 bb 01 	lds	r27, 0x01BB	; 0x8001bb <lc_lx+0x3>
    5458:	03 e0       	ldi	r16, 0x03	; 3
    545a:	28 e4       	ldi	r18, 0x48	; 72
    545c:	47 ef       	ldi	r20, 0xF7	; 247
    545e:	bc 01       	movw	r22, r24
    5460:	cd 01       	movw	r24, r26
    5462:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
              lcd_MEM2_string(iF_str);		// " if "
    5466:	87 e1       	ldi	r24, 0x17	; 23
    5468:	91 e0       	ldi	r25, 0x01	; 1
    546a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
              uint16_t lc_cpar;    // value of parallel capacitor used for calculating inductance, in pF
              lc_cpar=eeprom_read_word((uint16_t *)&lc_cpar_ee);
    546e:	81 e5       	ldi	r24, 0x51	; 81
    5470:	93 e0       	ldi	r25, 0x03	; 3
    5472:	0e 94 6e 3e 	call	0x7cdc	; 0x7cdc <eeprom_read_word>
   #if (LCD_LINES<3) && (LCD_LINE_LENGTH<17)
              DisplayValue16(lc_cpar,-12,'F',2);	        // on 2-line dispaly show parallel capacitance with only 2 digits to make room for the '+' sign at the end of the line
   #else
              DisplayValue16(lc_cpar,-12,'F',3);	        // show parallel capacitance
    5476:	23 e0       	ldi	r18, 0x03	; 3
    5478:	46 e4       	ldi	r20, 0x46	; 70
    547a:	64 ef       	ldi	r22, 0xF4	; 244
    547c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>

           }
           // third line: measured resonance frequency and Q, if applicable

  #ifdef SamplingADC
           if (lc_fx) {
    5480:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <lc_fx>
    5484:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <lc_fx+0x1>
    5488:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <lc_fx+0x2>
    548c:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <lc_fx+0x3>
    5490:	89 2b       	or	r24, r25
    5492:	8a 2b       	or	r24, r26
    5494:	8b 2b       	or	r24, r27
    5496:	09 f4       	brne	.+2      	; 0x549a <show_resis+0xee>
    5498:	42 c0       	rjmp	.+132    	; 0x551e <show_resis+0x172>
              lcd_next_line_wait(0);
    549a:	80 e0       	ldi	r24, 0x00	; 0
    549c:	0e 94 98 0b 	call	0x1730	; 0x1730 <lcd_next_line_wait>
              DisplayValue(lc_fx,lc_fpre,'H',4);
    54a0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <lc_fx>
    54a4:	90 91 bf 01 	lds	r25, 0x01BF	; 0x8001bf <lc_fx+0x1>
    54a8:	a0 91 c0 01 	lds	r26, 0x01C0	; 0x8001c0 <lc_fx+0x2>
    54ac:	b0 91 c1 01 	lds	r27, 0x01C1	; 0x8001c1 <lc_fx+0x3>
    54b0:	04 e0       	ldi	r16, 0x04	; 4
    54b2:	28 e4       	ldi	r18, 0x48	; 72
    54b4:	40 e0       	ldi	r20, 0x00	; 0
    54b6:	bc 01       	movw	r22, r24
    54b8:	cd 01       	movw	r24, r26
    54ba:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
              lcd_MEM2_string(zQ_str);		// "z Q="
    54be:	82 e1       	ldi	r24, 0x12	; 18
    54c0:	91 e0       	ldi	r25, 0x01	; 1
    54c2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
              DisplayValue16(lc_qx, lc_qpre,' ',3);
    54c6:	23 e0       	ldi	r18, 0x03	; 3
    54c8:	40 e2       	ldi	r20, 0x20	; 32
    54ca:	6f ef       	ldi	r22, 0xFF	; 255
    54cc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <lc_qx>
    54d0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <lc_qx+0x1>
    54d4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
//              // make sure we clean the third line, but only if the display actually has a 3rd line
//              lcd_next_line(0);
//  #endif
              lcd_next_line(0);
	      if (last_line_used == 0) {
                 lcd_clear_line();
    54d8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
 #else		/* without Inductance measurement, only show resistance */
           lcd_line2();
           inductor_lpre = -1;		// prevent ESR measurement because Inductance is not tested
           RvalOut(ResistorList[0]);	// show Resistance, no ESR
 #endif
}  /* end show_resis() */
    54dc:	27 c0       	rjmp	.+78     	; 0x552c <show_resis+0x180>
                 lcd_clear_line();
    54de:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
    54e2:	a9 cf       	rjmp	.-174    	; 0x5436 <show_resis+0x8a>
              RvalOut(ResistorList[0]);		// show Resistance, probably ESR
    54e4:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <ResistorList>
    54e8:	0e 94 08 07 	call	0xe10	; 0xe10 <RvalOut>
              if (inductor_lpre < -2) {
    54ec:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    54f0:	8e 3f       	cpi	r24, 0xFE	; 254
    54f2:	34 f6       	brge	.-116    	; 0x5480 <show_resis+0xd4>
                 lcd_MEM_string(Lis_str);		// "L="
    54f4:	85 e3       	ldi	r24, 0x35	; 53
    54f6:	91 e0       	ldi	r25, 0x01	; 1
    54f8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
                 DisplayValue(inductor_lx,inductor_lpre,'H',3);        // output classic inductance
    54fc:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <inductor_lx>
    5500:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <inductor_lx+0x1>
    5504:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <inductor_lx+0x2>
    5508:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <inductor_lx+0x3>
    550c:	03 e0       	ldi	r16, 0x03	; 3
    550e:	28 e4       	ldi	r18, 0x48	; 72
    5510:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <inductor_lpre>
    5514:	bc 01       	movw	r22, r24
    5516:	cd 01       	movw	r24, r26
    5518:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
    551c:	b1 cf       	rjmp	.-158    	; 0x5480 <show_resis+0xd4>
              lcd_next_line(0);
    551e:	80 e0       	ldi	r24, 0x00	; 0
    5520:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
	      if (last_line_used == 0) {
    5524:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <last_line_used>
    5528:	88 23       	and	r24, r24
    552a:	b1 f2       	breq	.-84     	; 0x54d8 <show_resis+0x12c>
}  /* end show_resis() */
    552c:	25 96       	adiw	r28, 0x05	; 5
    552e:	e8 e0       	ldi	r30, 0x08	; 8
    5530:	0c 94 f9 3d 	jmp	0x7bf2	; 0x7bf2 <__epilogue_restores__+0x14>

00005534 <show_cap>:
#if FLASHEND > 0x3fff
void show_cap(uint8_t how)
#else
void show_cap_simple(void)
#endif
{
    5534:	a6 e0       	ldi	r26, 0x06	; 6
    5536:	b0 e0       	ldi	r27, 0x00	; 0
    5538:	e0 ea       	ldi	r30, 0xA0	; 160
    553a:	fa e2       	ldi	r31, 0x2A	; 42
    553c:	0c 94 df 3d 	jmp	0x7bbe	; 0x7bbe <__prologue_saves__+0x18>
    5540:	18 2f       	mov	r17, r24
//     lcd_MEM_string(Capacitor);
  lcd_line1();
    5542:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
  lcd_testpin(cap.ca);               //Pin number 1
    5546:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <cap+0x10>
    554a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
  lcd_MEM_string(CapZeich);          // capacitor sign
    554e:	81 e5       	ldi	r24, 0x51	; 81
    5550:	91 e0       	ldi	r25, 0x01	; 1
    5552:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
#if FLASHEND > 0x1fff
  uint8_t present_res;	// true, if resistor symbol is shown in Row 1
  uint8_t present_esr;
  uint8_t present_vloss;
  GetVloss();              
    5556:	8f d3       	rcall	.+1822   	; 0x5c76 <GetVloss>
  cap.esr = GetESR(cap.cb, cap.ca);          // get ESR of capacitor
    5558:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <cap+0x10>
    555c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    5560:	0e 94 1a 09 	call	0x1234	; 0x1234 <GetESR>
    5564:	8d 83       	std	Y+5, r24	; 0x05
    5566:	9e 83       	std	Y+6, r25	; 0x06
    5568:	8d 81       	ldd	r24, Y+5	; 0x05
    556a:	9e 81       	ldd	r25, Y+6	; 0x06
    556c:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cap+0xd>
    5570:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cap+0xc>

  present_esr = (cap.esr < 65530);
  present_vloss = (cap.v_loss != 0);
    5574:	e0 90 4a 01 	lds	r14, 0x014A	; 0x80014a <cap+0xe>
    5578:	f0 90 4b 01 	lds	r15, 0x014B	; 0x80014b <cap+0xf>
  #else
  present_res = (present_esr  && (!present_vloss));
  #endif
  // show Vloss additionally in line 2 , or no Vloss
 #endif
  if (present_res)
    557c:	8a 3f       	cpi	r24, 0xFA	; 250
    557e:	9f 4f       	sbci	r25, 0xFF	; 255
    5580:	20 f4       	brcc	.+8      	; 0x558a <show_cap+0x56>
  {
     lcd_MEM_string(Resistor_str+1);   // [=]-
    5582:	89 e0       	ldi	r24, 0x09	; 9
    5584:	91 e0       	ldi	r25, 0x01	; 1
    5586:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  }
#endif   /* FLASHEND > 0x1fff */
  lcd_testpin(cap.cb);               //Pin number 2
    558a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    558e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>

#if FLASHEND > 0x1fff
 #if FLASHEND > 0x3fff
  if (how) {
    5592:	11 23       	and	r17, r17
    5594:	09 f4       	brne	.+2      	; 0x5598 <show_cap+0x64>
    5596:	48 c0       	rjmp	.+144    	; 0x5628 <show_cap+0xf4>
     // Vloss is allways shown in separate line
     lcd_spaces(LCD_LINE_LENGTH - 3 - _lcd_column);
    5598:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_lcd_column>
    559c:	81 e1       	ldi	r24, 0x11	; 17
    559e:	89 1b       	sub	r24, r25
    55a0:	0e 94 be 0a 	call	0x157c	; 0x157c <lcd_spaces>
     lcd_MEM2_string(CMETER_13_str);       // "[C]" at the end of line 1
    55a4:	89 e6       	ldi	r24, 0x69	; 105
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
#else
  lcd_clear_line();		// clear to end of line
#endif  /* FLASHEND > 0x1fff */

// - - - - - - - - - - - - - - - - - - - - - -
  lcd_line2();                       //2. row 
    55ac:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
  DisplayValue(cap.cval_max,cap.cpre_max,'F',4);
    55b0:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cap+0x4>
    55b4:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <cap+0x5>
    55b8:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <cap+0x6>
    55bc:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <cap+0x7>
    55c0:	04 e0       	ldi	r16, 0x04	; 4
    55c2:	26 e4       	ldi	r18, 0x46	; 70
    55c4:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <cap+0x13>
    55c8:	bc 01       	movw	r22, r24
    55ca:	cd 01       	movw	r24, r26
    55cc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>

#if FLASHEND > 0x1fff
  if (present_esr) {
    55d0:	ad 81       	ldd	r26, Y+5	; 0x05
    55d2:	be 81       	ldd	r27, Y+6	; 0x06
    55d4:	aa 3f       	cpi	r26, 0xFA	; 250
    55d6:	bf 4f       	sbci	r27, 0xFF	; 255
    55d8:	68 f4       	brcc	.+26     	; 0x55f4 <show_cap+0xc0>
     lcd_MEM_string(ESR_str);        // " ESR="
    55da:	80 e4       	ldi	r24, 0x40	; 64
    55dc:	91 e0       	ldi	r25, 0x01	; 1
    55de:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
     DisplayValue16(cap.esr,-2,LCD_CHAR_OMEGA,2);
    55e2:	22 e0       	ldi	r18, 0x02	; 2
    55e4:	4d e1       	ldi	r20, 0x1D	; 29
    55e6:	6e ef       	ldi	r22, 0xFE	; 254
    55e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cap+0xc>
    55ec:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cap+0xd>
    55f0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
  }
  lcd_clear_line();
    55f4:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
// - - - - - - - - - - - - - - - - - - - - - -
 #if LCD_LINES > 2
     lcd_line3();
    55f8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
     if (present_vloss ) {
    55fc:	e1 14       	cp	r14, r1
    55fe:	f1 04       	cpc	r15, r1
    5600:	69 f0       	breq	.+26     	; 0x561c <show_cap+0xe8>
        lcd_MEM_string(&VLOSS_str[1]);      // "Vloss=" 
    5602:	89 e3       	ldi	r24, 0x39	; 57
    5604:	91 e0       	ldi	r25, 0x01	; 1
    5606:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
        DisplayValue16(cap.v_loss,-1,'%',2);
    560a:	22 e0       	ldi	r18, 0x02	; 2
    560c:	45 e2       	ldi	r20, 0x25	; 37
    560e:	6f ef       	ldi	r22, 0xFF	; 255
    5610:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cap+0xe>
    5614:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <cap+0xf>
    5618:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
     }
     lcd_clear_line();
    561c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
  #endif
 #endif
#else
  lcd_clear_line();
#endif  /* FLASHEND > 0x1fff */
} /* end show_cap or show_cap_simple */
    5620:	26 96       	adiw	r28, 0x06	; 6
    5622:	e6 e0       	ldi	r30, 0x06	; 6
    5624:	0c 94 fb 3d 	jmp	0x7bf6	; 0x7bf6 <__epilogue_restores__+0x18>
     lcd_clear_line();		// clear to end of line
    5628:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
    562c:	bf cf       	rjmp	.-130    	; 0x55ac <show_cap+0x78>

0000562e <Bat_update>:
#endif  /* FLASHEND > 0x3fff */

#if defined(POWER_OFF) && defined(BAT_CHECK)
// monitor Battery in line 4 or line2, if a two line display 
void Bat_update(uint8_t tt) {
  if((tt % 16) == 0) {
    562e:	8f 70       	andi	r24, 0x0F	; 15
    5630:	21 f4       	brne	.+8      	; 0x563a <Bat_update+0xc>
 #if (LCD_LINES > 3)
     lcd_line4();
    5632:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <lcd_line4>
     Battery_check();
    5636:	0c 94 4f 1b 	jmp	0x369e	; 0x369e <Battery_check>
  #endif
     Battery_check();
     wait_about1s();	/* time delay for reading the Bat= message */
 #endif
  }
};	/* end Bat_update() */
    563a:	08 95       	ret

0000563c <Pwr_mode_check>:
#endif
#if defined(POWER_OFF)
uint8_t Pwr_mode_check(uint8_t tt) {
 #if FLASHEND > 0x1fff
 if ((tt == 15) && (DC_Pwr_mode == 1)) return(0);  // when DC_Mode, next cycle start with 0
    563c:	8f 30       	cpi	r24, 0x0F	; 15
    563e:	21 f4       	brne	.+8      	; 0x5648 <Pwr_mode_check+0xc>
    5640:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DC_Pwr_mode>
    5644:	91 30       	cpi	r25, 0x01	; 1
    5646:	11 f0       	breq	.+4      	; 0x564c <Pwr_mode_check+0x10>
 #else
 if (tt == 15)  return(0);  // when DC_Mode, next cycle start with 0
 #endif
 return(tt + 1);	// otherwise increase
    5648:	8f 5f       	subi	r24, 0xFF	; 255
    564a:	08 95       	ret
 if ((tt == 15) && (DC_Pwr_mode == 1)) return(0);  // when DC_Mode, next cycle start with 0
    564c:	80 e0       	ldi	r24, 0x00	; 0
};
    564e:	08 95       	ret

00005650 <show_Resis13>:
void show_Resis13(void) {
    5650:	cf 93       	push	r28
  message_key_released(RESIS_13_str);	// "1-|=|-3 .."
    5652:	84 e7       	ldi	r24, 0x74	; 116
    5654:	90 e0       	ldi	r25, 0x00	; 0
    5656:	0e 94 6e 33 	call	0x66dc	; 0x66dc <message_key_released>
  lcd_set_cursor(0,10);
    565a:	6a e0       	ldi	r22, 0x0A	; 10
    565c:	80 e0       	ldi	r24, 0x00	; 0
    565e:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
  lcd_MEM_string(RL_METER_str+4);	// "[RL]"
    5662:	86 e4       	ldi	r24, 0x46	; 70
    5664:	93 e0       	ldi	r25, 0x03	; 3
    5666:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  for (times=0;times<250;) 
    566a:	c0 e0       	ldi	r28, 0x00	; 0
        init_parts();		// set all parts to nothing found 
    566c:	0e 94 8a 10 	call	0x2114	; 0x2114 <init_parts>
        GetResistance(TP3, TP1);
    5670:	60 e0       	ldi	r22, 0x00	; 0
    5672:	82 e0       	ldi	r24, 0x02	; 2
    5674:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <GetResistance>
        GetResistance(TP1, TP3);
    5678:	62 e0       	ldi	r22, 0x02	; 2
    567a:	80 e0       	ldi	r24, 0x00	; 0
    567c:	0e 94 dc 22 	call	0x45b8	; 0x45b8 <GetResistance>
	lcd_line1();		// lcd_set_cursor(0,0);
    5680:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
        if (ResistorsFound != 0) {
    5684:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    5688:	88 23       	and	r24, r24
    568a:	c9 f0       	breq	.+50     	; 0x56be <show_Resis13+0x6e>
           show_resis(TP1,TP3,1);
    568c:	41 e0       	ldi	r20, 0x01	; 1
    568e:	62 e0       	ldi	r22, 0x02	; 2
    5690:	80 e0       	ldi	r24, 0x00	; 0
    5692:	8c de       	rcall	.-744    	; 0x53ac <show_resis>
     Bat_update(times);
    5694:	8c 2f       	mov	r24, r28
    5696:	cb df       	rcall	.-106    	; 0x562e <Bat_update>
     key_pressed = wait_for_key_ms(1000);
    5698:	88 ee       	ldi	r24, 0xE8	; 232
    569a:	93 e0       	ldi	r25, 0x03	; 3
    569c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
     if ((key_pressed != 0) || (rotary.incre > 3)) break;
    56a0:	81 11       	cpse	r24, r1
    56a2:	09 c0       	rjmp	.+18     	; 0x56b6 <show_Resis13+0x66>
    56a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    56a8:	84 30       	cpi	r24, 0x04	; 4
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    56aa:	28 f4       	brcc	.+10     	; 0x56b6 <show_Resis13+0x66>
    56ac:	8c 2f       	mov	r24, r28
    56ae:	c6 df       	rcall	.-116    	; 0x563c <Pwr_mode_check>
    56b0:	c8 2f       	mov	r28, r24
  for (times=0;times<250;) 
    56b2:	8a 3f       	cpi	r24, 0xFA	; 250
    56b4:	d8 f2       	brcs	.-74     	; 0x566c <show_Resis13+0x1c>
  lcd_clear();
    56b6:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
} /* end show_Resis13() */
    56ba:	cf 91       	pop	r28
    56bc:	08 95       	ret
           lcd_MEM_string(RESIS_13_str);
    56be:	84 e7       	ldi	r24, 0x74	; 116
    56c0:	90 e0       	ldi	r25, 0x00	; 0
    56c2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
           lcd_MEM_string(RL_METER_str+4);	// "[RL]"
    56c6:	86 e4       	ldi	r24, 0x46	; 70
    56c8:	93 e0       	ldi	r25, 0x03	; 3
    56ca:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
           lcd_line2();
    56ce:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
           lcd_data('?');		// too big
    56d2:	8f e3       	ldi	r24, 0x3F	; 63
    56d4:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
           lcd_next_line(0);
    56d8:	80 e0       	ldi	r24, 0x00	; 0
    56da:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
           lcd_clear_line();
    56de:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
    56e2:	d8 cf       	rjmp	.-80     	; 0x5694 <show_Resis13+0x44>

000056e4 <show_Cap13>:
void show_Cap13(void) {
    56e4:	0f 93       	push	r16
    56e6:	1f 93       	push	r17
    56e8:	cf 93       	push	r28
    56ea:	df 93       	push	r29
  for (times=0;times<250;) 
    56ec:	c0 e0       	ldi	r28, 0x00	; 0
     PartFound = PART_CAPACITOR;
    56ee:	d8 e0       	ldi	r29, 0x08	; 8
        cap.cpre = sampling_cap_pre;
    56f0:	12 ef       	ldi	r17, 0xF2	; 242
       lcd_spaces(LCD_LINE_LENGTH - 3 - _lcd_column);
    56f2:	01 e1       	ldi	r16, 0x11	; 17
     init_parts();		// set all parts to nothing found 
    56f4:	0e 94 8a 10 	call	0x2114	; 0x2114 <init_parts>
     ReadCapacity(TP3, TP1);
    56f8:	60 e0       	ldi	r22, 0x00	; 0
    56fa:	82 e0       	ldi	r24, 0x02	; 2
    56fc:	67 da       	rcall	.-2866   	; 0x4bcc <ReadCapacity>
     PartFound = PART_CAPACITOR;
    56fe:	d0 93 2f 01 	sts	0x012F, r29	; 0x80012f <PartFound>
     if (cap.cpre==-12 && cap.cval<100) {
    5702:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    5706:	84 3f       	cpi	r24, 0xF4	; 244
    5708:	e1 f4       	brne	.+56     	; 0x5742 <show_Cap13+0x5e>
    570a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    570e:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    5712:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    5716:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    571a:	84 36       	cpi	r24, 0x64	; 100
    571c:	91 05       	cpc	r25, r1
    571e:	a1 05       	cpc	r26, r1
    5720:	b1 05       	cpc	r27, r1
    5722:	78 f4       	brcc	.+30     	; 0x5742 <show_Cap13+0x5e>
        cap.cval = sampling_cap(TP3,TP1,0);
    5724:	40 e0       	ldi	r20, 0x00	; 0
    5726:	60 e0       	ldi	r22, 0x00	; 0
    5728:	82 e0       	ldi	r24, 0x02	; 2
    572a:	0e 94 51 38 	call	0x70a2	; 0x70a2 <sampling_cap>
    572e:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    5732:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    5736:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    573a:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>
        cap.cpre = sampling_cap_pre;
    573e:	10 93 4e 01 	sts	0x014E, r17	; 0x80014e <cap+0x12>
     if (cap.cpre > -15) {	/* Capacity below the detection limit */
    5742:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    5746:	82 3f       	cpi	r24, 0xF2	; 242
    5748:	6c f1       	brlt	.+90     	; 0x57a4 <show_Cap13+0xc0>
       cap.cpre_max = cap.cpre;		// show_cap will display the cap.cval_max value
    574a:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cap+0x13>
       cap.cval_max = cap.cval;
    574e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <cap>
    5752:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <cap+0x1>
    5756:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <cap+0x2>
    575a:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <cap+0x3>
    575e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <cap+0x4>
    5762:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <cap+0x5>
    5766:	a0 93 42 01 	sts	0x0142, r26	; 0x800142 <cap+0x6>
    576a:	b0 93 43 01 	sts	0x0143, r27	; 0x800143 <cap+0x7>
       show_cap(1);		// with [C] at the end of line
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	e1 de       	rcall	.-574    	; 0x5534 <show_cap>
     Bat_update(times);
    5772:	8c 2f       	mov	r24, r28
    5774:	5c df       	rcall	.-328    	; 0x562e <Bat_update>
    5776:	88 ee       	ldi	r24, 0xE8	; 232
     key_pressed = wait_for_key_ms(SCREEN_TIME);
    5778:	93 e0       	ldi	r25, 0x03	; 3
    577a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
    577e:	81 11       	cpse	r24, r1
     if ((key_pressed != 0) || (rotary.incre > 3)) break;
    5780:	0a c0       	rjmp	.+20     	; 0x5796 <show_Cap13+0xb2>
    5782:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    5786:	84 30       	cpi	r24, 0x04	; 4
    5788:	30 f4       	brcc	.+12     	; 0x5796 <show_Cap13+0xb2>
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    578a:	8c 2f       	mov	r24, r28
    578c:	57 df       	rcall	.-338    	; 0x563c <Pwr_mode_check>
    578e:	c8 2f       	mov	r28, r24
    5790:	8a 3f       	cpi	r24, 0xFA	; 250
  for (times=0;times<250;) 
    5792:	08 f4       	brcc	.+2      	; 0x5796 <show_Cap13+0xb2>
    5794:	af cf       	rjmp	.-162    	; 0x56f4 <show_Cap13+0x10>
    5796:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
  lcd_clear();		// clear to end of line
    579a:	df 91       	pop	r29
} /* end show_Cap13() */
    579c:	cf 91       	pop	r28
    579e:	1f 91       	pop	r17
    57a0:	0f 91       	pop	r16
    57a2:	08 95       	ret
    57a4:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
       lcd_line1();
    57a8:	8d e6       	ldi	r24, 0x6D	; 109
       lcd_MEM2_string(CAP_13_str);	// 1-||-3
    57aa:	90 e0       	ldi	r25, 0x00	; 0
    57ac:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    57b0:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_lcd_column>
       lcd_spaces(LCD_LINE_LENGTH - 3 - _lcd_column);
    57b4:	90 2f       	mov	r25, r16
    57b6:	98 1b       	sub	r25, r24
    57b8:	89 2f       	mov	r24, r25
    57ba:	0e 94 be 0a 	call	0x157c	; 0x157c <lcd_spaces>
    57be:	89 e6       	ldi	r24, 0x69	; 105
       lcd_MEM2_string(CMETER_13_str);       // "[C]" at the end of line 1
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    57c6:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
       lcd_line2();
    57ca:	8f e3       	ldi	r24, 0x3F	; 63
       lcd_data('?');
    57cc:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
    57d0:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
       lcd_clear_line();		// clear to end of line 2
    57d4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
       lcd_line3();	
    57d8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
       lcd_clear_line();	// clear old Vloss= message
    57dc:	ca cf       	rjmp	.-108    	; 0x5772 <show_Cap13+0x8e>

000057de <ReadInductance>:
    57de:	ae e1       	ldi	r26, 0x1E	; 30
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void ReadInductance(void) {
    57e0:	b0 e0       	ldi	r27, 0x00	; 0
    57e2:	e5 ef       	ldi	r30, 0xF5	; 245
    57e4:	fb e2       	ldi	r31, 0x2B	; 43
    57e6:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>
  uint16_t pw;		// return value from Rnum2pins()
  uint8_t pb[2];	// the pin numbers LowPin and HighPin
  } rpins;	// resistor pin structure to prevent two return parameters


  inductor_lpre = 2;	// H units, mark inductor as 1, if resistor is too big
    57ea:	82 e0       	ldi	r24, 0x02	; 2
    57ec:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>
  if(PartFound != PART_RESISTOR) {
    57f0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    57f4:	81 30       	cpi	r24, 0x01	; 1
    57f6:	09 f0       	breq	.+2      	; 0x57fa <ReadInductance+0x1c>
    57f8:	e8 c1       	rjmp	.+976    	; 0x5bca <ReadInductance+0x3ec>
     return;	//We have found no resistor  
  }
  if (ResistorsFound != 1) {
    57fa:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <ResistorsFound>
    57fe:	81 30       	cpi	r24, 0x01	; 1
    5800:	09 f0       	breq	.+2      	; 0x5804 <ReadInductance+0x26>
    5802:	e3 c1       	rjmp	.+966    	; 0x5bca <ReadInductance+0x3ec>
     return;	// do not search for inductance, more than 1 resistor
  }
     res_num = ResistorList[0];
    5804:	20 90 a7 01 	lds	r2, 0x01A7	; 0x8001a7 <ResistorList>
     if (ResistorVal[res_num] > 21000) return;
    5808:	24 e0       	ldi	r18, 0x04	; 4
    580a:	22 9e       	mul	r2, r18
    580c:	f0 01       	movw	r30, r0
    580e:	11 24       	eor	r1, r1
    5810:	e6 55       	subi	r30, 0x56	; 86
    5812:	fe 4f       	sbci	r31, 0xFE	; 254
    5814:	40 80       	ld	r4, Z
    5816:	51 80       	ldd	r5, Z+1	; 0x01
    5818:	62 80       	ldd	r6, Z+2	; 0x02
    581a:	73 80       	ldd	r7, Z+3	; 0x03
    581c:	39 e0       	ldi	r19, 0x09	; 9
    581e:	43 16       	cp	r4, r19
    5820:	32 e5       	ldi	r19, 0x52	; 82
    5822:	53 06       	cpc	r5, r19
    5824:	61 04       	cpc	r6, r1
    5826:	71 04       	cpc	r7, r1
    5828:	08 f0       	brcs	.+2      	; 0x582c <ReadInductance+0x4e>
    582a:	cf c1       	rjmp	.+926    	; 0x5bca <ReadInductance+0x3ec>
     resistor = ResistorVal[res_num];

     // we can check for Inductance, if resistance is below 2100 Ohm
     for (count=0;count<4;count++) {
    582c:	10 e0       	ldi	r17, 0x00	; 0
        // Try four times (different direction and with delayed counter start)
        if (count < 2) {
           // first and second pass, direction 1
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    582e:	82 2d       	mov	r24, r2
        if (count < 2) {
    5830:	12 30       	cpi	r17, 0x02	; 2
    5832:	08 f0       	brcs	.+2      	; 0x5836 <ReadInductance+0x58>
    5834:	ce c1       	rjmp	.+924    	; 0x5bd2 <ReadInductance+0x3f4>
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    5836:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Rnum2pins>
        } else {
           // third and fourth pass, direction 2
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
           ii = rpins.pb[0];
           rpins.pb[0] = rpins.pb[1];		// swap the pins LowPin and HighPin
    583a:	08 2f       	mov	r16, r24
    583c:	79 2e       	mov	r7, r25
           rpins.pb[1] = ii;
        }
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
        HiADC = pgm_read_byte((&PinRLRHADCtab[6])+rpins.pb[1]-TP_MIN);	// Table of ADC Pins including | TXD_VAL
#else
        HiADC = pgm_read_byte((&PinRLRHADCtab[3])+rpins.pb[1]-TP_MIN);	// Table of ADC Pins including | TXD_VAL
    583e:	e9 2f       	mov	r30, r25
    5840:	f0 e0       	ldi	r31, 0x00	; 0
    5842:	ec 5b       	subi	r30, 0xBC	; 188
    5844:	fd 4f       	sbci	r31, 0xFD	; 253
    5846:	34 90       	lpm	r3, Z
#endif
        LoPinR_L = pgm_read_byte(&PinRLRHADCtab[rpins.pb[0]]-TP_MIN);	//R_L mask for HighPin R_L load
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	fc 01       	movw	r30, r24
    584c:	ef 5b       	subi	r30, 0xBF	; 191
    584e:	fd 4f       	sbci	r31, 0xFD	; 253
    5850:	e4 91       	lpm	r30, Z
        //==================================================================================
        // Measurement of Inductance values
        R_PORT = 0;		// switch R port to GND
    5852:	15 b8       	out	0x05, r1	; 5
        ADC_PORT =   TXD_VAL;		// switch ADC-Port to GND
    5854:	18 b8       	out	0x08, r1	; 8
        if ((resistor < 240) && ((count & 0x01) == 0)) {
    5856:	41 2f       	mov	r20, r17
    5858:	41 70       	andi	r20, 0x01	; 1
    585a:	49 8b       	std	Y+17, r20	; 0x11
    585c:	50 ef       	ldi	r21, 0xF0	; 240
    585e:	45 16       	cp	r4, r21
    5860:	51 04       	cpc	r5, r1
    5862:	08 f0       	brcs	.+2      	; 0x5866 <ReadInductance+0x88>
    5864:	bc c1       	rjmp	.+888    	; 0x5bde <ReadInductance+0x400>
    5866:	41 11       	cpse	r20, r1
    5868:	ba c1       	rjmp	.+884    	; 0x5bde <ReadInductance+0x400>
           // we can use PinR_L for measurement
           mess_r = RR680MI - R_L_VAL;			// use only pin output resistance
    586a:	a0 90 19 01 	lds	r10, 0x0119	; 0x800119 <resis680mi>
    586e:	b0 90 1a 01 	lds	r11, 0x011A	; 0x80011a <resis680mi+0x1>
    5872:	a0 e9       	ldi	r26, 0x90	; 144
    5874:	aa 1a       	sub	r10, r26
    5876:	aa e1       	ldi	r26, 0x1A	; 26
    5878:	ba 0a       	sbc	r11, r26
           ADC_DDR = HiADC | (1<<rpins.pb[0]) | TXD_MSK;	// switch HiADC and Low Pin to GND, 
    587a:	21 e0       	ldi	r18, 0x01	; 1
    587c:	30 e0       	ldi	r19, 0x00	; 0
    587e:	02 c0       	rjmp	.+4      	; 0x5884 <ReadInductance+0xa6>
    5880:	22 0f       	add	r18, r18
    5882:	33 1f       	adc	r19, r19
    5884:	8a 95       	dec	r24
    5886:	e2 f7       	brpl	.-8      	; 0x5880 <ReadInductance+0xa2>
    5888:	c9 01       	movw	r24, r18
    588a:	83 29       	or	r24, r3
    588c:	87 b9       	out	0x07, r24	; 7
     for (count=0;count<4;count++) {
    588e:	e4 e1       	ldi	r30, 0x14	; 20
    5890:	6e 2e       	mov	r6, r30
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
        }
        // Look, if we can detect any current
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(rpins.pb[0]);
    5892:	80 2f       	mov	r24, r16
    5894:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    5898:	4c 01       	movw	r8, r24
            total_r =  ReadADC(rpins.pb[1]);
    589a:	87 2d       	mov	r24, r7
    589c:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
            if ((umax < CAP_EMPTY_LEVEL) && (total_r < CAP_EMPTY_LEVEL)) break;	// low current detected
    58a0:	44 e0       	ldi	r20, 0x04	; 4
    58a2:	84 16       	cp	r8, r20
    58a4:	91 04       	cpc	r9, r1
    58a6:	10 f4       	brcc	.+4      	; 0x58ac <ReadInductance+0xce>
    58a8:	04 97       	sbiw	r24, 0x04	; 4
    58aa:	18 f0       	brcs	.+6      	; 0x58b2 <ReadInductance+0xd4>
        for (ii=0;ii<20;ii++) {
    58ac:	6a 94       	dec	r6
    58ae:	61 10       	cpse	r6, r1
    58b0:	f0 cf       	rjmp	.-32     	; 0x5892 <ReadInductance+0xb4>
        }
        // setup Analog Comparator
        ADC_COMP_CONTROL = (1<<ACME);			//enable Analog Comparator Multiplexer
    58b2:	50 e4       	ldi	r21, 0x40	; 64
    58b4:	50 93 7b 00 	sts	0x007B, r21	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
        ACSR =  (1<<ACBG) | (1<<ACI)  | (1<<ACIC);	// enable, 1.3V, no Interrupt, Connect to Timer1 
    58b8:	84 e5       	ldi	r24, 0x54	; 84
    58ba:	80 bf       	out	0x30, r24	; 48
        ADMUX = (1<<REFS0) | rpins.pb[0];			// switch Mux to Low-Pin
    58bc:	80 2f       	mov	r24, r16
    58be:	80 64       	ori	r24, 0x40	; 64
    58c0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
        ADCSRA = (1<<ADIF) | AUTO_CLOCK_DIV; //disable ADC
    58c4:	97 e1       	ldi	r25, 0x17	; 23
    58c6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
   
      // setup Counter1
        timeconstant.w[1] = 0;		// set ov counter to 0
    58ca:	f1 2c       	mov	r15, r1
    58cc:	e1 2c       	mov	r14, r1
        TCCR1A = 0;			// set Counter1 to normal Mode
    58ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
        TCNT1 = 0;			//set Counter to 0
    58d2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    58d6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
        TI1_INT_FLAGS = (1<<ICF1) | (1<<OCF1B) | (1<<OCF1A) | (1<<TOV1);	// reset TIFR or TIFR1
    58da:	a7 e2       	ldi	r26, 0x27	; 39
    58dc:	a6 bb       	out	0x16, r26	; 22
//        HiADC |= TXD_VAL;
        wait200us();			// wait for bandgap to start up
    58de:	0e 94 a7 07 	call	0xf4e	; 0xf4e <wait200us>
        if ((count & 0x01) == 0 ) {
    58e2:	21 2f       	mov	r18, r17
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	3e 8f       	std	Y+30, r19	; 0x1e
    58e8:	2d 8f       	std	Y+29, r18	; 0x1d
    58ea:	39 89       	ldd	r19, Y+17	; 0x11
    58ec:	31 11       	cpse	r19, r1
    58ee:	7e c1       	rjmp	.+764    	; 0x5bec <ReadInductance+0x40e>
           //first start counter, then start current
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    58f0:	81 e8       	ldi	r24, 0x81	; 129
    58f2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    58f6:	38 b8       	out	0x08, r3	; 8
        }
      
      //******************************
        while(1) {
           // Wait, until  Input Capture is set
           ii = TI1_INT_FLAGS;		//read Timer flags
    58f8:	86 b3       	in	r24, 0x16	; 22
           if (ii & (1<<ICF1))  {
    58fa:	85 ff       	sbrs	r24, 5
    58fc:	80 c1       	rjmp	.+768    	; 0x5bfe <ReadInductance+0x420>
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
                 break; 	//Timeout for Charging, above 0.65 s
              }
           }
        }
        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
    58fe:	18 b8       	out	0x08, r1	; 8
        TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<CS10);  // stop counter
    5900:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        TI1_INT_FLAGS = (1<<ICF1);			// Reset Input Capture
    5904:	50 e2       	ldi	r21, 0x20	; 32
    5906:	56 bb       	out	0x16, r21	; 22
        timeconstant.w[0] = ICR1;		// get previous Input Capture Counter flag
    5908:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    590c:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    5910:	69 01       	movw	r12, r18
      // check actual counter, if an additional overflow must be added
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    5912:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    5916:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    591a:	24 17       	cp	r18, r20
    591c:	35 07       	cpc	r19, r21
    591e:	08 f4       	brcc	.+2      	; 0x5922 <ReadInductance+0x144>
    5920:	7c c1       	rjmp	.+760    	; 0x5c1a <ReadInductance+0x43c>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
           timeconstant.w[1]++;			// count one additional OV
        }

//        ADC_PORT = TXD_VAL;		// switch ADC-Port to GND
        ADCSRA = (1<<ADEN) | (1<<ADIF) | AUTO_CLOCK_DIV; //enable ADC
    5922:	87 e9       	ldi	r24, 0x97	; 151
    5924:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5928:	74 e1       	ldi	r23, 0x14	; 20
    592a:	37 2e       	mov	r3, r23
        for (ii=0;ii<20;ii++) {
            // wait for current is near zero
            umax = W10msReadADC(rpins.pb[0]);
    592c:	80 2f       	mov	r24, r16
    592e:	0e 94 e5 07 	call	0xfca	; 0xfca <W10msReadADC>
    5932:	4c 01       	movw	r8, r24
            total_r =  ReadADC(rpins.pb[1]);
    5934:	87 2d       	mov	r24, r7
    5936:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
            if ((umax < CAP_EMPTY_LEVEL) && (total_r < CAP_EMPTY_LEVEL)) break;	// low current detected
    593a:	44 e0       	ldi	r20, 0x04	; 4
    593c:	84 16       	cp	r8, r20
    593e:	91 04       	cpc	r9, r1
    5940:	10 f4       	brcc	.+4      	; 0x5946 <ReadInductance+0x168>
    5942:	04 97       	sbiw	r24, 0x04	; 4
    5944:	18 f0       	brcs	.+6      	; 0x594c <ReadInductance+0x16e>
        for (ii=0;ii<20;ii++) {
    5946:	3a 94       	dec	r3
    5948:	31 10       	cpse	r3, r1
    594a:	f0 cf       	rjmp	.-32     	; 0x592c <ReadInductance+0x14e>
//  #undef CNT_ZERO_42
//  #undef CNT_ZERO_720
//  #define CNT_ZERO_42 7
//  #define CNT_ZERO_720 10
//#endif
        total_r = (mess_r + resistor + RRpinMI);
    594c:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <pin_rmi>
    5950:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <pin_rmi+0x1>
    5954:	e4 0d       	add	r30, r4
    5956:	f5 1d       	adc	r31, r5
    5958:	ea 0d       	add	r30, r10
    595a:	fb 1d       	adc	r31, r11
//        cnt_diff = 0;
//        if (total_r > 7000) cnt_diff = 1;
//        if (total_r > 14000) cnt_diff = 2;
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
        tmpint = ref_mv_offs;		// corrected reference voltage (for C)
    595c:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <ref_mv_offs>
    5960:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <ref_mv_offs+0x1>
        if (mess_r < R_L_VAL) {
    5964:	50 e9       	ldi	r21, 0x90	; 144
    5966:	a5 16       	cp	r10, r21
    5968:	5a e1       	ldi	r21, 0x1A	; 26
    596a:	b5 06       	cpc	r11, r21
    596c:	08 f0       	brcs	.+2      	; 0x5970 <ReadInductance+0x192>
    596e:	5d c1       	rjmp	.+698    	; 0x5c2a <ReadInductance+0x44c>
           // measurement without 680 Ohm
           cnt_diff = CNT_ZERO_42;
           if (timeconstant.dw < 225) {
              ukorr = (timeconstant.w[0] / 5) - 20;
           } else {
              ukorr = 25;
    5970:	69 e1       	ldi	r22, 0x19	; 25
           if (timeconstant.dw < 225) {
    5972:	81 ee       	ldi	r24, 0xE1	; 225
    5974:	c8 16       	cp	r12, r24
    5976:	d1 04       	cpc	r13, r1
    5978:	e1 04       	cpc	r14, r1
    597a:	f1 04       	cpc	r15, r1
    597c:	30 f4       	brcc	.+12     	; 0x598a <ReadInductance+0x1ac>
              ukorr = (timeconstant.w[0] / 5) - 20;
    597e:	c6 01       	movw	r24, r12
    5980:	65 e0       	ldi	r22, 0x05	; 5
    5982:	70 e0       	ldi	r23, 0x00	; 0
    5984:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
    5988:	64 51       	subi	r22, 0x14	; 20
           }
           tmpint -= (((REF_L_KORR * 10) / 10) + ukorr);
    598a:	28 52       	subi	r18, 0x28	; 40
    598c:	31 09       	sbc	r19, r1
    598e:	26 1b       	sub	r18, r22
    5990:	31 09       	sbc	r19, r1
    5992:	67 fd       	sbrc	r22, 7
    5994:	33 95       	inc	r19
           cnt_diff = CNT_ZERO_42;
    5996:	66 e0       	ldi	r22, 0x06	; 6
           // measurement with 680 Ohm resistor
           // if 680 Ohm resistor is used, use REF_L_KORR for correction
           cnt_diff += CNT_ZERO_720;
           tmpint += REF_L_KORR;
        }
        if (timeconstant.dw > cnt_diff) timeconstant.dw -= cnt_diff;
    5998:	86 2f       	mov	r24, r22
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	b0 e0       	ldi	r27, 0x00	; 0
    599e:	a0 e0       	ldi	r26, 0x00	; 0
    59a0:	8c 15       	cp	r24, r12
    59a2:	9d 05       	cpc	r25, r13
    59a4:	ae 05       	cpc	r26, r14
    59a6:	bf 05       	cpc	r27, r15
    59a8:	08 f0       	brcs	.+2      	; 0x59ac <ReadInductance+0x1ce>
    59aa:	48 c1       	rjmp	.+656    	; 0x5c3c <ReadInductance+0x45e>
    59ac:	c8 1a       	sub	r12, r24
    59ae:	d9 0a       	sbc	r13, r25
    59b0:	ea 0a       	sbc	r14, r26
    59b2:	fb 0a       	sbc	r15, r27
        else          timeconstant.dw = 0;
       
        if ((count&0x01) == 1) {
    59b4:	99 89       	ldd	r25, Y+17	; 0x11
    59b6:	99 23       	and	r25, r25
    59b8:	29 f0       	breq	.+10     	; 0x59c4 <ReadInductance+0x1e6>
           // second pass with delayed counter start
           timeconstant.dw += (3 * (F_CPU/1000000UL))+10;
    59ba:	aa e3       	ldi	r26, 0x3A	; 58
    59bc:	ca 0e       	add	r12, r26
    59be:	d1 1c       	adc	r13, r1
    59c0:	e1 1c       	adc	r14, r1
    59c2:	f1 1c       	adc	r15, r1
        }
        if (timeconstant.w[1] >= (F_CPU/100000UL)) timeconstant.dw = 0; // no transition found
    59c4:	b0 ea       	ldi	r27, 0xA0	; 160
    59c6:	eb 16       	cp	r14, r27
    59c8:	f1 04       	cpc	r15, r1
    59ca:	18 f0       	brcs	.+6      	; 0x59d2 <ReadInductance+0x1f4>
    59cc:	c1 2c       	mov	r12, r1
    59ce:	d1 2c       	mov	r13, r1
    59d0:	76 01       	movw	r14, r12
        if (timeconstant.dw > 10) {
    59d2:	4b e0       	ldi	r20, 0x0B	; 11
    59d4:	c4 16       	cp	r12, r20
    59d6:	d1 04       	cpc	r13, r1
    59d8:	e1 04       	cpc	r14, r1
    59da:	f1 04       	cpc	r15, r1
    59dc:	28 f0       	brcs	.+10     	; 0x59e8 <ReadInductance+0x20a>
           timeconstant.dw -= 1;
    59de:	51 e0       	ldi	r21, 0x01	; 1
    59e0:	c5 1a       	sub	r12, r21
    59e2:	d1 08       	sbc	r13, r1
    59e4:	e1 08       	sbc	r14, r1
    59e6:	f1 08       	sbc	r15, r1
        }
        // compute the maximum Voltage umax with the Resistor of the coil
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    59e8:	3f 01       	movw	r6, r30
    59ea:	91 2c       	mov	r9, r1
    59ec:	81 2c       	mov	r8, r1
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    59ee:	a8 ee       	ldi	r26, 0xE8	; 232
    59f0:	b3 e0       	ldi	r27, 0x03	; 3
    59f2:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    59f6:	6d 8b       	std	Y+21, r22	; 0x15
    59f8:	7e 8b       	std	Y+22, r23	; 0x16
    59fa:	8f 8b       	std	Y+23, r24	; 0x17
    59fc:	98 8f       	std	Y+24, r25	; 0x18
        umax = ((unsigned long)mess_r * (unsigned long)ADCconfig.U_AVCC) / total_r;
    59fe:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <ADCconfig+0x4>
    5a02:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <ADCconfig+0x5>
    5a06:	95 01       	movw	r18, r10
    5a08:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    5a0c:	a4 01       	movw	r20, r8
    5a0e:	9f 01       	movw	r18, r30
    5a10:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
        per_ref1 = ((unsigned long)tmpint * 1000) / umax;
    5a14:	44 27       	eor	r20, r20
    5a16:	55 27       	eor	r21, r21
    5a18:	6d 89       	ldd	r22, Y+21	; 0x15
    5a1a:	7e 89       	ldd	r23, Y+22	; 0x16
    5a1c:	8f 89       	ldd	r24, Y+23	; 0x17
    5a1e:	98 8d       	ldd	r25, Y+24	; 0x18
    5a20:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
//        per_ref2 = (uint8_t)MEM2_read_byte(&LogTab[per_ref1]);	// -log(1 - per_ref1/100)
        per_ref2 = get_log(per_ref1);		// -1000*log(1 - per_ref1/1000)
    5a24:	c9 01       	movw	r24, r18
    5a26:	0e 94 f6 08 	call	0x11ec	; 0x11ec <get_log>
    5a2a:	fc 01       	movw	r30, r24
          }
#endif
/* ********************************************************* */
        // inductor_lx in 0.01mH units,  L = Tau * R
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    5a2c:	a4 01       	movw	r20, r8
    5a2e:	93 01       	movw	r18, r6
    5a30:	c7 01       	movw	r24, r14
    5a32:	b6 01       	movw	r22, r12
    5a34:	0e 94 a9 3c 	call	0x7952	; 0x7952 <__mulsi3>
    5a38:	6d 8b       	std	Y+21, r22	; 0x15
    5a3a:	7e 8b       	std	Y+22, r23	; 0x16
    5a3c:	8f 8b       	std	Y+23, r24	; 0x17
    5a3e:	98 8f       	std	Y+24, r25	; 0x18
        per_ref1 = ((per_ref2 * (F_CPU/1000000UL)) + 5) / 10;
    5a40:	cf 01       	movw	r24, r30
    5a42:	b0 e0       	ldi	r27, 0x00	; 0
    5a44:	a0 e0       	ldi	r26, 0x00	; 0
    5a46:	24 e0       	ldi	r18, 0x04	; 4
    5a48:	88 0f       	add	r24, r24
    5a4a:	99 1f       	adc	r25, r25
    5a4c:	aa 1f       	adc	r26, r26
    5a4e:	bb 1f       	adc	r27, r27
    5a50:	2a 95       	dec	r18
    5a52:	d1 f7       	brne	.-12     	; 0x5a48 <ReadInductance+0x26a>
    5a54:	9c 01       	movw	r18, r24
    5a56:	ad 01       	movw	r20, r26
    5a58:	2b 5f       	subi	r18, 0xFB	; 251
    5a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5a5c:	4f 4f       	sbci	r20, 0xFF	; 255
    5a5e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a60:	29 8f       	std	Y+25, r18	; 0x19
    5a62:	3a 8f       	std	Y+26, r19	; 0x1a
    5a64:	4b 8f       	std	Y+27, r20	; 0x1b
    5a66:	5c 8f       	std	Y+28, r21	; 0x1c
    5a68:	ca 01       	movw	r24, r20
    5a6a:	b9 01       	movw	r22, r18
    5a6c:	2a e0       	ldi	r18, 0x0A	; 10
    5a6e:	30 e0       	ldi	r19, 0x00	; 0
    5a70:	40 e0       	ldi	r20, 0x00	; 0
    5a72:	50 e0       	ldi	r21, 0x00	; 0
    5a74:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
        inductance[count] = (timeconstant.dw * total_r ) / per_ref1;
    5a78:	44 27       	eor	r20, r20
    5a7a:	55 27       	eor	r21, r21
    5a7c:	6d 89       	ldd	r22, Y+21	; 0x15
    5a7e:	7e 89       	ldd	r23, Y+22	; 0x16
    5a80:	8f 89       	ldd	r24, Y+23	; 0x17
    5a82:	98 8d       	ldd	r25, Y+24	; 0x18
    5a84:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    5a88:	ed 8d       	ldd	r30, Y+29	; 0x1d
    5a8a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    5a8c:	ee 0f       	add	r30, r30
    5a8e:	ff 1f       	adc	r31, r31
    5a90:	ee 0f       	add	r30, r30
    5a92:	ff 1f       	adc	r31, r31
    5a94:	81 e0       	ldi	r24, 0x01	; 1
    5a96:	90 e0       	ldi	r25, 0x00	; 0
    5a98:	8c 0f       	add	r24, r28
    5a9a:	9d 1f       	adc	r25, r29
    5a9c:	e8 0f       	add	r30, r24
    5a9e:	f9 1f       	adc	r31, r25
    5aa0:	20 83       	st	Z, r18
    5aa2:	31 83       	std	Z+1, r19	; 0x01
    5aa4:	42 83       	std	Z+2, r20	; 0x02
    5aa6:	53 83       	std	Z+3, r21	; 0x03
        if (((count&0x01) == 0) && (timeconstant.dw > ((F_CPU/1000000UL)+3))) {
    5aa8:	99 89       	ldd	r25, Y+17	; 0x11
    5aaa:	91 11       	cpse	r25, r1
    5aac:	15 c0       	rjmp	.+42     	; 0x5ad8 <ReadInductance+0x2fa>
    5aae:	a4 e1       	ldi	r26, 0x14	; 20
    5ab0:	ca 16       	cp	r12, r26
    5ab2:	d1 04       	cpc	r13, r1
    5ab4:	e1 04       	cpc	r14, r1
    5ab6:	f1 04       	cpc	r15, r1
    5ab8:	78 f0       	brcs	.+30     	; 0x5ad8 <ReadInductance+0x2fa>
    5aba:	1f 5f       	subi	r17, 0xFF	; 255
           // transition is found, measurement with delayed counter start is not necessary
           inductance[count+1] = inductance[count];	// set delayed measurement to same value
    5abc:	b4 e0       	ldi	r27, 0x04	; 4
    5abe:	1b 9f       	mul	r17, r27
    5ac0:	f0 01       	movw	r30, r0
    5ac2:	11 24       	eor	r1, r1
    5ac4:	81 e0       	ldi	r24, 0x01	; 1
    5ac6:	90 e0       	ldi	r25, 0x00	; 0
    5ac8:	8c 0f       	add	r24, r28
    5aca:	9d 1f       	adc	r25, r29
    5acc:	e8 0f       	add	r30, r24
    5ace:	f9 1f       	adc	r31, r25
    5ad0:	20 83       	st	Z, r18
    5ad2:	31 83       	std	Z+1, r19	; 0x01
    5ad4:	42 83       	std	Z+2, r20	; 0x02
    5ad6:	53 83       	std	Z+3, r21	; 0x03
           count++;		// skip the delayed measurement
        }
        wdt_reset();
    5ad8:	a8 95       	wdr
     for (count=0;count<4;count++) {
    5ada:	1f 5f       	subi	r17, 0xFF	; 255
    5adc:	14 30       	cpi	r17, 0x04	; 4
    5ade:	08 f4       	brcc	.+2      	; 0x5ae2 <ReadInductance+0x304>
    5ae0:	a6 ce       	rjmp	.-692    	; 0x582e <ReadInductance+0x50>
     }  //end for count
     ADC_PORT = TXD_VAL;		// switch ADC Port to GND
    5ae2:	18 b8       	out	0x08, r1	; 8
     wait_about20ms();
    5ae4:	84 e0       	ldi	r24, 0x04	; 4
    5ae6:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
     nr_pol1 = 0;
     if (inductance[1] > inductance[0]) { nr_pol1 = 1; } 
    5aea:	91 e0       	ldi	r25, 0x01	; 1
    5aec:	0d 81       	ldd	r16, Y+5	; 0x05
    5aee:	1e 81       	ldd	r17, Y+6	; 0x06
    5af0:	2f 81       	ldd	r18, Y+7	; 0x07
    5af2:	38 85       	ldd	r19, Y+8	; 0x08
    5af4:	49 81       	ldd	r20, Y+1	; 0x01
    5af6:	5a 81       	ldd	r21, Y+2	; 0x02
    5af8:	6b 81       	ldd	r22, Y+3	; 0x03
    5afa:	7c 81       	ldd	r23, Y+4	; 0x04
    5afc:	40 17       	cp	r20, r16
    5afe:	51 07       	cpc	r21, r17
    5b00:	62 07       	cpc	r22, r18
    5b02:	73 07       	cpc	r23, r19
    5b04:	08 f0       	brcs	.+2      	; 0x5b08 <ReadInductance+0x32a>
    5b06:	90 e0       	ldi	r25, 0x00	; 0
     nr_pol2 = 2;
     if (inductance[3] > inductance[2]) { nr_pol2 = 3; } 
    5b08:	0d 85       	ldd	r16, Y+13	; 0x0d
    5b0a:	1e 85       	ldd	r17, Y+14	; 0x0e
    5b0c:	2f 85       	ldd	r18, Y+15	; 0x0f
    5b0e:	38 89       	ldd	r19, Y+16	; 0x10
    5b10:	49 85       	ldd	r20, Y+9	; 0x09
    5b12:	5a 85       	ldd	r21, Y+10	; 0x0a
    5b14:	6b 85       	ldd	r22, Y+11	; 0x0b
    5b16:	7c 85       	ldd	r23, Y+12	; 0x0c
    5b18:	83 e0       	ldi	r24, 0x03	; 3
    5b1a:	40 17       	cp	r20, r16
    5b1c:	51 07       	cpc	r21, r17
    5b1e:	62 07       	cpc	r22, r18
    5b20:	73 07       	cpc	r23, r19
    5b22:	08 f0       	brcs	.+2      	; 0x5b26 <ReadInductance+0x348>
     nr_pol2 = 2;
    5b24:	82 e0       	ldi	r24, 0x02	; 2
     if (inductance[nr_pol2] < inductance[nr_pol1]) nr_pol1 = nr_pol2;
    5b26:	24 e0       	ldi	r18, 0x04	; 4
    5b28:	82 9f       	mul	r24, r18
    5b2a:	d0 01       	movw	r26, r0
    5b2c:	11 24       	eor	r1, r1
    5b2e:	41 e0       	ldi	r20, 0x01	; 1
    5b30:	50 e0       	ldi	r21, 0x00	; 0
    5b32:	4c 0f       	add	r20, r28
    5b34:	5d 1f       	adc	r21, r29
    5b36:	a4 0f       	add	r26, r20
    5b38:	b5 1f       	adc	r27, r21
    5b3a:	54 e0       	ldi	r21, 0x04	; 4
    5b3c:	95 9f       	mul	r25, r21
    5b3e:	f0 01       	movw	r30, r0
    5b40:	11 24       	eor	r1, r1
    5b42:	21 e0       	ldi	r18, 0x01	; 1
    5b44:	30 e0       	ldi	r19, 0x00	; 0
    5b46:	2c 0f       	add	r18, r28
    5b48:	3d 1f       	adc	r19, r29
    5b4a:	e2 0f       	add	r30, r18
    5b4c:	f3 1f       	adc	r31, r19
    5b4e:	0d 91       	ld	r16, X+
    5b50:	1d 91       	ld	r17, X+
    5b52:	2d 91       	ld	r18, X+
    5b54:	3c 91       	ld	r19, X
    5b56:	40 81       	ld	r20, Z
    5b58:	51 81       	ldd	r21, Z+1	; 0x01
    5b5a:	62 81       	ldd	r22, Z+2	; 0x02
    5b5c:	73 81       	ldd	r23, Z+3	; 0x03
    5b5e:	04 17       	cp	r16, r20
    5b60:	15 07       	cpc	r17, r21
    5b62:	26 07       	cpc	r18, r22
    5b64:	37 07       	cpc	r19, r23
    5b66:	08 f0       	brcs	.+2      	; 0x5b6a <ReadInductance+0x38c>
     nr_pol1 = 0;
    5b68:	89 2f       	mov	r24, r25
     inductor_lx = inductance[nr_pol1];
    5b6a:	34 e0       	ldi	r19, 0x04	; 4
    5b6c:	83 9f       	mul	r24, r19
    5b6e:	f0 01       	movw	r30, r0
    5b70:	11 24       	eor	r1, r1
    5b72:	41 e0       	ldi	r20, 0x01	; 1
    5b74:	50 e0       	ldi	r21, 0x00	; 0
    5b76:	4c 0f       	add	r20, r28
    5b78:	5d 1f       	adc	r21, r29
    5b7a:	e4 0f       	add	r30, r20
    5b7c:	f5 1f       	adc	r31, r21
    5b7e:	40 81       	ld	r20, Z
    5b80:	51 81       	ldd	r21, Z+1	; 0x01
    5b82:	62 81       	ldd	r22, Z+2	; 0x02
    5b84:	73 81       	ldd	r23, Z+3	; 0x03
    5b86:	40 93 9f 01 	sts	0x019F, r20	; 0x80019f <inductor_lx>
    5b8a:	50 93 a0 01 	sts	0x01A0, r21	; 0x8001a0 <inductor_lx+0x1>
    5b8e:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <inductor_lx+0x2>
    5b92:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <inductor_lx+0x3>
     inductor_lpre = -5;	// 10 uH units
     if (((nr_pol1 & 1) == 1) || (resistor >= 240)) {
    5b96:	80 fd       	sbrc	r24, 0
    5b98:	55 c0       	rjmp	.+170    	; 0x5c44 <ReadInductance+0x466>
    5b9a:	80 ef       	ldi	r24, 0xF0	; 240
    5b9c:	48 16       	cp	r4, r24
    5b9e:	51 04       	cpc	r5, r1
    5ba0:	08 f0       	brcs	.+2      	; 0x5ba4 <ReadInductance+0x3c6>
    5ba2:	50 c0       	rjmp	.+160    	; 0x5c44 <ReadInductance+0x466>
     inductor_lpre = -5;	// 10 uH units
    5ba4:	8b ef       	ldi	r24, 0xFB	; 251
    5ba6:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>
        // with 680 Ohm resistor total_r is more than 7460
        inductor_lpre = -4;	// 100 uH units
        inductor_lx = (inductor_lx + 5) / 10;
     } 
     if (inductor_lx == 0) inductor_lpre = 0;	//mark as zero
    5baa:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <inductor_lx>
    5bae:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <inductor_lx+0x1>
    5bb2:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <inductor_lx+0x2>
    5bb6:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <inductor_lx+0x3>
    5bba:	89 2b       	or	r24, r25
    5bbc:	8a 2b       	or	r24, r26
    5bbe:	8b 2b       	or	r24, r27
    5bc0:	11 f4       	brne	.+4      	; 0x5bc6 <ReadInductance+0x3e8>
    5bc2:	10 92 9e 01 	sts	0x019E, r1	; 0x80019e <inductor_lpre>

  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    5bc6:	17 b8       	out	0x07, r1	; 7
  R_DDR = 0;			// switch all resistor ports to input
    5bc8:	14 b8       	out	0x04, r1	; 4
#endif
  return;
 } // end ReadInductance()
    5bca:	6e 96       	adiw	r28, 0x1e	; 30
    5bcc:	e2 e1       	ldi	r30, 0x12	; 18
    5bce:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>
           rpins.pw = Rnum2pins(res_num);	// compute the two pinnumbers for resistor res_num
    5bd2:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Rnum2pins>
           rpins.pb[0] = rpins.pb[1];		// swap the pins LowPin and HighPin
    5bd6:	98 27       	eor	r25, r24
    5bd8:	89 27       	eor	r24, r25
    5bda:	98 27       	eor	r25, r24
    5bdc:	2e ce       	rjmp	.-932    	; 0x583a <ReadInductance+0x5c>
           R_DDR = LoPinR_L;   		// switch R_L resistor port for LowPin to output (GND)
    5bde:	e4 b9       	out	0x04, r30	; 4
           ADC_DDR = HiADC | TXD_MSK;	// switch HiADC Pin to GND 
    5be0:	37 b8       	out	0x07, r3	; 7
           mess_r = RR680MI;			// use 680 Ohm and PinR_L for current measurement
    5be2:	a0 90 19 01 	lds	r10, 0x0119	; 0x800119 <resis680mi>
    5be6:	b0 90 1a 01 	lds	r11, 0x011A	; 0x80011a <resis680mi+0x1>
    5bea:	51 ce       	rjmp	.-862    	; 0x588e <ReadInductance+0xb0>
           ADC_PORT = HiADC;		// switch ADC-Port to VCC
    5bec:	38 b8       	out	0x08, r3	; 8
           wait3us();		// ignore current peak from capacity
    5bee:	0e 94 b0 07 	call	0xf60	; 0xf60 <wait3us>
           TI1_INT_FLAGS = (1<<ICF1);	// Reset Input Capture
    5bf2:	40 e2       	ldi	r20, 0x20	; 32
    5bf4:	46 bb       	out	0x16, r20	; 22
           TCCR1B =  (1<<ICNC1) | (0<<ICES1) | (1<<CS10);	//start counter 1MHz or 8MHz
    5bf6:	81 e8       	ldi	r24, 0x81	; 129
    5bf8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    5bfc:	7d ce       	rjmp	.-774    	; 0x58f8 <ReadInductance+0x11a>
           if((ii & (1<<TOV1))) {		// counter overflow, 65.536 ms @ 1MHz, 8.192ms @ 8MHz
    5bfe:	80 ff       	sbrs	r24, 0
    5c00:	7b ce       	rjmp	.-778    	; 0x58f8 <ReadInductance+0x11a>
              TI1_INT_FLAGS = (1<<TOV1);	// Reset OV Flag
    5c02:	91 e0       	ldi	r25, 0x01	; 1
    5c04:	96 bb       	out	0x16, r25	; 22
              wdt_reset();
    5c06:	a8 95       	wdr
              timeconstant.w[1]++;		// count one OV
    5c08:	97 01       	movw	r18, r14
    5c0a:	2f 5f       	subi	r18, 0xFF	; 255
    5c0c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c0e:	79 01       	movw	r14, r18
              if(timeconstant.w[1] == (F_CPU/100000UL)) {
    5c10:	20 3a       	cpi	r18, 0xA0	; 160
    5c12:	31 05       	cpc	r19, r1
    5c14:	09 f0       	breq	.+2      	; 0x5c18 <ReadInductance+0x43a>
    5c16:	70 ce       	rjmp	.-800    	; 0x58f8 <ReadInductance+0x11a>
    5c18:	72 ce       	rjmp	.-796    	; 0x58fe <ReadInductance+0x120>
        if((TCNT1 > timeconstant.w[0]) && (ii & (1<<TOV1))) {
    5c1a:	80 ff       	sbrs	r24, 0
    5c1c:	82 ce       	rjmp	.-764    	; 0x5922 <ReadInductance+0x144>
           TI1_INT_FLAGS = (1<<TOV1);		// Reset OV Flag
    5c1e:	a1 e0       	ldi	r26, 0x01	; 1
    5c20:	a6 bb       	out	0x16, r26	; 22
           timeconstant.w[1]++;			// count one additional OV
    5c22:	bf ef       	ldi	r27, 0xFF	; 255
    5c24:	eb 1a       	sub	r14, r27
    5c26:	fb 0a       	sbc	r15, r27
    5c28:	7c ce       	rjmp	.-776    	; 0x5922 <ReadInductance+0x144>
        cnt_diff = total_r / ((14000UL * 8) / (F_CPU/1000000UL));
    5c2a:	cf 01       	movw	r24, r30
    5c2c:	68 e5       	ldi	r22, 0x58	; 88
    5c2e:	7b e1       	ldi	r23, 0x1B	; 27
    5c30:	0e 94 c4 3c 	call	0x7988	; 0x7988 <__udivmodhi4>
           cnt_diff += CNT_ZERO_720;
    5c34:	69 5f       	subi	r22, 0xF9	; 249
           tmpint += REF_L_KORR;
    5c36:	28 5d       	subi	r18, 0xD8	; 216
    5c38:	3f 4f       	sbci	r19, 0xFF	; 255
    5c3a:	ae ce       	rjmp	.-676    	; 0x5998 <ReadInductance+0x1ba>
        else          timeconstant.dw = 0;
    5c3c:	c1 2c       	mov	r12, r1
    5c3e:	d1 2c       	mov	r13, r1
    5c40:	76 01       	movw	r14, r12
    5c42:	b8 ce       	rjmp	.-656    	; 0x59b4 <ReadInductance+0x1d6>
        inductor_lpre = -4;	// 100 uH units
    5c44:	8c ef       	ldi	r24, 0xFC	; 252
    5c46:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>
        inductor_lx = (inductor_lx + 5) / 10;
    5c4a:	db 01       	movw	r26, r22
    5c4c:	ca 01       	movw	r24, r20
    5c4e:	05 96       	adiw	r24, 0x05	; 5
    5c50:	a1 1d       	adc	r26, r1
    5c52:	b1 1d       	adc	r27, r1
    5c54:	bc 01       	movw	r22, r24
    5c56:	cd 01       	movw	r24, r26
    5c58:	2a e0       	ldi	r18, 0x0A	; 10
    5c5a:	30 e0       	ldi	r19, 0x00	; 0
    5c5c:	40 e0       	ldi	r20, 0x00	; 0
    5c5e:	50 e0       	ldi	r21, 0x00	; 0
    5c60:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    5c64:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <inductor_lx>
    5c68:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <inductor_lx+0x1>
    5c6c:	40 93 a1 01 	sts	0x01A1, r20	; 0x8001a1 <inductor_lx+0x2>
    5c70:	50 93 a2 01 	sts	0x01A2, r21	; 0x8001a2 <inductor_lx+0x3>
    5c74:	9a cf       	rjmp	.-204    	; 0x5baa <ReadInductance+0x3cc>

00005c76 <GetVloss>:
#include <stdlib.h>
#include "Transistortester.h"


//=================================================================
void GetVloss() {
    5c76:	a7 e0       	ldi	r26, 0x07	; 7
    5c78:	b0 e0       	ldi	r27, 0x00	; 0
    5c7a:	e1 e4       	ldi	r30, 0x41	; 65
    5c7c:	fe e2       	ldi	r31, 0x2E	; 46
    5c7e:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__+0x4>
  } lval;
  uint8_t ii;
  uint8_t HiPinR_L;
  uint8_t LoADC;

  if (cap.v_loss > 0) {
    5c82:	00 91 4a 01 	lds	r16, 0x014A	; 0x80014a <cap+0xe>
    5c86:	10 91 4b 01 	lds	r17, 0x014B	; 0x80014b <cap+0xf>
    5c8a:	01 15       	cp	r16, r1
    5c8c:	11 05       	cpc	r17, r1
    5c8e:	09 f0       	breq	.+2      	; 0x5c92 <GetVloss+0x1c>
    5c90:	b1 c0       	rjmp	.+354    	; 0x5df4 <GetVloss+0x17e>
     return;		// Voltage loss is already known (big Capacitor)
  }
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+cap.ca-TP_MIN) | TXD_MSK;
#else
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+cap.ca-TP_MIN) | TXD_MSK;
    5c92:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <cap+0x10>
    5c96:	f0 e0       	ldi	r31, 0x00	; 0
    5c98:	ec 5b       	subi	r30, 0xBC	; 188
    5c9a:	fd 4f       	sbci	r31, 0xFD	; 253
    5c9c:	24 91       	lpm	r18, Z
    5c9e:	29 83       	std	Y+1, r18	; 0x01
#endif
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[cap.cb-TP_MIN]);	//R_L mask for HighPin R_L load
    5ca0:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <cap+0x11>
    5ca4:	f0 e0       	ldi	r31, 0x00	; 0
    5ca6:	ef 5b       	subi	r30, 0xBF	; 191
    5ca8:	fd 4f       	sbci	r31, 0xFD	; 253
    5caa:	34 91       	lpm	r19, Z
    5cac:	3f 83       	std	Y+7, r19	; 0x07

  EntladePins();			// discharge capacitor
    5cae:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    5cb2:	18 b8       	out	0x08, r1	; 8
  R_PORT = 0;				// switch R-Port to GND
    5cb4:	15 b8       	out	0x05, r1	; 5
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    5cb6:	49 81       	ldd	r20, Y+1	; 0x01
    5cb8:	47 b9       	out	0x07, r20	; 7
  R_DDR = HiPinR_L;			// switch R_L port for HighPin to output (GND)
    5cba:	5f 81       	ldd	r21, Y+7	; 0x07
    5cbc:	54 b9       	out	0x04, r21	; 4
  adcv[0] = ReadADC(cap.cb);		// voltage before any load 
    5cbe:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    5cc2:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    5cc6:	7c 01       	movw	r14, r24
// ******** should adcv[0] be measured without current???
  if ((cap.cpre_max > -9) || (cap.cpre_max < -12)) return;	// too much or too less capacity
    5cc8:	60 91 4f 01 	lds	r22, 0x014F	; 0x80014f <cap+0x13>
    5ccc:	86 2f       	mov	r24, r22
    5cce:	84 5f       	subi	r24, 0xF4	; 244
    5cd0:	84 30       	cpi	r24, 0x04	; 4
    5cd2:	08 f0       	brcs	.+2      	; 0x5cd6 <GetVloss+0x60>
    5cd4:	8f c0       	rjmp	.+286    	; 0x5df4 <GetVloss+0x17e>
  lval.dw = cap.cval_max;
    5cd6:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cap+0x4>
    5cda:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <cap+0x5>
    5cde:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <cap+0x6>
    5ce2:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <cap+0x7>
  for (ii=cap.cpre_max+15;ii<7;ii++) {
    5ce6:	61 5f       	subi	r22, 0xF1	; 241
    5ce8:	6d 83       	std	Y+5, r22	; 0x05
     lval.dw = (lval.dw + 5) / 10;
    5cea:	2a e0       	ldi	r18, 0x0A	; 10
    5cec:	42 2e       	mov	r4, r18
    5cee:	51 2c       	mov	r5, r1
    5cf0:	61 2c       	mov	r6, r1
    5cf2:	71 2c       	mov	r7, r1
    5cf4:	9c 01       	movw	r18, r24
    5cf6:	ad 01       	movw	r20, r26
    5cf8:	2b 5f       	subi	r18, 0xFB	; 251
    5cfa:	3f 4f       	sbci	r19, 0xFF	; 255
    5cfc:	4f 4f       	sbci	r20, 0xFF	; 255
    5cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5d00:	29 83       	std	Y+1, r18	; 0x01
    5d02:	3a 83       	std	Y+2, r19	; 0x02
    5d04:	4b 83       	std	Y+3, r20	; 0x03
    5d06:	5c 83       	std	Y+4, r21	; 0x04
    5d08:	ca 01       	movw	r24, r20
    5d0a:	b9 01       	movw	r22, r18
    5d0c:	a3 01       	movw	r20, r6
    5d0e:	92 01       	movw	r18, r4
    5d10:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    5d14:	49 01       	movw	r8, r18
    5d16:	5a 01       	movw	r10, r20
    5d18:	da 01       	movw	r26, r20
    5d1a:	c9 01       	movw	r24, r18
  for (ii=cap.cpre_max+15;ii<7;ii++) {
    5d1c:	3d 81       	ldd	r19, Y+5	; 0x05
    5d1e:	3f 5f       	subi	r19, 0xFF	; 255
    5d20:	3d 83       	std	Y+5, r19	; 0x05
    5d22:	37 30       	cpi	r19, 0x07	; 7
    5d24:	39 f7       	brne	.-50     	; 0x5cf4 <GetVloss+0x7e>
  }
  if (lval.dw > 5000) {
    5d26:	29 81       	ldd	r18, Y+1	; 0x01
    5d28:	3a 81       	ldd	r19, Y+2	; 0x02
    5d2a:	4b 81       	ldd	r20, Y+3	; 0x03
    5d2c:	5c 81       	ldd	r21, Y+4	; 0x04
    5d2e:	2a 35       	cpi	r18, 0x5A	; 90
    5d30:	33 4c       	sbci	r19, 0xC3	; 195
    5d32:	41 05       	cpc	r20, r1
    5d34:	51 05       	cpc	r21, r1
    5d36:	08 f0       	brcs	.+2      	; 0x5d3a <GetVloss+0xc4>
    5d38:	5d c0       	rjmp	.+186    	; 0x5df4 <GetVloss+0x17e>
     /* capacity more than 50uF, Voltage loss is already measured  */
     return;
  }
  if (lval.w[0] < 5) return;		// Capacity below 5nF
    5d3a:	05 97       	sbiw	r24, 0x05	; 5
    5d3c:	08 f4       	brcc	.+2      	; 0x5d40 <GetVloss+0xca>
    5d3e:	5a c0       	rjmp	.+180    	; 0x5df4 <GetVloss+0x17e>
  R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    5d40:	8f 81       	ldd	r24, Y+7	; 0x07
    5d42:	85 b9       	out	0x05, r24	; 5
  R_DDR = HiPinR_L;			//switch Pin to output, across R to GND or VCC
    5d44:	84 b9       	out	0x04, r24	; 4
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    5d46:	1a 82       	std	Y+2, r1	; 0x02
    5d48:	19 82       	std	Y+1, r1	; 0x01
    5d4a:	49 81       	ldd	r20, Y+1	; 0x01
    5d4c:	5a 81       	ldd	r21, Y+2	; 0x02
    5d4e:	48 15       	cp	r20, r8
    5d50:	59 05       	cpc	r21, r9
    5d52:	08 f4       	brcc	.+2      	; 0x5d56 <GetVloss+0xe0>
    5d54:	53 c0       	rjmp	.+166    	; 0x5dfc <GetVloss+0x186>
//     wait50us();			// wait exactly 50us
     wait5us();			// wait exactly 5us
  }
  R_DDR = 0;				// switch back to input
    5d56:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0;			// no Pull up
    5d58:	15 b8       	out	0x05, r1	; 5
 // wait10us();			//wait a little time
  wdt_reset();
    5d5a:	a8 95       	wdr
  // read voltage without current
  ADCconfig.Samples = 5;		// set ADC to only 5 samples
    5d5c:	85 e0       	ldi	r24, 0x05	; 5
    5d5e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
  adcv[2] = ReadADC(cap.cb);
    5d62:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    5d66:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    5d6a:	89 83       	std	Y+1, r24	; 0x01
    5d6c:	9a 83       	std	Y+2, r25	; 0x02
  if (adcv[2] > adcv[0]) {
    5d6e:	89 81       	ldd	r24, Y+1	; 0x01
    5d70:	9a 81       	ldd	r25, Y+2	; 0x02
    5d72:	e8 16       	cp	r14, r24
    5d74:	f9 06       	cpc	r15, r25
    5d76:	08 f0       	brcs	.+2      	; 0x5d7a <GetVloss+0x104>
    5d78:	4a c0       	rjmp	.+148    	; 0x5e0e <GetVloss+0x198>
     adcv[2] -= adcv[0];		//difference to beginning voltage
    5d7a:	8e 19       	sub	r24, r14
    5d7c:	9f 09       	sbc	r25, r15
    5d7e:	9e 83       	std	Y+6, r25	; 0x06
    5d80:	8d 83       	std	Y+5, r24	; 0x05
  } else {
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
  }
  // wait 2x the time which was required for loading
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    5d82:	d1 2c       	mov	r13, r1
    5d84:	c1 2c       	mov	r12, r1
    5d86:	c8 14       	cp	r12, r8
    5d88:	d9 04       	cpc	r13, r9
    5d8a:	08 f4       	brcc	.+2      	; 0x5d8e <GetVloss+0x118>
    5d8c:	43 c0       	rjmp	.+134    	; 0x5e14 <GetVloss+0x19e>
//     wait50us();
     wait5us();
  }
  adcv[3] = ReadADC(cap.cb);	// read voltage again, is discharged only a little bit ?
    5d8e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    5d92:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    5d96:	9c 01       	movw	r18, r24
  ADCconfig.Samples = ANZ_MESS;		// set ADC back to configured No. of samples
    5d98:	89 e1       	ldi	r24, 0x19	; 25
    5d9a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <ADCconfig>
  wdt_reset();
    5d9e:	a8 95       	wdr
  if (adcv[3] > adcv[0]) {
    5da0:	e2 16       	cp	r14, r18
    5da2:	f3 06       	cpc	r15, r19
    5da4:	18 f4       	brcc	.+6      	; 0x5dac <GetVloss+0x136>
     adcv[3] -= adcv[0];		// difference to beginning voltage
    5da6:	89 01       	movw	r16, r18
    5da8:	0e 19       	sub	r16, r14
    5daa:	1f 09       	sbc	r17, r15
  } else {
     adcv[3] = 0;			// voltage is lower or same as beginning voltage
  }
  if (adcv[2] > adcv[3]) {
    5dac:	2d 81       	ldd	r18, Y+5	; 0x05
    5dae:	3e 81       	ldd	r19, Y+6	; 0x06
    5db0:	02 17       	cp	r16, r18
    5db2:	13 07       	cpc	r17, r19
    5db4:	c8 f4       	brcc	.+50     	; 0x5de8 <GetVloss+0x172>
     // build difference to load voltage
     adcv[1] = adcv[2] - adcv[3];	// lost voltage during load time wait
    5db6:	20 1b       	sub	r18, r16
    5db8:	31 0b       	sbc	r19, r17
  }
  // compute voltage drop as part from loaded voltage
  if (adcv[1] > 0) {
     // there is any voltage drop (adcv[1]) !
     // adcv[2] is the loaded voltage.
     cap.v_loss = (unsigned long)(adcv[1] * 500UL) / adcv[2];
    5dba:	a4 ef       	ldi	r26, 0xF4	; 244
    5dbc:	b1 e0       	ldi	r27, 0x01	; 1
    5dbe:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    5dc2:	69 83       	std	Y+1, r22	; 0x01
    5dc4:	7a 83       	std	Y+2, r23	; 0x02
    5dc6:	8b 83       	std	Y+3, r24	; 0x03
    5dc8:	9c 83       	std	Y+4, r25	; 0x04
    5dca:	8d 81       	ldd	r24, Y+5	; 0x05
    5dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    5dce:	9c 01       	movw	r18, r24
    5dd0:	50 e0       	ldi	r21, 0x00	; 0
    5dd2:	40 e0       	ldi	r20, 0x00	; 0
    5dd4:	69 81       	ldd	r22, Y+1	; 0x01
    5dd6:	7a 81       	ldd	r23, Y+2	; 0x02
    5dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    5dda:	9c 81       	ldd	r25, Y+4	; 0x04
    5ddc:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    5de0:	30 93 4b 01 	sts	0x014B, r19	; 0x80014b <cap+0xf>
    5de4:	20 93 4a 01 	sts	0x014A, r18	; 0x80014a <cap+0xe>
  lcd_line4();
  DisplayValue16(lval.w[0],0,'x',4);
#endif

  // discharge capacitor again
  EntladePins();		// discharge capacitors
    5de8:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    5dec:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    5dee:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			// switch all resistor ports to input
    5df0:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    5df2:	15 b8       	out	0x05, r1	; 5
#endif
  return;
 } // end GetVloss()
    5df4:	27 96       	adiw	r28, 0x07	; 7
    5df6:	e0 e1       	ldi	r30, 0x10	; 16
    5df8:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__+0x4>
     wait5us();			// wait exactly 5us
    5dfc:	0e 94 ae 07 	call	0xf5c	; 0xf5c <wait5us>
  for (tmpint=0;tmpint<lval.w[0];tmpint+=2) {
    5e00:	29 81       	ldd	r18, Y+1	; 0x01
    5e02:	3a 81       	ldd	r19, Y+2	; 0x02
    5e04:	2e 5f       	subi	r18, 0xFE	; 254
    5e06:	3f 4f       	sbci	r19, 0xFF	; 255
    5e08:	3a 83       	std	Y+2, r19	; 0x02
    5e0a:	29 83       	std	Y+1, r18	; 0x01
    5e0c:	9e cf       	rjmp	.-196    	; 0x5d4a <GetVloss+0xd4>
     adcv[2] = 0;			// voltage is lower or same as beginning voltage
    5e0e:	1e 82       	std	Y+6, r1	; 0x06
    5e10:	1d 82       	std	Y+5, r1	; 0x05
    5e12:	b7 cf       	rjmp	.-146    	; 0x5d82 <GetVloss+0x10c>
     wait5us();
    5e14:	0e 94 ae 07 	call	0xf5c	; 0xf5c <wait5us>
  for (tmpint=0;tmpint<lval.w[0];tmpint++) {
    5e18:	9f ef       	ldi	r25, 0xFF	; 255
    5e1a:	c9 1a       	sub	r12, r25
    5e1c:	d9 0a       	sbc	r13, r25
    5e1e:	b3 cf       	rjmp	.-154    	; 0x5d86 <GetVloss+0x110>

00005e20 <message2line>:

/* ****************************************************************** */
/* message2line writes the message corresponding to the number to LCD */
/* ****************************************************************** */
void message2line(uint8_t number) { 
     if (number > MODE_LAST) number -= (MODE_LAST + 1);
    5e20:	8c 30       	cpi	r24, 0x0C	; 12
    5e22:	08 f0       	brcs	.+2      	; 0x5e26 <message2line+0x6>
    5e24:	8c 50       	subi	r24, 0x0C	; 12
     if (number == MODE_TRANS) lcd_MEM2_string(TESTER_str);
    5e26:	81 11       	cpse	r24, r1
    5e28:	05 c0       	rjmp	.+10     	; 0x5e34 <message2line+0x14>
    5e2a:	80 e2       	ldi	r24, 0x20	; 32
    5e2c:	92 e0       	ldi	r25, 0x02	; 2
        lcd_MEM2_string(SHOW_str);
     }
 #endif
 #if (USE_OFF == 1)
     if (number == MODE_OFF) {
        lcd_MEM2_string(OFF_str);
    5e2e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    5e32:	1c c0       	rjmp	.+56     	; 0x5e6c <message2line+0x4c>
     if (number == MODE_FREQ) lcd_MEM2_string(FREQ_str);
    5e34:	81 30       	cpi	r24, 0x01	; 1
    5e36:	29 f0       	breq	.+10     	; 0x5e42 <message2line+0x22>
     if (number == MODE_FGEN) lcd_MEM2_string(F_GEN_str);
    5e38:	82 30       	cpi	r24, 0x02	; 2
    5e3a:	31 f4       	brne	.+12     	; 0x5e48 <message2line+0x28>
    5e3c:	87 ef       	ldi	r24, 0xF7	; 247
    5e3e:	91 e0       	ldi	r25, 0x01	; 1
    5e40:	f6 cf       	rjmp	.-20     	; 0x5e2e <message2line+0xe>
     if (number == MODE_FREQ) lcd_MEM2_string(FREQ_str);
    5e42:	84 eb       	ldi	r24, 0xB4	; 180
    5e44:	91 e0       	ldi	r25, 0x01	; 1
    5e46:	f3 cf       	rjmp	.-26     	; 0x5e2e <message2line+0xe>
     if (number == MODE_PWM) lcd_MEM2_string(PWM_10bit_str);
    5e48:	83 30       	cpi	r24, 0x03	; 3
    5e4a:	99 f0       	breq	.+38     	; 0x5e72 <message2line+0x52>
     if (number == MODE_ESR) lcd_MEM2_string(C_ESR_str);
    5e4c:	84 30       	cpi	r24, 0x04	; 4
    5e4e:	a1 f0       	breq	.+40     	; 0x5e78 <message2line+0x58>
     if (number == MODE_RESIS) lcd_MEM_string(RESIS_13_str);
    5e50:	85 30       	cpi	r24, 0x05	; 5
    5e52:	a9 f0       	breq	.+42     	; 0x5e7e <message2line+0x5e>
     if (number == MODE_CAP13) lcd_MEM_string(CAP_13_str);
    5e54:	86 30       	cpi	r24, 0x06	; 6
    5e56:	b1 f0       	breq	.+44     	; 0x5e84 <message2line+0x64>
     if (number == MODE_BIG_CAP_CORR) lcd_MEM2_string(SetCapCorr_str);
    5e58:	87 30       	cpi	r24, 0x07	; 7
    5e5a:	b9 f0       	breq	.+46     	; 0x5e8a <message2line+0x6a>
     if (number == MODE_SELFTEST) lcd_MEM2_string(FULLCHECK_str);
    5e5c:	89 30       	cpi	r24, 0x09	; 9
    5e5e:	c1 f0       	breq	.+48     	; 0x5e90 <message2line+0x70>
     if (number == MODE_VEXT) lcd_MEM_string(VOLTAGE_str); 
    5e60:	88 30       	cpi	r24, 0x08	; 8
    5e62:	c9 f0       	breq	.+50     	; 0x5e96 <message2line+0x76>
     if (number == MODE_SHOW) {
    5e64:	8a 30       	cpi	r24, 0x0A	; 10
    5e66:	d1 f0       	breq	.+52     	; 0x5e9c <message2line+0x7c>
     if (number == MODE_OFF) {
    5e68:	8b 30       	cpi	r24, 0x0B	; 11
    5e6a:	d9 f0       	breq	.+54     	; 0x5ea2 <message2line+0x82>
     }
 #endif
 lcd_clear_line();
    5e6c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <lcd_clear_line>
 uart_newline();                   // MAURO
} /* end message2line() */
    5e70:	08 95       	ret
     if (number == MODE_PWM) lcd_MEM2_string(PWM_10bit_str);
    5e72:	8c ee       	ldi	r24, 0xEC	; 236
    5e74:	91 e0       	ldi	r25, 0x01	; 1
    5e76:	db cf       	rjmp	.-74     	; 0x5e2e <message2line+0xe>
     if (number == MODE_ESR) lcd_MEM2_string(C_ESR_str);
    5e78:	8f e7       	ldi	r24, 0x7F	; 127
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	d8 cf       	rjmp	.-80     	; 0x5e2e <message2line+0xe>
     if (number == MODE_RESIS) lcd_MEM_string(RESIS_13_str);
    5e7e:	84 e7       	ldi	r24, 0x74	; 116
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	d5 cf       	rjmp	.-86     	; 0x5e2e <message2line+0xe>
     if (number == MODE_CAP13) lcd_MEM_string(CAP_13_str);
    5e84:	8d e6       	ldi	r24, 0x6D	; 109
    5e86:	90 e0       	ldi	r25, 0x00	; 0
    5e88:	d2 cf       	rjmp	.-92     	; 0x5e2e <message2line+0xe>
     if (number == MODE_BIG_CAP_CORR) lcd_MEM2_string(SetCapCorr_str);
    5e8a:	8b ed       	ldi	r24, 0xDB	; 219
    5e8c:	91 e0       	ldi	r25, 0x01	; 1
    5e8e:	cf cf       	rjmp	.-98     	; 0x5e2e <message2line+0xe>
     if (number == MODE_SELFTEST) lcd_MEM2_string(FULLCHECK_str);
    5e90:	8c ec       	ldi	r24, 0xCC	; 204
    5e92:	91 e0       	ldi	r25, 0x01	; 1
    5e94:	cc cf       	rjmp	.-104    	; 0x5e2e <message2line+0xe>
     if (number == MODE_VEXT) lcd_MEM_string(VOLTAGE_str); 
    5e96:	88 e1       	ldi	r24, 0x18	; 24
    5e98:	92 e0       	ldi	r25, 0x02	; 2
    5e9a:	c9 cf       	rjmp	.-110    	; 0x5e2e <message2line+0xe>
        lcd_MEM2_string(SHOW_str);
    5e9c:	8e e0       	ldi	r24, 0x0E	; 14
    5e9e:	92 e0       	ldi	r25, 0x02	; 2
    5ea0:	c6 cf       	rjmp	.-116    	; 0x5e2e <message2line+0xe>
        lcd_MEM2_string(OFF_str);
    5ea2:	83 e0       	ldi	r24, 0x03	; 3
    5ea4:	92 e0       	ldi	r25, 0x02	; 2
    5ea6:	c3 cf       	rjmp	.-122    	; 0x5e2e <message2line+0xe>

00005ea8 <show_C_ESR>:

/* ****************************************************************** */
/* show_C_ESR measures the capacity and ESR of a capacitor connected to TP1 and TP3 */
/* ****************************************************************** */
 #if (USE_ESR == 1)
void show_C_ESR() {
    5ea8:	0f 93       	push	r16
    5eaa:	cf 93       	push	r28
    5eac:	df 93       	push	r29
    5eae:	00 d0       	rcall	.+0      	; 0x5eb0 <show_C_ESR+0x8>
    5eb0:	00 d0       	rcall	.+0      	; 0x5eb2 <show_C_ESR+0xa>
    5eb2:	0f 92       	push	r0
    5eb4:	cd b7       	in	r28, 0x3d	; 61
    5eb6:	de b7       	in	r29, 0x3e	; 62
  uint8_t key_pressed;
  message_key_released(C_ESR_str);
    5eb8:	8f e7       	ldi	r24, 0x7F	; 127
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	0f d4       	rcall	.+2078   	; 0x66dc <message_key_released>
  #ifdef POWER_OFF
  uint8_t times;
  for (times=0;times<250;) 
    5ebe:	1d 82       	std	Y+5, r1	; 0x05
  #else
  while (1)		/* wait endless without the POWER_OFF option */
  #endif
  {
        PartFound = PART_NONE;
    5ec0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <PartFound>
        ReadBigCap(TP3,TP1);
    5ec4:	60 e0       	ldi	r22, 0x00	; 0
    5ec6:	82 e0       	ldi	r24, 0x02	; 2
    5ec8:	2f d6       	rcall	.+3166   	; 0x6b28 <ReadBigCap>
        if (PartFound == PART_CAPACITOR) {
    5eca:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    5ece:	88 30       	cpi	r24, 0x08	; 8
    5ed0:	09 f0       	breq	.+2      	; 0x5ed4 <show_C_ESR+0x2c>
    5ed2:	57 c0       	rjmp	.+174    	; 0x5f82 <show_C_ESR+0xda>
  #if LCD_LINES > 2
           lcd_line2(); 	// set to line2 
    5ed4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
  #else
           lcd_line1(); 	// set to line1 
  #endif
           lcd_data('C');
    5ed8:	83 e4       	ldi	r24, 0x43	; 67
    5eda:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
           lcd_equal();		// lcd_data('=');
    5ede:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
           DisplayValue(cap.cval_max,cap.cpre_max,'F',3);
    5ee2:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <cap+0x4>
    5ee6:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <cap+0x5>
    5eea:	a0 91 42 01 	lds	r26, 0x0142	; 0x800142 <cap+0x6>
    5eee:	b0 91 43 01 	lds	r27, 0x0143	; 0x800143 <cap+0x7>
    5ef2:	03 e0       	ldi	r16, 0x03	; 3
    5ef4:	26 e4       	ldi	r18, 0x46	; 70
    5ef6:	40 91 4f 01 	lds	r20, 0x014F	; 0x80014f <cap+0x13>
    5efa:	bc 01       	movw	r22, r24
    5efc:	cd 01       	movw	r24, r26
    5efe:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
           lcd_clear_line();	// clear to end of line 1
    5f02:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
           cap.esr = GetESR(cap.cb,cap.ca);
    5f06:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <cap+0x10>
    5f0a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cap+0x11>
    5f0e:	0e 94 1a 09 	call	0x1234	; 0x1234 <GetESR>
    5f12:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <cap+0xd>
    5f16:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cap+0xc>
  #if LCD_LINES > 2
	   lcd_line3();		// use line 3 
    5f1a:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
  #else
           lcd_line2();		// use line 2 
  #endif
           lcd_MEM_string(&ESR_str[1]);
    5f1e:	81 e4       	ldi	r24, 0x41	; 65
    5f20:	91 e0       	ldi	r25, 0x01	; 1
    5f22:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
           if (cap.esr < 65530) {
    5f26:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cap+0xc>
    5f2a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <cap+0xd>
    5f2e:	8a 3f       	cpi	r24, 0xFA	; 250
    5f30:	af ef       	ldi	r26, 0xFF	; 255
    5f32:	9a 07       	cpc	r25, r26
    5f34:	10 f5       	brcc	.+68     	; 0x5f7a <show_C_ESR+0xd2>
              DisplayValue16(cap.esr,-2,LCD_CHAR_OMEGA,2);
    5f36:	22 e0       	ldi	r18, 0x02	; 2
    5f38:	4d e1       	ldi	r20, 0x1D	; 29
    5f3a:	6e ef       	ldi	r22, 0xFE	; 254
    5f3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
           lcd_clear_line();		// clear to end of line
        } else { // no cap found
  #if LCD_LINES > 2
           lcd_clear_line2(); 	// clear C value 
           lcd_line3();
	   lcd_clear_line();	// clear old ESR value
    5f40:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
           lcd_clear_line();
           lcd_clear_line2(); 	// clear old ESR value 
  #endif
        }
  #if defined(POWER_OFF) && defined(BAT_CHECK)
     Bat_update(times);
    5f44:	8d 81       	ldd	r24, Y+5	; 0x05
    5f46:	73 db       	rcall	.-2330   	; 0x562e <Bat_update>
  #endif
     key_pressed = wait_for_key_ms(1000);
    5f48:	88 ee       	ldi	r24, 0xE8	; 232
    5f4a:	93 e0       	ldi	r25, 0x03	; 3
    5f4c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
  #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > FAST_ROTATION)) break;
    5f50:	81 11       	cpse	r24, r1
    5f52:	0a c0       	rjmp	.+20     	; 0x5f68 <show_C_ESR+0xc0>
    5f54:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    5f58:	8b 30       	cpi	r24, 0x0B	; 11
  #else
     if (key_pressed != 0) break;
  #endif
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    5f5a:	30 f4       	brcc	.+12     	; 0x5f68 <show_C_ESR+0xc0>
    5f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f5e:	6e db       	rcall	.-2340   	; 0x563c <Pwr_mode_check>
    5f60:	8d 83       	std	Y+5, r24	; 0x05
  for (times=0;times<250;) 
    5f62:	8a 3f       	cpi	r24, 0xFA	; 250
    5f64:	08 f4       	brcc	.+2      	; 0x5f68 <show_C_ESR+0xc0>
    5f66:	ac cf       	rjmp	.-168    	; 0x5ec0 <show_C_ESR+0x18>
  #endif
  }  /* end for times */
} /* end show_C_ESR() */
    5f68:	0f 90       	pop	r0
    5f6a:	0f 90       	pop	r0
    5f6c:	0f 90       	pop	r0
    5f6e:	0f 90       	pop	r0
    5f70:	0f 90       	pop	r0
    5f72:	df 91       	pop	r29
    5f74:	cf 91       	pop	r28
    5f76:	0f 91       	pop	r16
    5f78:	08 95       	ret
              lcd_data('?');		// too big
    5f7a:	8f e3       	ldi	r24, 0x3F	; 63
    5f7c:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
           lcd_clear_line();		// clear to end of line
    5f80:	df cf       	rjmp	.-66     	; 0x5f40 <show_C_ESR+0x98>
           lcd_clear_line2(); 	// clear C value 
    5f82:	0e 94 9f 0b 	call	0x173e	; 0x173e <lcd_clear_line2>
           lcd_line3();
    5f86:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
    5f8a:	da cf       	rjmp	.-76     	; 0x5f40 <show_C_ESR+0x98>

00005f8c <show_vext>:
/* show_vext() read one or two input voltages from     */
/* ADC input channel(s) TPext or (TPext and TPex2).    */
/* For both inputs a 10:1 voltage divider is required. */
/* *************************************************** */
 #if (USE_VEXT == 1)
void show_vext() {
    5f8c:	1f 93       	push	r17
    5f8e:	cf 93       	push	r28
    5f90:	df 93       	push	r29
 
  uint8_t key_pressed;
  uint8_t key_long_pressed;
  unsigned int Vext;
  // show the external voltage
  message_key_released(VOLTAGE_str);
    5f92:	88 e1       	ldi	r24, 0x18	; 24
    5f94:	92 e0       	ldi	r25, 0x02	; 2
    5f96:	a2 d3       	rcall	.+1860   	; 0x66dc <message_key_released>
  key_long_pressed = 0;
  #ifdef POWER_OFF
  uint8_t times;
  for (times=0;times<240;) 
    5f98:	c0 e0       	ldi	r28, 0x00	; 0
  key_long_pressed = 0;
    5f9a:	d0 e0       	ldi	r29, 0x00	; 0
     uart_newline();          // start of new measurement
     lcd_MEM_string(Vext_str);          // Vext=
     Vext = W5msReadADC(TPext); // read external voltage 
//     ADC_DDR = TXD_MSK;               //activate Software-UART 
  #if EXT_NUMERATOR <= (0xffff/U_VCC)
     Display_mV(Vext*EXT_NUMERATOR/EXT_DENOMINATOR,3); // Display 3 Digits of this mV units
    5f9c:	1a e0       	ldi	r17, 0x0A	; 10
     lcd_line2();		// only one measurement use line 2
    5f9e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
     lcd_MEM_string(Vext_str);          // Vext=
    5fa2:	8b e2       	ldi	r24, 0x2B	; 43
    5fa4:	91 e0       	ldi	r25, 0x01	; 1
    5fa6:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
     Vext = W5msReadADC(TPext); // read external voltage 
    5faa:	83 e0       	ldi	r24, 0x03	; 3
    5fac:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <W5msReadADC>
     Display_mV(Vext*EXT_NUMERATOR/EXT_DENOMINATOR,3); // Display 3 Digits of this mV units
    5fb0:	63 e0       	ldi	r22, 0x03	; 3
    5fb2:	9c 01       	movw	r18, r24
    5fb4:	12 9f       	mul	r17, r18
    5fb6:	c0 01       	movw	r24, r0
    5fb8:	13 9f       	mul	r17, r19
    5fba:	90 0d       	add	r25, r0
    5fbc:	11 24       	eor	r1, r1
    5fbe:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <Display_mV>
  #else
     DisplayValue((unsigned long)Vext*EXT_NUMERATOR/EXT_DENOMINATOR,-3,'V',3);  // Display 3 Digits of this mV units
  #endif
     lcd_clear_line();		// clear to end of line
    5fc2:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     DisplayValue((unsigned long)Vext*EXT_NUMERATOR/EXT_DENOMINATOR,-3,'V',3);  // Display 3 Digits of this mV units
   #endif
     lcd_clear_line();		// clear to end of line
  #endif	/* TPex2 */
  #if defined(POWER_OFF) && defined(BAT_CHECK)
     Bat_update(times);
    5fc6:	8c 2f       	mov	r24, r28
    5fc8:	32 db       	rcall	.-2460   	; 0x562e <Bat_update>
  #endif

     key_pressed = wait_for_key_ms(1000);
    5fca:	88 ee       	ldi	r24, 0xE8	; 232
    5fcc:	93 e0       	ldi	r25, 0x03	; 3
    5fce:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
  #ifdef POWER_OFF
   #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    5fd2:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    5fd6:	29 2f       	mov	r18, r25
    5fd8:	28 2b       	or	r18, r24
    5fda:	61 f0       	breq	.+24     	; 0x5ff4 <show_vext+0x68>
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends voltage measurement
    5fdc:	9b 30       	cpi	r25, 0x0B	; 11
    5fde:	80 f4       	brcc	.+32     	; 0x6000 <show_vext+0x74>
   #else
     if (key_pressed > 0) times = 0;		//reset the loop counter, operator is active
   #endif
  #endif
     if (key_pressed > ((1000/10)-6)) {
    5fe0:	8f 35       	cpi	r24, 0x5F	; 95
    5fe2:	28 f0       	brcs	.+10     	; 0x5fee <show_vext+0x62>
        key_long_pressed++;	// count the long key press
    5fe4:	df 5f       	subi	r29, 0xFF	; 255
     }
     if (key_pressed == 0) key_long_pressed = 0; //reset the key long pressed counter
     if (key_long_pressed > 4) break;	// five seconds end the loop
    5fe6:	d5 30       	cpi	r29, 0x05	; 5
    5fe8:	59 f0       	breq	.+22     	; 0x6000 <show_vext+0x74>
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    5fea:	c0 e0       	ldi	r28, 0x00	; 0
    5fec:	04 c0       	rjmp	.+8      	; 0x5ff6 <show_vext+0x6a>
     if (key_pressed == 0) key_long_pressed = 0; //reset the key long pressed counter
    5fee:	81 11       	cpse	r24, r1
    5ff0:	fc cf       	rjmp	.-8      	; 0x5fea <show_vext+0x5e>
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    5ff2:	c0 e0       	ldi	r28, 0x00	; 0
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    5ff4:	d0 e0       	ldi	r29, 0x00	; 0
    5ff6:	8c 2f       	mov	r24, r28
    5ff8:	21 db       	rcall	.-2494   	; 0x563c <Pwr_mode_check>
    5ffa:	c8 2f       	mov	r28, r24
  for (times=0;times<240;) 
    5ffc:	80 3f       	cpi	r24, 0xF0	; 240
    5ffe:	78 f2       	brcs	.-98     	; 0x5f9e <show_vext+0x12>
  #endif
  }  /* end for times */
} /* end show_vext() */
    6000:	df 91       	pop	r29
    6002:	cf 91       	pop	r28
    6004:	1f 91       	pop	r17
    6006:	08 95       	ret

00006008 <make_frequency>:
/* *************************************************** */
/* make frequency starts a frequency generator at TP2 with 680 Ohm resistor */
/* some predefined frequencies can be switched with the key */
/* a long key press returns to the selection menu */
/* *************************************************** */
void make_frequency() {
    6008:	aa e0       	ldi	r26, 0x0A	; 10
    600a:	b0 e0       	ldi	r27, 0x00	; 0
    600c:	ea e0       	ldi	r30, 0x0A	; 10
    600e:	f0 e3       	ldi	r31, 0x30	; 48
    6010:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>
  unsigned long  f_incre;	// frequency increment 1, 10, 100, 1000, 10000, 100000
  uint8_t f_digit;		// digit for f_incre, 0-10 or 0-20
  uint8_t Max_Digit;		// 10 or 20 , the last digit is for 
  uint8_t right;		// logical expression 

  message_key_released(F_GEN_str);	// display f-Generator and wait for key released
    6014:	87 ef       	ldi	r24, 0xF7	; 247
    6016:	91 e0       	ldi	r25, 0x01	; 1
    6018:	61 d3       	rcall	.+1730   	; 0x66dc <message_key_released>
  // OC1B is connected with 680 Ohm resistor to TP2 (middle test pin) 
  TCCR1A = (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10); // CTC mode, count to OCR1A
    601a:	80 e1       	ldi	r24, 0x10	; 16
    601c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TIMSK1 = 0;		// no interrupt used
    6020:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  OCR1A = 1;		// highest frequency
    6024:	81 e0       	ldi	r24, 0x01	; 1
    6026:	90 e0       	ldi	r25, 0x00	; 0
    6028:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    602c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  OCR1B	= 0;		// toggle OC1B at this count
    6030:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    6034:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  TIFR1 = (1<<OCF1A) | (1<<OCF1A) | (1<<TOV1);	// reset interrupt flags
    6038:	83 e0       	ldi	r24, 0x03	; 3
    603a:	86 bb       	out	0x16, r24	; 22
  TCCR1C = 0;
    603c:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>
  TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10); // set counter mode 
    6040:	88 e0       	ldi	r24, 0x08	; 8
    6042:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  R_PORT = 0;		// set all resistor port outputs to GND
    6046:	15 b8       	out	0x05, r1	; 5
#if PROCESSOR_TYP == 644
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		// set TP1, DDD4(TP2) and TP3 to output
#else
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);		// set TP1 and TP3 to output
    6048:	81 e1       	ldi	r24, 0x11	; 17
    604a:	84 b9       	out	0x04, r24	; 4
#endif
  ADC_PORT = TXD_VAL;
    604c:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = (1<<TP1) | TXD_MSK;			//connect TP1 to GND
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	87 b9       	out	0x07, r24	; 7
#if PROCESSOR_TYP == 1280
  DDRB  |= (1<<DDB6);	// set output enable for OC1B
#else
  DDRB  |= (1<<DDB2);	// set output enable for OC1B
    6052:	22 9a       	sbi	0x04, 2	; 4
#endif
  TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // no clock divide
    6054:	89 e0       	ldi	r24, 0x09	; 9
    6056:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#ifdef POWER_OFF
  uint8_t new_points;		// one point for every 30 seconds wait time
  uint8_t shown_points;		// one point for every 30 seconds wait time
  uint8_t times;		// total wait time
  shown_points = 0;
  for (times=0; times<240;) 
    605a:	81 2c       	mov	r8, r1
  shown_points = 0;
    605c:	20 e0       	ldi	r18, 0x00	; 0
  Max_Digit = 10;	// normally 10, only for 100kHz steps 20
    605e:	fa e0       	ldi	r31, 0x0A	; 10
    6060:	7f 2e       	mov	r7, r31
  f_digit = 1;			// start value
    6062:	66 24       	eor	r6, r6
    6064:	63 94       	inc	r6
  f_incre = 1;		// increment with 1 Hz
    6066:	31 e0       	ldi	r19, 0x01	; 1
    6068:	3a 87       	std	Y+10, r19	; 0x0a
    606a:	10 e0       	ldi	r17, 0x00	; 0
    606c:	b1 2c       	mov	r11, r1
    606e:	a1 2c       	mov	r10, r1
  significant = 16+1;	// only one significant frequency digit (Hz resolution)
    6070:	41 e1       	ldi	r20, 0x11	; 17
    6072:	49 87       	std	Y+9, r20	; 0x09
#else
  while (1)			/* wait endless without option POWER_OFF */
#endif
  {
#ifdef POWER_OFF
     new_points = (times+10) / 30;
    6074:	8a e0       	ldi	r24, 0x0A	; 10
    6076:	88 0d       	add	r24, r8
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	6e e1       	ldi	r22, 0x1E	; 30
    607c:	70 e0       	ldi	r23, 0x00	; 0
    607e:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__divmodhi4>
    6082:	46 2e       	mov	r4, r22
    6084:	e6 2e       	mov	r14, r22
     if (new_points != shown_points) {
    6086:	62 17       	cp	r22, r18
    6088:	59 f0       	breq	.+22     	; 0x60a0 <make_frequency+0x98>
        // count of points has changed, build LCD line1 new
        lcd_line1();	// position to line 1 
    608a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
        lcd_MEM2_string(F_GEN_str);	// display f-Generator
    608e:	87 ef       	ldi	r24, 0xF7	; 247
    6090:	91 e0       	ldi	r25, 0x01	; 1
    6092:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
        shown_points = new_points;
        for (new_points=0; new_points<shown_points ;new_points++) {
    6096:	f1 2c       	mov	r15, r1
    6098:	fe 10       	cpse	r15, r14
    609a:	f5 c0       	rjmp	.+490    	; 0x6286 <make_frequency+0x27e>
           lcd_data('.');		// show elapsed time, one point is 60 seconds
        }
        lcd_clear_line();	// clear remainder of line1
    609c:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     }
#endif
     // Generate frequency
     if (significant > (16+1)) {
        // use lower significant digits and the frequency selection digit f_digit
        wish_freq = (wish_freq % f_incre) + ((f_digit%Max_Digit) * f_incre);
    60a0:	86 2d       	mov	r24, r6
    60a2:	67 2d       	mov	r22, r7
    60a4:	0e 94 b8 3c 	call	0x7970	; 0x7970 <__udivmodqi4>
    60a8:	a9 2f       	mov	r26, r25
    60aa:	b0 e0       	ldi	r27, 0x00	; 0
    60ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    60ae:	31 2f       	mov	r19, r17
    60b0:	4b 2d       	mov	r20, r11
    60b2:	5a 2d       	mov	r21, r10
    60b4:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    60b8:	6d 83       	std	Y+5, r22	; 0x05
    60ba:	7e 83       	std	Y+6, r23	; 0x06
    60bc:	8f 83       	std	Y+7, r24	; 0x07
    60be:	98 87       	std	Y+8, r25	; 0x08
     if (significant > (16+1)) {
    60c0:	59 85       	ldd	r21, Y+9	; 0x09
    60c2:	52 31       	cpi	r21, 0x12	; 18
    60c4:	90 f0       	brcs	.+36     	; 0x60ea <make_frequency+0xe2>
        wish_freq = (wish_freq % f_incre) + ((f_digit%Max_Digit) * f_incre);
    60c6:	65 2d       	mov	r22, r5
    60c8:	79 2d       	mov	r23, r9
    60ca:	c6 01       	movw	r24, r12
    60cc:	5a 2d       	mov	r21, r10
    60ce:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    60d2:	2d 81       	ldd	r18, Y+5	; 0x05
    60d4:	3e 81       	ldd	r19, Y+6	; 0x06
    60d6:	4f 81       	ldd	r20, Y+7	; 0x07
    60d8:	58 85       	ldd	r21, Y+8	; 0x08
    60da:	26 0f       	add	r18, r22
    60dc:	37 1f       	adc	r19, r23
    60de:	48 1f       	adc	r20, r24
    60e0:	59 1f       	adc	r21, r25
    60e2:	2d 83       	std	Y+5, r18	; 0x05
    60e4:	3e 83       	std	Y+6, r19	; 0x06
    60e6:	4f 83       	std	Y+7, r20	; 0x07
    60e8:	58 87       	std	Y+8, r21	; 0x08
     } else {
	// with only one significant there are no lower significant digits
        wish_freq = ((f_digit%Max_Digit) * f_incre);
     }
     lcd_line2();
    60ea:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
     right = ((f_digit == Max_Digit) && (significant > 17));
    60ee:	51 2c       	mov	r5, r1
    60f0:	67 10       	cpse	r6, r7
    60f2:	06 c0       	rjmp	.+12     	; 0x6100 <make_frequency+0xf8>
    60f4:	81 e0       	ldi	r24, 0x01	; 1
    60f6:	39 85       	ldd	r19, Y+9	; 0x09
    60f8:	32 31       	cpi	r19, 0x12	; 18
    60fa:	08 f4       	brcc	.+2      	; 0x60fe <make_frequency+0xf6>
    60fc:	80 e0       	ldi	r24, 0x00	; 0
    60fe:	58 2e       	mov	r5, r24
    6100:	95 2c       	mov	r9, r5
     uint8_t long_key_char;
     if (right) {
        long_key_char = '<';	// the frequency string will move to the left by long key press
    6102:	8c e3       	ldi	r24, 0x3C	; 60
     if (right) {
    6104:	51 10       	cpse	r5, r1
    6106:	05 c0       	rjmp	.+10     	; 0x6112 <make_frequency+0x10a>
     } else {
        if (significant < (16+6)) {
    6108:	49 85       	ldd	r20, Y+9	; 0x09
           long_key_char = '>';		// move the frequency string to the right with one leading zero
        } else {
           long_key_char = 'R';		// i100kHz is the last position, Reset to 1 by long key press
    610a:	82 e5       	ldi	r24, 0x52	; 82
        if (significant < (16+6)) {
    610c:	46 31       	cpi	r20, 0x16	; 22
    610e:	08 f4       	brcc	.+2      	; 0x6112 <make_frequency+0x10a>
           long_key_char = '>';		// move the frequency string to the right with one leading zero
    6110:	8e e3       	ldi	r24, 0x3E	; 62
        }
     }
     lcd_data(long_key_char);		// show the selected character for long key action
    6112:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
#if (LCD_LINES > 2)
     lcd_space();
    6116:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
#endif
     Display_Hz(wish_freq, significant);	// show the selected frequuency
    611a:	49 85       	ldd	r20, Y+9	; 0x09
    611c:	6d 81       	ldd	r22, Y+5	; 0x05
    611e:	7e 81       	ldd	r23, Y+6	; 0x06
    6120:	8f 81       	ldd	r24, Y+7	; 0x07
    6122:	98 85       	ldd	r25, Y+8	; 0x08
    6124:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <Display_Hz>
     hperiod.dw = (F_CPU + wish_freq) / (wish_freq * 2);  // total divider for selected frequenx
    6128:	8d 81       	ldd	r24, Y+5	; 0x05
    612a:	9e 81       	ldd	r25, Y+6	; 0x06
    612c:	af 81       	ldd	r26, Y+7	; 0x07
    612e:	b8 85       	ldd	r27, Y+8	; 0x08
    6130:	9c 5d       	subi	r25, 0xDC	; 220
    6132:	ab 40       	sbci	r26, 0x0B	; 11
    6134:	bf 4f       	sbci	r27, 0xFF	; 255
    6136:	bc 01       	movw	r22, r24
    6138:	cd 01       	movw	r24, r26
    613a:	2d 81       	ldd	r18, Y+5	; 0x05
    613c:	3e 81       	ldd	r19, Y+6	; 0x06
    613e:	4f 81       	ldd	r20, Y+7	; 0x07
    6140:	58 85       	ldd	r21, Y+8	; 0x08
    6142:	22 0f       	add	r18, r18
    6144:	33 1f       	adc	r19, r19
    6146:	44 1f       	adc	r20, r20
    6148:	55 1f       	adc	r21, r21
    614a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    614e:	29 83       	std	Y+1, r18	; 0x01
    6150:	3a 83       	std	Y+2, r19	; 0x02
    6152:	4b 83       	std	Y+3, r20	; 0x03
    6154:	5c 83       	std	Y+4, r21	; 0x04
     divider = 1;
     if (hperiod.w[1] >= 256) {
    6156:	8b 81       	ldd	r24, Y+3	; 0x03
    6158:	9c 81       	ldd	r25, Y+4	; 0x04
    615a:	8f 3f       	cpi	r24, 0xFF	; 255
    615c:	91 05       	cpc	r25, r1
    615e:	09 f0       	breq	.+2      	; 0x6162 <make_frequency+0x15a>
    6160:	08 f4       	brcc	.+2      	; 0x6164 <make_frequency+0x15c>
    6162:	96 c0       	rjmp	.+300    	; 0x6290 <make_frequency+0x288>
        // divide by 1024
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10); // divide clock by 1024
    6164:	8d e0       	ldi	r24, 0x0D	; 13
    6166:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        divider = 1024;
    616a:	80 e0       	ldi	r24, 0x00	; 0
    616c:	94 e0       	ldi	r25, 0x04	; 4
        divider = 8;
     } else {
        // no divide
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // no clock divide
     }
     OCR1A = (hperiod.dw / divider) - 1;	// the remainder divider  match to 16-bit counter 
    616e:	6c 01       	movw	r12, r24
    6170:	f1 2c       	mov	r15, r1
    6172:	e1 2c       	mov	r14, r1
    6174:	69 81       	ldd	r22, Y+1	; 0x01
    6176:	7a 81       	ldd	r23, Y+2	; 0x02
    6178:	8b 81       	ldd	r24, Y+3	; 0x03
    617a:	9c 81       	ldd	r25, Y+4	; 0x04
    617c:	a7 01       	movw	r20, r14
    617e:	96 01       	movw	r18, r12
    6180:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    6184:	21 50       	subi	r18, 0x01	; 1
    6186:	31 09       	sbc	r19, r1
    6188:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    618c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     if (OCR1A == 0) OCR1A = 1;
    6190:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    6194:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6198:	89 2b       	or	r24, r25
    619a:	31 f4       	brne	.+12     	; 0x61a8 <make_frequency+0x1a0>
    619c:	a1 e0       	ldi	r26, 0x01	; 1
    619e:	b0 e0       	ldi	r27, 0x00	; 0
    61a0:	b0 93 89 00 	sts	0x0089, r27	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    61a4:	a0 93 88 00 	sts	0x0088, r26	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
#if (LCD_LINES > 2)
     lcd_clear_line();		// clear to end of line 2
    61a8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     lcd_line3();
    61ac:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
     lcd_data('f');
    61b0:	86 e6       	ldi	r24, 0x66	; 102
    61b2:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
     lcd_space();
    61b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
//     }
//     lcd_data('z');
//     lcd_clear_line();
#endif
     long int diff_freq;
     diff_freq = (((F_CPU/2) / divider) * 100) / (OCR1A + 1) - (wish_freq * 100);
    61ba:	20 90 88 00 	lds	r2, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    61be:	30 90 89 00 	lds	r3, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    61c2:	60 e0       	ldi	r22, 0x00	; 0
    61c4:	72 e1       	ldi	r23, 0x12	; 18
    61c6:	8a e7       	ldi	r24, 0x7A	; 122
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	a7 01       	movw	r20, r14
    61cc:	96 01       	movw	r18, r12
    61ce:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    61d2:	a4 e6       	ldi	r26, 0x64	; 100
    61d4:	b0 e0       	ldi	r27, 0x00	; 0
    61d6:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    61da:	bf ef       	ldi	r27, 0xFF	; 255
    61dc:	2b 1a       	sub	r2, r27
    61de:	3b 0a       	sbc	r3, r27
    61e0:	91 01       	movw	r18, r2
    61e2:	50 e0       	ldi	r21, 0x00	; 0
    61e4:	40 e0       	ldi	r20, 0x00	; 0
    61e6:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    61ea:	69 01       	movw	r12, r18
    61ec:	7a 01       	movw	r14, r20
    61ee:	a4 e6       	ldi	r26, 0x64	; 100
    61f0:	b0 e0       	ldi	r27, 0x00	; 0
    61f2:	2d 81       	ldd	r18, Y+5	; 0x05
    61f4:	3e 81       	ldd	r19, Y+6	; 0x06
    61f6:	4f 81       	ldd	r20, Y+7	; 0x07
    61f8:	58 85       	ldd	r21, Y+8	; 0x08
    61fa:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    61fe:	a7 01       	movw	r20, r14
    6200:	96 01       	movw	r18, r12
    6202:	26 1b       	sub	r18, r22
    6204:	37 0b       	sbc	r19, r23
    6206:	48 0b       	sbc	r20, r24
    6208:	59 0b       	sbc	r21, r25
    620a:	29 83       	std	Y+1, r18	; 0x01
    620c:	3a 83       	std	Y+2, r19	; 0x02
    620e:	4b 83       	std	Y+3, r20	; 0x03
    6210:	5c 83       	std	Y+4, r21	; 0x04
#if (LCD_LINES > 2)
     DisplayValue(diff_freq,-2,'H',32+5);
    6212:	05 e2       	ldi	r16, 0x25	; 37
    6214:	28 e4       	ldi	r18, 0x48	; 72
    6216:	4e ef       	ldi	r20, 0xFE	; 254
    6218:	69 81       	ldd	r22, Y+1	; 0x01
    621a:	7a 81       	ldd	r23, Y+2	; 0x02
    621c:	8b 81       	ldd	r24, Y+3	; 0x03
    621e:	9c 81       	ldd	r25, Y+4	; 0x04
    6220:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
#else
     DisplayValue(diff_freq,-2,'H',32+2);
#endif
     lcd_data('z');
    6224:	8a e7       	ldi	r24, 0x7A	; 122
    6226:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
     lcd_clear_line();
    622a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     key_pressed = wait_for_key_ms(2000);	// check key and rotary encoder
    622e:	80 ed       	ldi	r24, 0xD0	; 208
    6230:	97 e0       	ldi	r25, 0x07	; 7
    6232:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
    6236:	28 2f       	mov	r18, r24
#ifdef POWER_OFF
 #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > 0)) times = 0;	// reset counter, operator is active
    6238:	81 11       	cpse	r24, r1
    623a:	49 c0       	rjmp	.+146    	; 0x62ce <make_frequency+0x2c6>
    623c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    6240:	81 11       	cpse	r24, r1
    6242:	01 c0       	rjmp	.+2      	; 0x6246 <make_frequency+0x23e>
    6244:	28 2d       	mov	r18, r8
        }
     } else {
        if (key_pressed > KEYPRESS_LENGTH_10ms) f_digit++; // longer key press select next frequency
     }
#ifdef WITH_ROTARY_SWITCH
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends voltage measurement
    6246:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    624a:	8b 30       	cpi	r24, 0x0B	; 11
    624c:	08 f0       	brcs	.+2      	; 0x6250 <make_frequency+0x248>
    624e:	94 c0       	rjmp	.+296    	; 0x6378 <make_frequency+0x370>
     if (rotary.count >= 0) {
    6250:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    6254:	87 fd       	sbrc	r24, 7
    6256:	81 c0       	rjmp	.+258    	; 0x635a <make_frequency+0x352>
        f_digit += rotary.count;		// increase the frequency number by rotary.count
     } else {
        f_digit += (Max_Digit + 1 + rotary.count);	// decrease the frequency by rotary.count
    6258:	68 0e       	add	r6, r24
     }
#endif
     f_digit = f_digit % (Max_Digit + 1);
    625a:	86 2d       	mov	r24, r6
    625c:	90 e0       	ldi	r25, 0x00	; 0
    625e:	61 e0       	ldi	r22, 0x01	; 1
    6260:	67 0d       	add	r22, r7
    6262:	70 e0       	ldi	r23, 0x00	; 0
    6264:	0e 94 d8 3c 	call	0x79b0	; 0x79b0 <__divmodhi4>
    6268:	98 2e       	mov	r9, r24
#ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    626a:	82 2f       	mov	r24, r18
    626c:	e7 d9       	rcall	.-3122   	; 0x563c <Pwr_mode_check>
    626e:	88 2e       	mov	r8, r24
  for (times=0; times<240;) 
    6270:	5f ee       	ldi	r21, 0xEF	; 239
    6272:	58 17       	cp	r21, r24
    6274:	08 f4       	brcc	.+2      	; 0x6278 <make_frequency+0x270>
    6276:	80 c0       	rjmp	.+256    	; 0x6378 <make_frequency+0x370>
     new_points = (times+10) / 30;
    6278:	24 2d       	mov	r18, r4
    627a:	69 2c       	mov	r6, r9
    627c:	5d 80       	ldd	r5, Y+5	; 0x05
    627e:	9e 80       	ldd	r9, Y+6	; 0x06
    6280:	cf 80       	ldd	r12, Y+7	; 0x07
    6282:	d8 84       	ldd	r13, Y+8	; 0x08
    6284:	f7 ce       	rjmp	.-530    	; 0x6074 <make_frequency+0x6c>
           lcd_data('.');		// show elapsed time, one point is 60 seconds
    6286:	8e e2       	ldi	r24, 0x2E	; 46
    6288:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
        for (new_points=0; new_points<shown_points ;new_points++) {
    628c:	f3 94       	inc	r15
    628e:	04 cf       	rjmp	.-504    	; 0x6098 <make_frequency+0x90>
     } else if (hperiod.w[1] >= 64) {
    6290:	80 34       	cpi	r24, 0x40	; 64
    6292:	91 05       	cpc	r25, r1
    6294:	30 f0       	brcs	.+12     	; 0x62a2 <make_frequency+0x29a>
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10); // divide clock by 256
    6296:	8c e0       	ldi	r24, 0x0C	; 12
    6298:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        divider = 256;
    629c:	80 e0       	ldi	r24, 0x00	; 0
    629e:	91 e0       	ldi	r25, 0x01	; 1
    62a0:	66 cf       	rjmp	.-308    	; 0x616e <make_frequency+0x166>
     } else if (hperiod.w[1] >= 8) {
    62a2:	88 30       	cpi	r24, 0x08	; 8
    62a4:	91 05       	cpc	r25, r1
    62a6:	30 f0       	brcs	.+12     	; 0x62b4 <make_frequency+0x2ac>
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10); // divide clock by 64
    62a8:	8b e0       	ldi	r24, 0x0B	; 11
    62aa:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        divider = 64;
    62ae:	80 e4       	ldi	r24, 0x40	; 64
        divider = 8;
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	5d cf       	rjmp	.-326    	; 0x616e <make_frequency+0x166>
     } else if (hperiod.w[1] >= 1) {
    62b4:	89 2b       	or	r24, r25
    62b6:	29 f0       	breq	.+10     	; 0x62c2 <make_frequency+0x2ba>
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10); // divide clock by 8
    62b8:	8a e0       	ldi	r24, 0x0A	; 10
    62ba:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
        divider = 8;
    62be:	88 e0       	ldi	r24, 0x08	; 8
    62c0:	f7 cf       	rjmp	.-18     	; 0x62b0 <make_frequency+0x2a8>
        TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // no clock divide
    62c2:	89 e0       	ldi	r24, 0x09	; 9
    62c4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     divider = 1;
    62c8:	81 e0       	ldi	r24, 0x01	; 1
    62ca:	90 e0       	ldi	r25, 0x00	; 0
    62cc:	50 cf       	rjmp	.-352    	; 0x616e <make_frequency+0x166>
     if(key_pressed >= 200) break;	// more than 2.0 seconds
    62ce:	88 3c       	cpi	r24, 0xC8	; 200
    62d0:	08 f0       	brcs	.+2      	; 0x62d4 <make_frequency+0x2cc>
    62d2:	52 c0       	rjmp	.+164    	; 0x6378 <make_frequency+0x370>
     if (key_pressed > 80) {	/* more than 0.8 seconds key press */
    62d4:	81 35       	cpi	r24, 0x51	; 81
    62d6:	e0 f1       	brcs	.+120    	; 0x6350 <make_frequency+0x348>
        if (right) {
    62d8:	55 20       	and	r5, r5
    62da:	21 f1       	breq	.+72     	; 0x6324 <make_frequency+0x31c>
           significant--;		// diplay one digit less
    62dc:	39 85       	ldd	r19, Y+9	; 0x09
    62de:	31 50       	subi	r19, 0x01	; 1
    62e0:	39 87       	std	Y+9, r19	; 0x09
           f_incre /= 10;		// 
    62e2:	6a 85       	ldd	r22, Y+10	; 0x0a
    62e4:	71 2f       	mov	r23, r17
    62e6:	8b 2d       	mov	r24, r11
    62e8:	9a 2d       	mov	r25, r10
    62ea:	2a e0       	ldi	r18, 0x0A	; 10
    62ec:	30 e0       	ldi	r19, 0x00	; 0
    62ee:	40 e0       	ldi	r20, 0x00	; 0
    62f0:	50 e0       	ldi	r21, 0x00	; 0
    62f2:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    62f6:	2a 87       	std	Y+10, r18	; 0x0a
    62f8:	13 2f       	mov	r17, r19
    62fa:	b4 2e       	mov	r11, r20
    62fc:	a5 2e       	mov	r10, r21
           f_digit = (wish_freq / f_incre) % 10; // start with last digit
    62fe:	6d 81       	ldd	r22, Y+5	; 0x05
    6300:	7e 81       	ldd	r23, Y+6	; 0x06
    6302:	8f 81       	ldd	r24, Y+7	; 0x07
    6304:	98 85       	ldd	r25, Y+8	; 0x08
    6306:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    630a:	ca 01       	movw	r24, r20
    630c:	b9 01       	movw	r22, r18
    630e:	2a e0       	ldi	r18, 0x0A	; 10
    6310:	30 e0       	ldi	r19, 0x00	; 0
    6312:	40 e0       	ldi	r20, 0x00	; 0
    6314:	50 e0       	ldi	r21, 0x00	; 0
    6316:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    631a:	96 2e       	mov	r9, r22
           Max_Digit = 10;		// f_incre will be 10kHz or less, allways 0-9
    631c:	2a e0       	ldi	r18, 0x0A	; 10
    631e:	72 2e       	mov	r7, r18
  for (times=0; times<240;) 
    6320:	81 2c       	mov	r8, r1
    6322:	aa cf       	rjmp	.-172    	; 0x6278 <make_frequency+0x270>
           if (significant >= (16+6)) {
    6324:	49 85       	ldd	r20, Y+9	; 0x09
    6326:	46 31       	cpi	r20, 0x16	; 22
    6328:	d8 f4       	brcc	.+54     	; 0x6360 <make_frequency+0x358>
           significant++;		// display one digit more
    632a:	4f 5f       	subi	r20, 0xFF	; 255
    632c:	49 87       	std	Y+9, r20	; 0x09
           if (significant == (16+6)) Max_Digit = 21;
    632e:	46 31       	cpi	r20, 0x16	; 22
    6330:	11 f4       	brne	.+4      	; 0x6336 <make_frequency+0x32e>
    6332:	95 e1       	ldi	r25, 0x15	; 21
    6334:	79 2e       	mov	r7, r25
           f_incre *= 10;		// change next digit to the left
    6336:	aa e0       	ldi	r26, 0x0A	; 10
    6338:	b0 e0       	ldi	r27, 0x00	; 0
    633a:	2a 85       	ldd	r18, Y+10	; 0x0a
    633c:	31 2f       	mov	r19, r17
    633e:	4b 2d       	mov	r20, r11
    6340:	5a 2d       	mov	r21, r10
    6342:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    6346:	6a 87       	std	Y+10, r22	; 0x0a
    6348:	17 2f       	mov	r17, r23
    634a:	b8 2e       	mov	r11, r24
    634c:	a9 2e       	mov	r10, r25
           continue;
    634e:	e8 cf       	rjmp	.-48     	; 0x6320 <make_frequency+0x318>
        if (key_pressed > KEYPRESS_LENGTH_10ms) f_digit++; // longer key press select next frequency
    6350:	8b 30       	cpi	r24, 0x0B	; 11
    6352:	08 f0       	brcs	.+2      	; 0x6356 <make_frequency+0x34e>
    6354:	63 94       	inc	r6
    6356:	20 e0       	ldi	r18, 0x00	; 0
    6358:	76 cf       	rjmp	.-276    	; 0x6246 <make_frequency+0x23e>
        f_digit += (Max_Digit + 1 + rotary.count);	// decrease the frequency by rotary.count
    635a:	8f 5f       	subi	r24, 0xFF	; 255
    635c:	87 0d       	add	r24, r7
    635e:	7c cf       	rjmp	.-264    	; 0x6258 <make_frequency+0x250>
              Max_Digit = 10;
    6360:	8a e0       	ldi	r24, 0x0A	; 10
    6362:	78 2e       	mov	r7, r24
              f_digit = 1;		// start value = 1 Hz
    6364:	99 24       	eor	r9, r9
    6366:	93 94       	inc	r9
              f_incre = 1;		// increment with 1 Hz
    6368:	81 e0       	ldi	r24, 0x01	; 1
    636a:	8a 87       	std	Y+10, r24	; 0x0a
    636c:	10 e0       	ldi	r17, 0x00	; 0
    636e:	b1 2c       	mov	r11, r1
    6370:	a1 2c       	mov	r10, r1
              significant = 16+1;	// only one significant digit
    6372:	91 e1       	ldi	r25, 0x11	; 17
    6374:	99 87       	std	Y+9, r25	; 0x09
    6376:	d4 cf       	rjmp	.-88     	; 0x6320 <make_frequency+0x318>
#endif
  } /* end for times */
  TCCR1B = 0;		// stop counter
    6378:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCCR1A = 0;		// stop counter
    637c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  ADC_DDR =  TXD_MSK;	// disconnect TP1 
    6380:	17 b8       	out	0x07, r1	; 7
  R_DDR = 0;		// switch resistor ports to Input
    6382:	14 b8       	out	0x04, r1	; 4
#if PROCESSOR_TYP == 1280
  DDRB  &= ~(1<<DDB6);	// disable output 
#else
  DDRB  &= ~(1<<DDB2);	// disable output 
    6384:	22 98       	cbi	0x04, 2	; 4
#endif

} /* end make frequency */
    6386:	2a 96       	adiw	r28, 0x0a	; 10
    6388:	e2 e1       	ldi	r30, 0x12	; 18
    638a:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>

0000638e <do_10bit_PWM>:
/* a short key press increase the duty cycle with 1%   */
/* a longer key press incrrase with 10%                */
/* a very long key press returns to menue              */
/* *************************************************** */
 #if (USE_PWM == 1)
void do_10bit_PWM() {
    638e:	a5 e0       	ldi	r26, 0x05	; 5
    6390:	b0 e0       	ldi	r27, 0x00	; 0
    6392:	ed ec       	ldi	r30, 0xCD	; 205
    6394:	f1 e3       	ldi	r31, 0x31	; 49
    6396:	0c 94 d5 3d 	jmp	0x7baa	; 0x7baa <__prologue_saves__+0x4>
  uint8_t key_pressed;
  uint8_t percent;		// requestet duty-cycle in %
  uint8_t old_perc;		// old duty-cycle in %
  unsigned int pwm_flip;	// value for counter to flip the state
  message_key_released(PWM_10bit_str);	// display PWM-Generator and wait for key released
    639a:	8c ee       	ldi	r24, 0xEC	; 236
    639c:	91 e0       	ldi	r25, 0x01	; 1
    639e:	9e d1       	rcall	.+828    	; 0x66dc <message_key_released>
  // OC1B is connected with 680 Ohm resistor to TP2 (middle test pin) 
  TCCR1A = (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10); // fast PWM mode, mode 7: count to 10 bit
    63a0:	83 e2       	ldi	r24, 0x23	; 35
    63a2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TIMSK1 = 0;		// no interrupt used
    63a6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  OCR1B	= 0xff;		// toggle OC1B at this count
    63aa:	8f ef       	ldi	r24, 0xFF	; 255
    63ac:	90 e0       	ldi	r25, 0x00	; 0
    63ae:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    63b2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
  TIFR1 = (1<<OCF1A) | (1<<OCF1A) | (1<<TOV1);	// reset interrupt flags
    63b6:	83 e0       	ldi	r24, 0x03	; 3
    63b8:	86 bb       	out	0x16, r24	; 22
  TCCR1C = 0;
    63ba:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7e0082>

  R_PORT = 0;		// set all resistor port outputs to GND
    63be:	15 b8       	out	0x05, r1	; 5
  #if PROCESSOR_TYP == 644
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL2) | (1<<PIN_RL3);		// set TP1, DDD4(TP2) and TP3 to output
  #else
  R_DDR = (1<<PIN_RL1) | (1<<PIN_RL3);		// set TP1 and TP3 to output
    63c0:	81 e1       	ldi	r24, 0x11	; 17
    63c2:	84 b9       	out	0x04, r24	; 4
  #endif
  ADC_PORT = TXD_VAL;
    63c4:	18 b8       	out	0x08, r1	; 8
  ADC_DDR = (1<<TP1) | TXD_MSK;			//connect TP1 to GND
    63c6:	81 e0       	ldi	r24, 0x01	; 1
    63c8:	87 b9       	out	0x07, r24	; 7
  #if PROCESSOR_TYP == 1280
  DDRB  |= (1<<DDB6);	// set output enable for OC1B
  #else
  DDRB  |= (1<<DDB2);	// set output enable
    63ca:	22 9a       	sbi	0x04, 2	; 4
  #endif
  #ifdef PWM_SERVO
  TCCR1B = (1<<WGM13) | (1<<WGM12) | SERVO_START; // mode 15, clock divide by 8 or 64
  OCR1A = PWM_MAX_COUNT - 1;	// clock tics for 20 ms
  #else
  OCR1A = 1;		// highest frequency
    63cc:	81 e0       	ldi	r24, 0x01	; 1
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    63d4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TCCR1B = (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10); // mode 7, no clock divide
    63d8:	89 e0       	ldi	r24, 0x09	; 9
    63da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  key_pressed = 0;
  old_perc = 0;
  percent = (SERVO_MAX + SERVO_MIN) / 2;	// set to middle
  #ifdef POWER_OFF
  uint8_t times;		// time limit
  for (times=0; times<240; ) 
    63de:	1d 82       	std	Y+5, r1	; 0x05
  old_perc = 0;
    63e0:	00 e0       	ldi	r16, 0x00	; 0
  percent = (SERVO_MAX + SERVO_MIN) / 2;	// set to middle
    63e2:	82 e3       	ldi	r24, 0x32	; 50
    63e4:	89 83       	std	Y+1, r24	; 0x01
  key_pressed = 0;
    63e6:	10 e0       	ldi	r17, 0x00	; 0
	   percent -= (SERVO_MAX - SERVO_MIN);		// reset near to mininum value
        }
  #ifdef PWM_SERVO
        pwm_flip = (((unsigned long)PWM_MAX_COUNT * percent) + 500) / 1000;
  #else
        pwm_flip = (((unsigned long)PWM_MAX_COUNT * percent) + 50) / 100;
    63e8:	84 e6       	ldi	r24, 0x64	; 100
    63ea:	c8 2e       	mov	r12, r24
    63ec:	d1 2c       	mov	r13, r1
    63ee:	e1 2c       	mov	r14, r1
    63f0:	f1 2c       	mov	r15, r1
	lcd_space();
	lcd_data('/');
	lcd_space();
	DisplayValue16(((unsigned long)PWM_MAX_COUNT * SERVO_DIV)/MHZ_CPU, -6,'s',3);
  #else
        DisplayValue16((((unsigned long)pwm_flip * 1000) + (PWM_MAX_COUNT/2)) / PWM_MAX_COUNT,-1,'%',5);
    63f2:	88 24       	eor	r8, r8
    63f4:	8a 94       	dec	r8
    63f6:	93 e0       	ldi	r25, 0x03	; 3
    63f8:	99 2e       	mov	r9, r25
    63fa:	a1 2c       	mov	r10, r1
    63fc:	b1 2c       	mov	r11, r1
     if (percent != old_perc) {
    63fe:	99 81       	ldd	r25, Y+1	; 0x01
    6400:	90 17       	cp	r25, r16
    6402:	09 f4       	brne	.+2      	; 0x6406 <do_10bit_PWM+0x78>
    6404:	43 c0       	rjmp	.+134    	; 0x648c <do_10bit_PWM+0xfe>
	   percent -= (SERVO_MAX - SERVO_MIN);		// reset near to mininum value
    6406:	09 2f       	mov	r16, r25
    6408:	04 56       	subi	r16, 0x64	; 100
        if (percent >= SERVO_MAX) {
    640a:	94 36       	cpi	r25, 0x64	; 100
    640c:	08 f4       	brcc	.+2      	; 0x6410 <do_10bit_PWM+0x82>
    640e:	09 81       	ldd	r16, Y+1	; 0x01
        pwm_flip = (((unsigned long)PWM_MAX_COUNT * percent) + 50) / 100;
    6410:	20 2f       	mov	r18, r16
    6412:	30 e0       	ldi	r19, 0x00	; 0
    6414:	af ef       	ldi	r26, 0xFF	; 255
    6416:	b3 e0       	ldi	r27, 0x03	; 3
    6418:	0e 94 29 3d 	call	0x7a52	; 0x7a52 <__umulhisi3>
    641c:	dc 01       	movw	r26, r24
    641e:	cb 01       	movw	r24, r22
    6420:	c2 96       	adiw	r24, 0x32	; 50
    6422:	a1 1d       	adc	r26, r1
    6424:	b1 1d       	adc	r27, r1
    6426:	bc 01       	movw	r22, r24
    6428:	cd 01       	movw	r24, r26
    642a:	a7 01       	movw	r20, r14
    642c:	96 01       	movw	r18, r12
    642e:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    6432:	29 01       	movw	r4, r18
    6434:	3a 01       	movw	r6, r20
        OCR1B = pwm_flip;		// new percentage
    6436:	30 93 8b 00 	sts	0x008B, r19	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    643a:	20 93 8a 00 	sts	0x008A, r18	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
        lcd_line2();		// goto line 2
    643e:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
        DisplayValue16((((unsigned long)pwm_flip * 1000) + (PWM_MAX_COUNT/2)) / PWM_MAX_COUNT,-1,'%',5);
    6442:	a8 ee       	ldi	r26, 0xE8	; 232
    6444:	b3 e0       	ldi	r27, 0x03	; 3
    6446:	a3 01       	movw	r20, r6
    6448:	92 01       	movw	r18, r4
    644a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    644e:	dc 01       	movw	r26, r24
    6450:	cb 01       	movw	r24, r22
    6452:	81 50       	subi	r24, 0x01	; 1
    6454:	9e 4f       	sbci	r25, 0xFE	; 254
    6456:	af 4f       	sbci	r26, 0xFF	; 255
    6458:	bf 4f       	sbci	r27, 0xFF	; 255
    645a:	89 83       	std	Y+1, r24	; 0x01
    645c:	9a 83       	std	Y+2, r25	; 0x02
    645e:	ab 83       	std	Y+3, r26	; 0x03
    6460:	bc 83       	std	Y+4, r27	; 0x04
    6462:	bc 01       	movw	r22, r24
    6464:	cd 01       	movw	r24, r26
    6466:	a5 01       	movw	r20, r10
    6468:	94 01       	movw	r18, r8
    646a:	0e 94 eb 3c 	call	0x79d6	; 0x79d6 <__udivmodsi4>
    646e:	29 01       	movw	r4, r18
    6470:	3a 01       	movw	r6, r20
    6472:	25 e0       	ldi	r18, 0x05	; 5
    6474:	45 e2       	ldi	r20, 0x25	; 37
    6476:	6f ef       	ldi	r22, 0xFF	; 255
    6478:	c2 01       	movw	r24, r4
    647a:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
  #endif
        lcd_clear_line();
    647e:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
        old_perc = percent;	// update the old duty cycle
        if (key_pressed > 40) {
    6482:	19 32       	cpi	r17, 0x29	; 41
    6484:	18 f0       	brcs	.+6      	; 0x648c <do_10bit_PWM+0xfe>
           wait_about300ms();	// wait some time to release the button
    6486:	8c e3       	ldi	r24, 0x3C	; 60
    6488:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
        }
     } /* end if percent != old_perc */
     key_pressed = wait_for_key_ms(1600);
    648c:	80 e4       	ldi	r24, 0x40	; 64
    648e:	96 e0       	ldi	r25, 0x06	; 6
    6490:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
    6494:	18 2f       	mov	r17, r24
     if(key_pressed > 130) break;	// more than 1.3 seconds
    6496:	83 38       	cpi	r24, 0x83	; 131
    6498:	b8 f4       	brcc	.+46     	; 0x64c8 <do_10bit_PWM+0x13a>
  #ifdef WITH_ROTARY_SWITCH
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends voltage measurement
    649a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    649e:	8b 30       	cpi	r24, 0x0B	; 11
    64a0:	98 f4       	brcc	.+38     	; 0x64c8 <do_10bit_PWM+0x13a>
     if (rotary.count >= 0) {
    64a2:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>
    64a6:	99 83       	std	Y+1, r25	; 0x01
    64a8:	97 fd       	sbrc	r25, 7
    64aa:	19 c0       	rjmp	.+50     	; 0x64de <do_10bit_PWM+0x150>
        percent += rotary.count;		// increase the duty cycle by rotary.count
    64ac:	90 0f       	add	r25, r16
    64ae:	99 83       	std	Y+1, r25	; 0x01
     } else {
        percent += ((SERVO_MAX-SERVO_MIN) + rotary.count);	// decrease the duty cycle by rotary.count
     }
  #endif
     if (key_pressed > 50) {
    64b0:	13 33       	cpi	r17, 0x33	; 51
    64b2:	d0 f0       	brcs	.+52     	; 0x64e8 <do_10bit_PWM+0x15a>
        percent += 10;		// duty cycle will be increased with 10
    64b4:	b9 81       	ldd	r27, Y+1	; 0x01
    64b6:	b6 5f       	subi	r27, 0xF6	; 246
    64b8:	b9 83       	std	Y+1, r27	; 0x01
     } else {
        if (key_pressed > 0) percent += 1;	// duty cycle will be increased with 1
     }
  #ifdef POWER_OFF
   #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    64ba:	1d 82       	std	Y+5, r1	; 0x05
   #else
     if (key_pressed > 0) times = 0;		//reset the loop counter, operator is active
   #endif
  #endif
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    64bc:	8d 81       	ldd	r24, Y+5	; 0x05
    64be:	be d8       	rcall	.-3716   	; 0x563c <Pwr_mode_check>
    64c0:	8d 83       	std	Y+5, r24	; 0x05
  for (times=0; times<240; ) 
    64c2:	80 3f       	cpi	r24, 0xF0	; 240
    64c4:	08 f4       	brcc	.+2      	; 0x64c8 <do_10bit_PWM+0x13a>
    64c6:	9b cf       	rjmp	.-202    	; 0x63fe <do_10bit_PWM+0x70>
  #endif
  } /* end for times */

  ADC_DDR =  TXD_MSK;	// disconnect TP1 
    64c8:	17 b8       	out	0x07, r1	; 7
  TCCR1B = 0;		// stop counter
    64ca:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  TCCR1A = 0;		// stop counter
    64ce:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  R_DDR = 0;		// switch resistor ports to Input
    64d2:	14 b8       	out	0x04, r1	; 4
  #if PROCESSOR_TYP == 1280
  DDRB  &= ~(1<<DDB6);	// disable output 
  #else
  DDRB  &= ~(1<<DDB2);	// disable output 
    64d4:	22 98       	cbi	0x04, 2	; 4
  #endif
} /* end do_10bit_PWM */
    64d6:	25 96       	adiw	r28, 0x05	; 5
    64d8:	e0 e1       	ldi	r30, 0x10	; 16
    64da:	0c 94 f1 3d 	jmp	0x7be2	; 0x7be2 <__epilogue_restores__+0x4>
        percent += ((SERVO_MAX-SERVO_MIN) + rotary.count);	// decrease the duty cycle by rotary.count
    64de:	a9 81       	ldd	r26, Y+1	; 0x01
    64e0:	ac 59       	subi	r26, 0x9C	; 156
    64e2:	a0 0f       	add	r26, r16
    64e4:	a9 83       	std	Y+1, r26	; 0x01
    64e6:	e4 cf       	rjmp	.-56     	; 0x64b0 <do_10bit_PWM+0x122>
        if (key_pressed > 0) percent += 1;	// duty cycle will be increased with 1
    64e8:	11 23       	and	r17, r17
    64ea:	21 f0       	breq	.+8      	; 0x64f4 <do_10bit_PWM+0x166>
    64ec:	89 81       	ldd	r24, Y+1	; 0x01
    64ee:	8f 5f       	subi	r24, 0xFF	; 255
    64f0:	89 83       	std	Y+1, r24	; 0x01
    64f2:	e3 cf       	rjmp	.-58     	; 0x64ba <do_10bit_PWM+0x12c>
     if ((key_pressed > 0) || (rotary.incre > 0)) times = 0;	// reset the loop counter, operator is active
    64f4:	81 11       	cpse	r24, r1
    64f6:	e1 cf       	rjmp	.-62     	; 0x64ba <do_10bit_PWM+0x12c>
    64f8:	e1 cf       	rjmp	.-62     	; 0x64bc <do_10bit_PWM+0x12e>

000064fa <set_big_cap_corr>:
/* set the correction value for big capacitor measurement */
/* *************************************************** */
 #if (USE_BIG_CAP_CORR == 1)
#define MIN_KORR (-20)
#define MAX_KORR 80
void set_big_cap_corr(void) {
    64fa:	0f 93       	push	r16
    64fc:	1f 93       	push	r17
    64fe:	cf 93       	push	r28
    6500:	df 93       	push	r29
uint8_t key_pressed;
int8_t korr;
  // set the contrast value
  message_key_released(SetCapCorr_str);	// display Capacity correction and wait for key released
    6502:	8b ed       	ldi	r24, 0xDB	; 219
    6504:	91 e0       	ldi	r25, 0x01	; 1
    6506:	ea d0       	rcall	.+468    	; 0x66dc <message_key_released>
  korr = eeprom_read_byte((uint8_t *)&big_cap_corr);
    6508:	8b e1       	ldi	r24, 0x1B	; 27
    650a:	93 e0       	ldi	r25, 0x03	; 3
    650c:	0e 94 66 3e 	call	0x7ccc	; 0x7ccc <eeprom_read_byte>
    6510:	c8 2f       	mov	r28, r24
  #ifdef POWER_OFF
  uint8_t times;
  for (times=0;times<240;)
    6512:	d0 e0       	ldi	r29, 0x00	; 0
  #else
  while (1)                     /* wait endless without option POWER_OFF */
  #endif
  {
     lcd_line2();
    6514:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
     if (korr < 0) {
    6518:	0c 2f       	mov	r16, r28
    651a:	0c 2e       	mov	r0, r28
    651c:	00 0c       	add	r0, r0
    651e:	11 0b       	sbc	r17, r17
    6520:	c7 ff       	sbrs	r28, 7
    6522:	31 c0       	rjmp	.+98     	; 0x6586 <set_big_cap_corr+0x8c>
       lcd_minus();		// lcd_data('-');
    6524:	0e 94 a6 06 	call	0xd4c	; 0xd4c <lcd_minus>
       DisplayValue16(-korr,-1,'%',3);
    6528:	23 e0       	ldi	r18, 0x03	; 3
    652a:	45 e2       	ldi	r20, 0x25	; 37
    652c:	6f ef       	ldi	r22, 0xFF	; 255
    652e:	88 27       	eor	r24, r24
    6530:	99 27       	eor	r25, r25
    6532:	80 1b       	sub	r24, r16
    6534:	91 0b       	sbc	r25, r17
     } else {
       DisplayValue16(korr,-1,'%',3);
    6536:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
     }
     lcd_clear_line();		// clear to end of line
    653a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     key_pressed = wait_for_key_ms(1600);
    653e:	80 e4       	ldi	r24, 0x40	; 64
    6540:	96 e0       	ldi	r25, 0x06	; 6
    6542:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
  #ifdef POWER_OFF
   #ifdef WITH_ROTARY_SWITCH
     if ((key_pressed != 0) || (rotary.incre > 0)) times = 0;	// reset counter, operator is active
    6546:	81 11       	cpse	r24, r1
    6548:	23 c0       	rjmp	.+70     	; 0x6590 <set_big_cap_corr+0x96>
    654a:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    654e:	91 11       	cpse	r25, r1
    6550:	21 c0       	rjmp	.+66     	; 0x6594 <set_big_cap_corr+0x9a>
   #endif
  #endif
     if(key_pressed >= 130) break;	// more than 1.3 seconds
  #ifdef WITH_ROTARY_SWITCH
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends setting of korr
     korr += rotary.count;		// increase or decrease the korr by rotary.count
    6552:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>
    6556:	c9 0f       	add	r28, r25
  #endif
     if (key_pressed > 0) {
    6558:	88 23       	and	r24, r24
    655a:	19 f0       	breq	.+6      	; 0x6562 <set_big_cap_corr+0x68>
        if (key_pressed > 40) {
    655c:	89 32       	cpi	r24, 0x29	; 41
    655e:	00 f1       	brcs	.+64     	; 0x65a0 <set_big_cap_corr+0xa6>
           korr++; // longer key press select higher korr value
    6560:	cf 5f       	subi	r28, 0xFF	; 255
        } else {
           korr--;	// decrease the korr 
        }
     }
     if (korr > MAX_KORR) korr -= (MAX_KORR - MIN_KORR + 1);
    6562:	c1 35       	cpi	r28, 0x51	; 81
    6564:	fc f0       	brlt	.+62     	; 0x65a4 <set_big_cap_corr+0xaa>
    6566:	c5 56       	subi	r28, 0x65	; 101
     if (korr < MIN_KORR) korr += (MAX_KORR - MIN_KORR + 1);
  #ifdef POWER_OFF
     times = Pwr_mode_check(times);	// no time limit with DC_Pwr_mode
    6568:	8d 2f       	mov	r24, r29
    656a:	68 d8       	rcall	.-3888   	; 0x563c <Pwr_mode_check>
    656c:	d8 2f       	mov	r29, r24
  for (times=0;times<240;)
    656e:	80 3f       	cpi	r24, 0xF0	; 240
    6570:	88 f2       	brcs	.-94     	; 0x6514 <set_big_cap_corr+0x1a>
  #endif
  } /* end for times */

  eeprom_write_byte((uint8_t *)(&big_cap_corr), (int8_t)korr);	// save korr value
    6572:	6c 2f       	mov	r22, r28
    6574:	8b e1       	ldi	r24, 0x1B	; 27
    6576:	93 e0       	ldi	r25, 0x03	; 3
    6578:	0e 94 73 3e 	call	0x7ce6	; 0x7ce6 <eeprom_write_byte>
}	/* end set_big_cap_corr() */
    657c:	df 91       	pop	r29
    657e:	cf 91       	pop	r28
    6580:	1f 91       	pop	r17
    6582:	0f 91       	pop	r16
    6584:	08 95       	ret
       DisplayValue16(korr,-1,'%',3);
    6586:	23 e0       	ldi	r18, 0x03	; 3
    6588:	45 e2       	ldi	r20, 0x25	; 37
    658a:	6f ef       	ldi	r22, 0xFF	; 255
    658c:	c8 01       	movw	r24, r16
    658e:	d3 cf       	rjmp	.-90     	; 0x6536 <set_big_cap_corr+0x3c>
     if(key_pressed >= 130) break;	// more than 1.3 seconds
    6590:	82 38       	cpi	r24, 0x82	; 130
    6592:	78 f7       	brcc	.-34     	; 0x6572 <set_big_cap_corr+0x78>
     if (rotary.incre > FAST_ROTATION) break;		// fast rotation ends setting of korr
    6594:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    6598:	9b 30       	cpi	r25, 0x0B	; 11
    659a:	58 f7       	brcc	.-42     	; 0x6572 <set_big_cap_corr+0x78>
    659c:	d0 e0       	ldi	r29, 0x00	; 0
    659e:	d9 cf       	rjmp	.-78     	; 0x6552 <set_big_cap_corr+0x58>
           korr--;	// decrease the korr 
    65a0:	c1 50       	subi	r28, 0x01	; 1
    65a2:	df cf       	rjmp	.-66     	; 0x6562 <set_big_cap_corr+0x68>
     if (korr < MIN_KORR) korr += (MAX_KORR - MIN_KORR + 1);
    65a4:	cc 3e       	cpi	r28, 0xEC	; 236
    65a6:	04 f7       	brge	.-64     	; 0x6568 <set_big_cap_corr+0x6e>
    65a8:	cb 59       	subi	r28, 0x9B	; 155
    65aa:	de cf       	rjmp	.-68     	; 0x6568 <set_big_cap_corr+0x6e>

000065ac <do_menu>:
    if (func_number == MODE_FREQ) GetFrequency(0);
    65ac:	81 30       	cpi	r24, 0x01	; 1
    65ae:	19 f4       	brne	.+6      	; 0x65b6 <do_menu+0xa>
    65b0:	80 e0       	ldi	r24, 0x00	; 0
    65b2:	ab c0       	rjmp	.+342    	; 0x670a <GetFrequency>
    if (func_number == MODE_RESIS) {
    65b4:	08 95       	ret
    if (func_number == MODE_FGEN) {
    65b6:	82 30       	cpi	r24, 0x02	; 2
    65b8:	21 f0       	breq	.+8      	; 0x65c2 <do_menu+0x16>
    if (func_number == MODE_PWM) {
    65ba:	83 30       	cpi	r24, 0x03	; 3
       do_10bit_PWM();		// generate 10bit PWM
    65bc:	21 f4       	brne	.+8      	; 0x65c6 <do_menu+0x1a>
    if (func_number == MODE_CAP13) {
    65be:	e7 ce       	rjmp	.-562    	; 0x638e <do_10bit_PWM>
       make_frequency();		// make some sample frequencies
    65c0:	08 95       	ret
    65c2:	22 cd       	rjmp	.-1468   	; 0x6008 <make_frequency>
    if (func_number == MODE_RESIS) {
    65c4:	08 95       	ret
    if (func_number == MODE_ESR) {
    65c6:	84 30       	cpi	r24, 0x04	; 4
    65c8:	79 f0       	breq	.+30     	; 0x65e8 <do_menu+0x3c>
    if (func_number == MODE_RESIS) {
    65ca:	85 30       	cpi	r24, 0x05	; 5
    65cc:	79 f0       	breq	.+30     	; 0x65ec <do_menu+0x40>
    if (func_number == MODE_CAP13) {
    65ce:	86 30       	cpi	r24, 0x06	; 6
    65d0:	79 f0       	breq	.+30     	; 0x65f0 <do_menu+0x44>
    if (func_number == MODE_BIG_CAP_CORR) {
    65d2:	87 30       	cpi	r24, 0x07	; 7
    65d4:	89 f0       	breq	.+34     	; 0x65f8 <do_menu+0x4c>
    if (func_number == MODE_SELFTEST) AutoCheck(0x11);	// Full selftest with calibration
    65d6:	89 30       	cpi	r24, 0x09	; 9
    65d8:	89 f0       	breq	.+34     	; 0x65fc <do_menu+0x50>
    if (func_number == MODE_VEXT) show_vext();
    65da:	88 30       	cpi	r24, 0x08	; 8
    65dc:	99 f0       	breq	.+38     	; 0x6604 <do_menu+0x58>
    if (func_number == MODE_SHOW) {
    65de:	8a 30       	cpi	r24, 0x0A	; 10
    65e0:	99 f0       	breq	.+38     	; 0x6608 <do_menu+0x5c>
    if (func_number == MODE_OFF) {
    65e2:	8b 30       	cpi	r24, 0x0B	; 11
    65e4:	99 f0       	breq	.+38     	; 0x660c <do_menu+0x60>
       show_C_ESR();		// measure capacity and ESR at TP1 and TP3
    65e6:	08 95       	ret
    65e8:	5f cc       	rjmp	.-1858   	; 0x5ea8 <show_C_ESR>
    if (func_number == MODE_BIG_CAP_CORR) {
    65ea:	08 95       	ret
       show_Resis13();		// measure resistor at TP1 and TP3
    65ec:	31 c8       	rjmp	.-3998   	; 0x5650 <show_Resis13>
    if (func_number == MODE_VEXT) show_vext();
    65ee:	08 95       	ret
       lcd_clear();
    65f0:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
       show_Cap13();		// measure capacitor at TP1 and TP3
    65f4:	77 c8       	rjmp	.-3858   	; 0x56e4 <show_Cap13>
    if (func_number == MODE_SHOW) {
    65f6:	08 95       	ret
       set_big_cap_corr();
    65f8:	80 cf       	rjmp	.-256    	; 0x64fa <set_big_cap_corr>
    65fa:	08 95       	ret
    if (func_number == MODE_SELFTEST) AutoCheck(0x11);	// Full selftest with calibration
    65fc:	81 e1       	ldi	r24, 0x11	; 17
    65fe:	0c 94 02 11 	jmp	0x2204	; 0x2204 <AutoCheck>
    if (func_number == MODE_VEXT) show_vext();
    6602:	08 95       	ret
    6604:	c3 cc       	rjmp	.-1658   	; 0x5f8c <show_vext>
    if (func_number == MODE_OFF) {
    6606:	08 95       	ret
       ShowData();			// Show Calibration Data
    6608:	c9 c3       	rjmp	.+1938   	; 0x6d9c <ShowData>
    660a:	08 95       	ret
    if (func_number == MODE_OFF) {
    660c:	0c 94 ad 10 	jmp	0x215a	; 0x215a <switch_tester_off>
       switch_tester_off();		//switch off power
    6610:	08 95       	ret

00006612 <function_menu>:
}
    6612:	ff 92       	push	r15
uint8_t function_menu() {
    6614:	0f 93       	push	r16
    6616:	1f 93       	push	r17
    6618:	cf 93       	push	r28
    661a:	df 93       	push	r29
  message_key_released(SELECTION_str);
    661c:	8b e2       	ldi	r24, 0x2B	; 43
    661e:	92 e0       	ldi	r25, 0x02	; 2
    6620:	5d d0       	rcall	.+186    	; 0x66dc <message_key_released>
  for (ll=0;ll<((MODE_LAST+1)*10);ll++) 
    6622:	d0 e0       	ldi	r29, 0x00	; 0
  func_number = 0;
    6624:	c0 e0       	ldi	r28, 0x00	; 0
     mm = 0;
    6626:	0a e0       	ldi	r16, 0x0A	; 10
    6628:	0c 0f       	add	r16, r28
    662a:	10 e0       	ldi	r17, 0x00	; 0
        lcd_set_cursor((mm+1)*PAGES_PER_LINE,0);
    662c:	f1 2e       	mov	r15, r17
    662e:	1f 5f       	subi	r17, 0xFF	; 255
    6630:	60 e0       	ldi	r22, 0x00	; 0
    6632:	81 2f       	mov	r24, r17
    6634:	88 0f       	add	r24, r24
    6636:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
        if (mm == MENU_MIDDLE) {
    663a:	82 e0       	ldi	r24, 0x02	; 2
    663c:	f8 12       	cpse	r15, r24
    663e:	47 c0       	rjmp	.+142    	; 0x66ce <function_menu+0xbc>
           lcd_data('>');				// put a '>' marker to row 1 of line 4
    6640:	8e e3       	ldi	r24, 0x3E	; 62
    6642:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
        if (f_nr > MODE_LAST) f_nr -= (MODE_LAST +1);
    6646:	84 ef       	ldi	r24, 0xF4	; 244
    6648:	80 0f       	add	r24, r16
    664a:	0c 30       	cpi	r16, 0x0C	; 12
    664c:	08 f4       	brcc	.+2      	; 0x6650 <function_menu+0x3e>
        message2line(f_nr);	// show function for this line
    664e:	80 2f       	mov	r24, r16
    6650:	e7 db       	rcall	.-2098   	; 0x5e20 <message2line>
     } while (++mm < MENU_LINES);
    6652:	0f 5f       	subi	r16, 0xFF	; 255
    6654:	15 30       	cpi	r17, 0x05	; 5
    6656:	51 f7       	brne	.-44     	; 0x662c <function_menu+0x1a>
     ii = wait_for_key_ms(SHORT_WAIT_TIME);	// wait about 5 seconds
    6658:	80 e4       	ldi	r24, 0x40	; 64
    665a:	9f e1       	ldi	r25, 0x1F	; 31
    665c:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
     if (ii > 0) ll = 0;			// reset timer, operator present
    6660:	81 11       	cpse	r24, r1
    6662:	d0 e0       	ldi	r29, 0x00	; 0
     if (DC_Pwr_mode == 1) ll = 0;
    6664:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <DC_Pwr_mode>
    6668:	91 30       	cpi	r25, 0x01	; 1
    666a:	09 f4       	brne	.+2      	; 0x666e <function_menu+0x5c>
    666c:	d0 e0       	ldi	r29, 0x00	; 0
     if ((ii >= MIN_SELECT_TIME) || ((rotary_switch_present != 0) && (ii > 0)))
    666e:	82 33       	cpi	r24, 0x32	; 50
    6670:	30 f4       	brcc	.+12     	; 0x667e <function_menu+0x6c>
    6672:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <rotary_switch_present>
    6676:	99 23       	and	r25, r25
    6678:	71 f0       	breq	.+28     	; 0x6696 <function_menu+0x84>
    667a:	88 23       	and	r24, r24
    667c:	61 f0       	breq	.+24     	; 0x6696 <function_menu+0x84>
        if (func_number == MODE_TRANS) return 0;		// return to TransistorTester
    667e:	cc 23       	and	r28, r28
        do_menu(func_number);
    6680:	d9 f0       	breq	.+54     	; 0x66b8 <function_menu+0xa6>
    6682:	8c 2f       	mov	r24, r28
    6684:	93 df       	rcall	.-218    	; 0x65ac <do_menu>
        rotary.incre = 0;	// reset all rotary information
    6686:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <rotary+0x6>
        rotary.count = 0;
    668a:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <rotary+0x5>
        message_key_released(SELECTION_str);	//write Line 1 with Selection:
    668e:	8b e2       	ldi	r24, 0x2B	; 43
    6690:	92 e0       	ldi	r25, 0x02	; 2
    6692:	24 d0       	rcall	.+72     	; 0x66dc <message_key_released>
        ii = 0;			// function was executed before, do not increase func_number
    6694:	80 e0       	ldi	r24, 0x00	; 0
     if (rotary.incre >= FAST_ROTATION) break; // to much rotation
    6696:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <rotary+0x6>
    669a:	9a 30       	cpi	r25, 0x0A	; 10
    669c:	68 f4       	brcc	.+26     	; 0x66b8 <function_menu+0xa6>
     if (rotary.count != 0) ll = 0; 	// someone is working, reset timer
    669e:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <rotary+0x5>
    66a2:	99 23       	and	r25, r25
    66a4:	19 f0       	breq	.+6      	; 0x66ac <function_menu+0x9a>
     if (rotary.count >= 0) {
    66a6:	97 fd       	sbrc	r25, 7
    66a8:	15 c0       	rjmp	.+42     	; 0x66d4 <function_menu+0xc2>
     if (rotary.count != 0) ll = 0; 	// someone is working, reset timer
    66aa:	d0 e0       	ldi	r29, 0x00	; 0
        func_number += rotary.count;	// function number is increased by rotary steps
    66ac:	c9 0f       	add	r28, r25
     if (ii > 0) func_number++;	// increase the function number with key press
    66ae:	81 11       	cpse	r24, r1
    66b0:	cf 5f       	subi	r28, 0xFF	; 255
  for (ll=0;ll<((MODE_LAST+1)*10);ll++) 
    66b2:	df 5f       	subi	r29, 0xFF	; 255
    66b4:	d8 37       	cpi	r29, 0x78	; 120
    66b6:	31 f4       	brne	.+12     	; 0x66c4 <function_menu+0xb2>
 } // end function_menu()
    66b8:	80 e0       	ldi	r24, 0x00	; 0
    66ba:	cd b7       	in	r28, 0x3d	; 61
    66bc:	de b7       	in	r29, 0x3e	; 62
    66be:	e5 e0       	ldi	r30, 0x05	; 5
    66c0:	0c 94 fc 3d 	jmp	0x7bf8	; 0x7bf8 <__epilogue_restores__+0x1a>
     if (func_number > MODE_LAST) func_number -= (MODE_LAST + 1);
    66c4:	cc 30       	cpi	r28, 0x0C	; 12
    66c6:	08 f4       	brcc	.+2      	; 0x66ca <function_menu+0xb8>
    66c8:	ae cf       	rjmp	.-164    	; 0x6626 <function_menu+0x14>
    66ca:	cc 50       	subi	r28, 0x0C	; 12
    66cc:	ac cf       	rjmp	.-168    	; 0x6626 <function_menu+0x14>
           lcd_space();				// put a blank to 1. row of line 2
    66ce:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
    66d2:	b9 cf       	rjmp	.-142    	; 0x6646 <function_menu+0x34>
        func_number += (MODE_LAST + 1 + rotary.count);	// function is decreased by rotary steps
    66d4:	94 5f       	subi	r25, 0xF4	; 244
    66d6:	c9 0f       	add	r28, r25
     if (rotary.count != 0) ll = 0; 	// someone is working, reset timer
    66d8:	d0 e0       	ldi	r29, 0x00	; 0
    66da:	e9 cf       	rjmp	.-46     	; 0x66ae <function_menu+0x9c>

000066dc <message_key_released>:

//=================================================================
// Clear display, show Message XX_str and wait for key release

#if FLASHEND > 0x3fff
void message_key_released(const unsigned char XX_str[]) {
    66dc:	cf 93       	push	r28
    66de:	df 93       	push	r29
    66e0:	d8 2f       	mov	r29, r24
    66e2:	c9 2f       	mov	r28, r25
//  lcd_clear_line();
//  lcd_line2();
//  lcd_clear_line();
//  lcd_line1();
//#else
  lcd_clear();
    66e4:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
//#endif
  lcd_MEM2_string(XX_str);		// display MEM2_str in row 1
    66e8:	8d 2f       	mov	r24, r29
    66ea:	9c 2f       	mov	r25, r28
    66ec:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
    66f0:	c4 e6       	ldi	r28, 0x64	; 100
  for (times=0;times<100;times++) {
     wait_about10ms();
    66f2:	82 e0       	ldi	r24, 0x02	; 2
    66f4:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
    if((RST_PIN_REG & (1<<RST_PIN))) break;	// key is released
    66f8:	4f 99       	sbic	0x09, 7	; 9
    66fa:	02 c0       	rjmp	.+4      	; 0x6700 <message_key_released+0x24>
  for (times=0;times<100;times++) {
    66fc:	c1 50       	subi	r28, 0x01	; 1
    66fe:	c9 f7       	brne	.-14     	; 0x66f2 <message_key_released+0x16>
  }
  lcd_line2();
    6700:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
  return;
} /* end message_key_released() */
    6704:	df 91       	pop	r29
    6706:	cf 91       	pop	r28
    6708:	08 95       	ret

0000670a <GetFrequency>:
 #define PCINTx_vect PCINT2_vect
#endif

#if defined WITH_MENU  && defined USE_FREQ

void GetFrequency(uint8_t range) {
    670a:	aa e0       	ldi	r26, 0x0A	; 10
    670c:	b0 e0       	ldi	r27, 0x00	; 0
    670e:	eb e8       	ldi	r30, 0x8B	; 139
    6710:	f3 e3       	ldi	r31, 0x33	; 51
    6712:	0c 94 d3 3d 	jmp	0x7ba6	; 0x7ba6 <__prologue_saves__>
    FINP_PORT |= (1<<FINP_P1);		// set higher bit of input selection
    message_key_released(L_CRYSTAL_str);	// LF Quarz: in line 1
 }

 #else
  message_key_released(FREQ_str);	// Frequency: in line 1
    6716:	84 eb       	ldi	r24, 0xB4	; 180
    6718:	91 e0       	ldi	r25, 0x01	; 1
    671a:	e0 df       	rcall	.-64     	; 0x66dc <message_key_released>
    671c:	60 ef       	ldi	r22, 0xF0	; 240
    671e:	6e 83       	std	Y+6, r22	; 0x06
     // *************************************************************************
     // *********** straight frequency measurement by counting 1 second *********
     // *************************************************************************
     //set up Counter 0
     // Counter 0 is used to count the external signal connected to T0 (PD4 or PB0)
     FREQINP_DDR &= ~(1<<FREQINP_PIN);	// switch frequency pin to input
    6720:	54 98       	cbi	0x0a, 4	; 10
     wait1ms();				// let capacitor time to load to 2.4V input
    6722:	0e 94 a3 07 	call	0xf46	; 0xf46 <wait1ms>
     TCNT3 = 0;				// set counter 3 to zero
     ext_freq.dw = 0;			// set external frequency to zero
     TIFR3 = (1<<TOV3);			// clear OV interrupt of timer 3
     TIMSK3 = (1<<TOIE3);		// enable OV interrupt of timer 3
#else
     TCCR0A = 0; 			// normal operation, no output
    6726:	14 bc       	out	0x24, r1	; 36
     TCNT0 = 0;				// set counter to zero
    6728:	16 bc       	out	0x26, r1	; 38
     ext_freq.dw = 0;			// set external frequency to zero
    672a:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <ext_freq>
    672e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <ext_freq+0x1>
    6732:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <ext_freq+0x2>
    6736:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ext_freq+0x3>
     TIFR0 = (1<<TOV0);			// clear OV interrupt of timer 0
    673a:	81 e0       	ldi	r24, 0x01	; 1
    673c:	85 bb       	out	0x15, r24	; 21
     TIMSK0 = (1<<TOIE0);		// enable OV interrupt of timer 0
    673e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
#endif
     // start counter after starting second counter timer 1

     // set up counter 1 to measure one second
     TCCR1A = 0;			// normal operation
    6742:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
#else 
 #if F_CPU != ((F_CPU / 256UL) * 256UL)
  #warning F_CPU can not be divided by 256, measured frequency is wrong!
 #endif
#endif
     OCR1B = (CNT1_END_VAL & 0xffff);	// set to 1 second  (counter 0 is started with 1)
    6746:	a5 e2       	ldi	r26, 0x25	; 37
    6748:	b4 ef       	ldi	r27, 0xF4	; 244
    674a:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
    674e:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     OCR1A = 1;				// start counter 0 with first count
    6752:	e1 e0       	ldi	r30, 0x01	; 1
    6754:	f0 e0       	ldi	r31, 0x00	; 0
    6756:	f0 93 89 00 	sts	0x0089, r31	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    675a:	e0 93 88 00 	sts	0x0088, r30	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     TCNT1 = 0;				// set counter to zero
    675e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    6762:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     GTCCR  |= (1<<PSRSYNC);		// reset clock precounter
    6766:	83 b5       	in	r24, 0x23	; 35
    6768:	81 60       	ori	r24, 0x01	; 1
    676a:	83 bd       	out	0x23, r24	; 35
     TIFR1 = (1<<OCF1B) | (1<<OCF1A);	// clear Output compare match
    676c:	f6 e0       	ldi	r31, 0x06	; 6
    676e:	f6 bb       	out	0x16, r31	; 22
#if CNT1_END_VAL > 0xffff
     TIMSK1 =  (1<<OCIE1A);		// enable the Compare A match interrupt
#else
     TIMSK1 = (1<<OCIE1B) | (1<<OCIE1A);	// enable the Compare A match and Compare B match interrupt
    6770:	f0 93 6f 00 	sts	0x006F, r31	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
#endif
     sei();				// set interrupt enable
    6774:	78 94       	sei
     TCCR1B = CNT1_DIVIDER;		// divide CPU clock by 256, start counter
    6776:	64 e0       	ldi	r22, 0x04	; 4
    6778:	60 93 81 00 	sts	0x0081, r22	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    677c:	82 e3       	ldi	r24, 0x32	; 50
    677e:	89 83       	std	Y+1, r24	; 0x01
    6780:	1d 82       	std	Y+5, r1	; 0x05
     // both counter are running now, wait for counter 1 reach OCR1A
     for (ii=0;ii<50;ii++) {
        wait20ms();			// first count of counter 1 (<32us) has started the counter 0
    6782:	0e 94 9c 07 	call	0xf38	; 0xf38 <wait20ms>
        if ((TIFR1 & (1<<TOV1)) != 0) {
          TIFR1 = (1<<OCF1B)|(1<<TOV1);		// reset TOV1 Overflow and Output compare B match Flag
          TIMSK1 = (1<<OCIE1B);		// enable the Compare B match interrupt
        }
#endif
        wdt_reset();
    6786:	a8 95       	wdr
        if (!(RST_PIN_REG & (1<<RST_PIN))) taste = 1;	// user request stop of operation
    6788:	4f 99       	sbic	0x09, 7	; 9
    678a:	02 c0       	rjmp	.+4      	; 0x6790 <GetFrequency+0x86>
    678c:	91 e0       	ldi	r25, 0x01	; 1
    678e:	9d 83       	std	Y+5, r25	; 0x05
#if PROCESSOR_TYP == 1280
        if (TCCR3B == 0) break;		// timer 3 is stopped by interrupt
#else
        if (TCCR0B == 0) break;		// timer 0 is stopped by interrupt
    6790:	85 b5       	in	r24, 0x25	; 37
    6792:	88 23       	and	r24, r24
    6794:	29 f0       	breq	.+10     	; 0x67a0 <GetFrequency+0x96>
     for (ii=0;ii<50;ii++) {
    6796:	a9 81       	ldd	r26, Y+1	; 0x01
    6798:	a1 50       	subi	r26, 0x01	; 1
    679a:	a9 83       	std	Y+1, r26	; 0x01
    679c:	a1 11       	cpse	r26, r1
    679e:	f1 cf       	rjmp	.-30     	; 0x6782 <GetFrequency+0x78>
     // one second is counted
#if PROCESSOR_TYP == 1280
     TCCR3B = 0;		// stop timer 3, if not stopped by timer 1 compare interrupt
     ext_freq.w[0] = TCNT3;	// add lower 16 bit to get total counts
#else
     TCCR0B = 0;		// stop timer 0, if not stopped by timer 1 compare interrupt
    67a0:	15 bc       	out	0x25, r1	; 37
     ext_freq.b[0] = TCNT0;	// add lower 8 bit to get total counts
    67a2:	86 b5       	in	r24, 0x26	; 38
    67a4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <ext_freq>
#endif
 #if PROCESSOR_TYP == 644
     freq_count = ext_freq.dw;	// save the frequency counter
 #endif
 #if (LCD_LINES > 3)
     lcd_line3();
    67a8:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
     lcd_clear_line();
    67ac:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     lcd_line4();
    67b0:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <lcd_line4>
     lcd_clear_line();
    67b4:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
     lcd_clear_line2();
    67b8:	0e 94 9f 0b 	call	0x173e	; 0x173e <lcd_clear_line2>
 #else
     lcd_clear();		// clear total display
 #endif
     lcd_data('f');
    67bc:	86 e6       	ldi	r24, 0x66	; 102
    67be:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
     lcd_equal();		// lcd_data('=');
    67c2:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
  #ifdef WITH_FREQUENCY_DIVIDER
     uint16_t freq_factor;
     freq_factor = (1<<eeprom_read_byte((uint8_t *)&f_scaler));
     Display_Hz(ext_freq.dw*freq_factor, 7);
  #else
     Display_Hz(ext_freq.dw, 7);
    67c6:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <ext_freq>
    67ca:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <ext_freq+0x1>
    67ce:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <ext_freq+0x2>
    67d2:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <ext_freq+0x3>
    67d6:	89 83       	std	Y+1, r24	; 0x01
    67d8:	9a 83       	std	Y+2, r25	; 0x02
    67da:	ab 83       	std	Y+3, r26	; 0x03
    67dc:	bc 83       	std	Y+4, r27	; 0x04
    67de:	47 e0       	ldi	r20, 0x07	; 7
    67e0:	bc 01       	movw	r22, r24
    67e2:	cd 01       	movw	r24, r26
    67e4:	0e 94 5f 0e 	call	0x1cbe	; 0x1cbe <Display_Hz>
  #endif
 #endif  /* PROCESSOR_TYP 644 or other */
     FREQINP_DDR &= ~(1<<FREQINP_PIN);	// switch frequency pin to input
    67e8:	54 98       	cbi	0x0a, 4	; 10
     if (TCCR1B != 0) {
    67ea:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    67ee:	88 23       	and	r24, r24
    67f0:	19 f0       	breq	.+6      	; 0x67f8 <GetFrequency+0xee>
       // Exact 1000ms period is only with "end of period" from timer1 interrupt.
       // When stopped with the for loop, the time is too long because wait call does not
       // respect CPU time used for interrupts and loop itself.
       // For this case show ? behind the Hz. 
       lcd_data('?');
    67f2:	8f e3       	ldi	r24, 0x3F	; 63
    67f4:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
     }
     TCCR1B = 0;		// stop timer 1
    67f8:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     TIMSK1 = 0;		// disable all timer 1 interrupts
    67fc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     if ((ext_freq.dw < FMAX_PERIOD) && (ext_freq.dw > 0)) {
    6800:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <ext_freq>
    6804:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <ext_freq+0x1>
    6808:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <ext_freq+0x2>
    680c:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <ext_freq+0x3>
    6810:	da 01       	movw	r26, r20
    6812:	c9 01       	movw	r24, r18
    6814:	01 97       	sbiw	r24, 0x01	; 1
    6816:	a1 09       	sbc	r26, r1
    6818:	b1 09       	sbc	r27, r1
    681a:	83 36       	cpi	r24, 0x63	; 99
    681c:	93 4c       	sbci	r25, 0xC3	; 195
    681e:	a1 05       	cpc	r26, r1
    6820:	b1 05       	cpc	r27, r1
    6822:	08 f0       	brcs	.+2      	; 0x6826 <GetFrequency+0x11c>
    6824:	9b c0       	rjmp	.+310    	; 0x695c <GetFrequency+0x252>
     // *************************************************************************
     // ******** Period measurement by counting some periods ******************** 
     // *************************************************************************
        pinchange_max = ((10 * (unsigned long)ext_freq.dw) + MHZ_CPU) / MHZ_CPU;	// about 10000000 clock tics
    6826:	aa e0       	ldi	r26, 0x0A	; 10
    6828:	b0 e0       	ldi	r27, 0x00	; 0
    682a:	0e 94 3e 3d 	call	0x7a7c	; 0x7a7c <__muluhisi3>
    682e:	69 83       	std	Y+1, r22	; 0x01
    6830:	7a 83       	std	Y+2, r23	; 0x02
    6832:	8b 83       	std	Y+3, r24	; 0x03
    6834:	9c 83       	std	Y+4, r25	; 0x04
    6836:	dc 01       	movw	r26, r24
    6838:	cb 01       	movw	r24, r22
    683a:	40 96       	adiw	r24, 0x10	; 16
    683c:	a1 1d       	adc	r26, r1
    683e:	b1 1d       	adc	r27, r1
    6840:	24 e0       	ldi	r18, 0x04	; 4
    6842:	b6 95       	lsr	r27
    6844:	a7 95       	ror	r26
    6846:	97 95       	ror	r25
    6848:	87 95       	ror	r24
    684a:	2a 95       	dec	r18
    684c:	d1 f7       	brne	.-12     	; 0x6842 <GetFrequency+0x138>
        pinchange_max += pinchange_max;	// * 2 for up and down change
    684e:	88 0f       	add	r24, r24
    6850:	99 1f       	adc	r25, r25
    6852:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <pinchange_max+0x1>
    6856:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <pinchange_max>
        FREQINP_DDR &= ~(1<<FREQINP_PIN);	// switch frequency pin to input
    685a:	54 98       	cbi	0x0a, 4	; 10
        wait1ms();			// let capacitor time to load to 2.4V input
    685c:	0e 94 a3 07 	call	0xf46	; 0xf46 <wait1ms>
	EICRB = (0<<ISC61) | (1<<ISC60); // set int6 pin change
        EIFR  |= (1<<INTF6);		// clear interrupt 6 flag
        PCMSK_FREQ |= (1<<PCINT_FREQ); // enable int6
#else
        // other than PROCESSOR_TYP 1280
        TCNT0 = 0;			// set counter 0 to zero
    6860:	16 bc       	out	0x26, r1	; 38
        ext_freq.dw = 0;		// reset counter to zero
    6862:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <ext_freq>
    6866:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <ext_freq+0x1>
    686a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <ext_freq+0x2>
    686e:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <ext_freq+0x3>
        TIFR0 = (1<<TOV0);		// clear OV interrupt
    6872:	f1 e0       	ldi	r31, 0x01	; 1
    6874:	f5 bb       	out	0x15, r31	; 21
        TIMSK0 = (1<<TOIE0);		// enable OV interrupt
    6876:	f0 93 6e 00 	sts	0x006E, r31	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
        // counter 0 ist started with first pin change interrupt
        pinchange_count = 0;
    687a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <pinchange_count+0x1>
    687e:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <pinchange_count>
        PCIFR  = (1<<PCI_CLEAR_BIT);		// clear Pin Change Status
    6882:	64 e0       	ldi	r22, 0x04	; 4
    6884:	6b bb       	out	0x1b, r22	; 27
        PCICR  |= (1<<PCI_ENABLE_BIT);		// enable pin change interrupt
    6886:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    688a:	84 60       	ori	r24, 0x04	; 4
    688c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
#endif  /* PROCESSOR_1280 or other */
        sei();
    6890:	78 94       	sei
        PCMSK_FREQ |= (1<<PCINT_FREQ);	// monitor PD4 PCINT20 or PB0 PCINT8 pin change
    6892:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    6896:	80 61       	ori	r24, 0x10	; 16
    6898:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
        for (ii=0;ii<250;ii++) {
    689c:	19 82       	std	Y+1, r1	; 0x01
           wait20ms();
    689e:	0e 94 9c 07 	call	0xf38	; 0xf38 <wait20ms>
           wdt_reset();
    68a2:	a8 95       	wdr
           if (!(RST_PIN_REG & (1<<RST_PIN))) taste = 1;	// user request stop of operation
    68a4:	4f 99       	sbic	0x09, 7	; 9
    68a6:	02 c0       	rjmp	.+4      	; 0x68ac <GetFrequency+0x1a2>
    68a8:	81 e0       	ldi	r24, 0x01	; 1
    68aa:	8d 83       	std	Y+5, r24	; 0x05
           if ((PCMSK_FREQ & (1<<PCINT_FREQ)) == 0) break;		// monitoring is disabled by interrupt
    68ac:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    68b0:	84 ff       	sbrs	r24, 4
    68b2:	05 c0       	rjmp	.+10     	; 0x68be <GetFrequency+0x1b4>
        for (ii=0;ii<250;ii++) {
    68b4:	99 81       	ldd	r25, Y+1	; 0x01
    68b6:	9f 5f       	subi	r25, 0xFF	; 255
    68b8:	99 83       	std	Y+1, r25	; 0x01
    68ba:	9a 3f       	cpi	r25, 0xFA	; 250
    68bc:	81 f7       	brne	.-32     	; 0x689e <GetFrequency+0x194>
#if PROCESSOR_TYP == 1280
        TCCR3B = 0;		// stop counter 3
        PCMSK_FREQ &= ~(1<<PCINT_FREQ); // disable int6
        ext_freq.w[0] = TCNT3;		// add lower 16 bit to get total counts
#else
        TCCR0B = 0;		// stop counter 0
    68be:	15 bc       	out	0x25, r1	; 37
        PCMSK_FREQ &= ~(1<<PCINT_FREQ);		// stop monitor PD4 PCINT20 or PB0 PCINT8 pin change
    68c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    68c4:	8f 7e       	andi	r24, 0xEF	; 239
    68c6:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
        PCICR &= ~(1<<PCI_ENABLE_BIT);	// disable the interrupt
    68ca:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    68ce:	8b 7f       	andi	r24, 0xFB	; 251
    68d0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
        ext_freq.b[0] = TCNT0;		// add lower 8 bit to get total counts
    68d4:	86 b5       	in	r24, 0x26	; 38
    68d6:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <ext_freq>
//        wait50ms();		// let LCD flicker to 
//	---------------------------------------
//	Show the result from period measurement
//	---------------------------------------
 #if (LCD_LINES > 3)
        lcd_line3();		// use line3 to report the period with 4-line LCD
    68da:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
 #else
        lcd_line2();		// report period on line 2 of 2-line LCD
 #endif
        lcd_data('T');
    68de:	84 e5       	ldi	r24, 0x54	; 84
    68e0:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
        lcd_equal();		// lcd_data('=');
    68e4:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
        ext_period = ((unsigned long long)ext_freq.dw * (200000/MHZ_CPU)) / pinchange_max;
    68e8:	a0 91 50 01 	lds	r26, 0x0150	; 0x800150 <pinchange_max>
    68ec:	b0 91 51 01 	lds	r27, 0x0151	; 0x800151 <pinchange_max+0x1>
    68f0:	b8 87       	std	Y+8, r27	; 0x08
    68f2:	af 83       	std	Y+7, r26	; 0x07
    68f4:	60 91 54 01 	lds	r22, 0x0154	; 0x800154 <ext_freq>
    68f8:	70 91 55 01 	lds	r23, 0x0155	; 0x800155 <ext_freq+0x1>
    68fc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <ext_freq+0x2>
    6900:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <ext_freq+0x3>
    6904:	24 ed       	ldi	r18, 0xD4	; 212
    6906:	30 e3       	ldi	r19, 0x30	; 48
    6908:	40 e0       	ldi	r20, 0x00	; 0
    690a:	50 e0       	ldi	r21, 0x00	; 0
    690c:	0e 94 4e 3d 	call	0x7a9c	; 0x7a9c <__umulsidi3>
    6910:	ef 81       	ldd	r30, Y+7	; 0x07
    6912:	f8 85       	ldd	r31, Y+8	; 0x08
    6914:	61 2c       	mov	r6, r1
    6916:	71 2c       	mov	r7, r1
    6918:	43 01       	movw	r8, r6
    691a:	5f 01       	movw	r10, r30
    691c:	c1 2c       	mov	r12, r1
    691e:	d1 2c       	mov	r13, r1
    6920:	e1 2c       	mov	r14, r1
    6922:	f1 2c       	mov	r15, r1
    6924:	00 e0       	ldi	r16, 0x00	; 0
    6926:	10 e0       	ldi	r17, 0x00	; 0
    6928:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivdi3>
    692c:	49 01       	movw	r8, r18
    692e:	4a 87       	std	Y+10, r20	; 0x0a
    6930:	59 87       	std	Y+9, r21	; 0x09
    6932:	1b 01       	movw	r2, r22
    6934:	2c 01       	movw	r4, r24
        }
 #endif
 #if (PROCESSOR_TYP != 644) && defined(WITH_FREQUENCY_DIVIDER)
        ext_period /= freq_factor;
 #endif
        if (pinchange_max > 127) {
    6936:	8f 81       	ldd	r24, Y+7	; 0x07
    6938:	98 85       	ldd	r25, Y+8	; 0x08
    693a:	80 38       	cpi	r24, 0x80	; 128
    693c:	91 05       	cpc	r25, r1
    693e:	20 f1       	brcs	.+72     	; 0x6988 <GetFrequency+0x27e>
           DisplayValue(ext_period,-11,'s',7);	// show period converted to 0.01ns units
    6940:	07 e0       	ldi	r16, 0x07	; 7
    6942:	23 e7       	ldi	r18, 0x73	; 115
    6944:	45 ef       	ldi	r20, 0xF5	; 245
    6946:	b4 01       	movw	r22, r8
    6948:	8a 85       	ldd	r24, Y+10	; 0x0a
    694a:	95 2f       	mov	r25, r21
        } else {
           //prevent overflow of 32-Bit
           DisplayValue((unsigned long)(ext_period/100),-9,'s',7);	// show period converted to 1ns units
    694c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
        }
//	---------------------------------------
        if (ii == 250) {
    6950:	99 81       	ldd	r25, Y+1	; 0x01
    6952:	9a 3f       	cpi	r25, 0xFA	; 250
    6954:	79 f5       	brne	.+94     	; 0x69b4 <GetFrequency+0x2aa>
           lcd_data('?');		// wait loop has regular finished
    6956:	8f e3       	ldi	r24, 0x3F	; 63
    6958:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
           FDIV_PORT &= ~(1<<FDIV_PIN);			// switch off the 16:1 divider
        }
     }
 #endif
//     taste += wait_for_key_ms(SHORT_WAIT_TIME/2);
     TIMSK0 = 0;		// disable all timer 0 interrupts
    695c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
     taste += wait_for_key_ms(2000);
    6960:	80 ed       	ldi	r24, 0xD0	; 208
    6962:	97 e0       	ldi	r25, 0x07	; 7
    6964:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
    6968:	ed 81       	ldd	r30, Y+5	; 0x05
    696a:	8e 0f       	add	r24, r30
 #ifdef WITH_ROTARY_SWITCH
     if ((taste != 0) || (rotary.incre > 2)) break;
    696c:	49 f4       	brne	.+18     	; 0x6980 <GetFrequency+0x276>
    696e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    6972:	83 30       	cpi	r24, 0x03	; 3
    6974:	28 f4       	brcc	.+10     	; 0x6980 <GetFrequency+0x276>
  for (mm=0;mm<240;mm++) {
    6976:	fe 81       	ldd	r31, Y+6	; 0x06
    6978:	f1 50       	subi	r31, 0x01	; 1
    697a:	fe 83       	std	Y+6, r31	; 0x06
    697c:	f1 11       	cpse	r31, r1
    697e:	d0 ce       	rjmp	.-608    	; 0x6720 <GetFrequency+0x16>
     if (taste != 0) break;
 #endif
  }  /* end for mm  */
 
  return;
 } // end GetFrequency()
    6980:	2a 96       	adiw	r28, 0x0a	; 10
    6982:	e2 e1       	ldi	r30, 0x12	; 18
    6984:	0c 94 ef 3d 	jmp	0x7bde	; 0x7bde <__epilogue_restores__>
           DisplayValue((unsigned long)(ext_period/100),-9,'s',7);	// show period converted to 1ns units
    6988:	84 e6       	ldi	r24, 0x64	; 100
    698a:	a8 2e       	mov	r10, r24
    698c:	b1 2c       	mov	r11, r1
    698e:	c1 2c       	mov	r12, r1
    6990:	d1 2c       	mov	r13, r1
    6992:	e1 2c       	mov	r14, r1
    6994:	f1 2c       	mov	r15, r1
    6996:	00 e0       	ldi	r16, 0x00	; 0
    6998:	10 e0       	ldi	r17, 0x00	; 0
    699a:	94 01       	movw	r18, r8
    699c:	4a 85       	ldd	r20, Y+10	; 0x0a
    699e:	59 85       	ldd	r21, Y+9	; 0x09
    69a0:	b1 01       	movw	r22, r2
    69a2:	c2 01       	movw	r24, r4
    69a4:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivdi3>
    69a8:	b9 01       	movw	r22, r18
    69aa:	ca 01       	movw	r24, r20
    69ac:	07 e0       	ldi	r16, 0x07	; 7
    69ae:	23 e7       	ldi	r18, 0x73	; 115
    69b0:	47 ef       	ldi	r20, 0xF7	; 247
    69b2:	cc cf       	rjmp	.-104    	; 0x694c <GetFrequency+0x242>
           if (ext_period > 46566) {
    69b4:	94 01       	movw	r18, r8
    69b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    69b8:	59 85       	ldd	r21, Y+9	; 0x09
    69ba:	b1 01       	movw	r22, r2
    69bc:	c2 01       	movw	r24, r4
    69be:	26 3e       	cpi	r18, 0xE6	; 230
    69c0:	35 4b       	sbci	r19, 0xB5	; 181
    69c2:	41 05       	cpc	r20, r1
    69c4:	51 05       	cpc	r21, r1
    69c6:	61 05       	cpc	r22, r1
    69c8:	71 05       	cpc	r23, r1
    69ca:	81 05       	cpc	r24, r1
    69cc:	91 05       	cpc	r25, r1
    69ce:	31 f2       	breq	.-116    	; 0x695c <GetFrequency+0x252>
    69d0:	28 f2       	brcs	.-118    	; 0x695c <GetFrequency+0x252>
              lcd_line4();		// use line 4 of 4-line LCD to report the computed frequency
    69d2:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <lcd_line4>
              lcd_data('f');
    69d6:	86 e6       	ldi	r24, 0x66	; 102
    69d8:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
              lcd_equal();		// lcd_data('=');
    69dc:	0e 94 a8 06 	call	0xd50	; 0xd50 <lcd_equal>
              if (ext_period > 1000000000) {
    69e0:	94 01       	movw	r18, r8
    69e2:	4a 85       	ldd	r20, Y+10	; 0x0a
    69e4:	59 85       	ldd	r21, Y+9	; 0x09
    69e6:	b1 01       	movw	r22, r2
    69e8:	c2 01       	movw	r24, r4
                 freq_from_per = (unsigned long long)(100000000000000000) / ext_period;
    69ea:	54 01       	movw	r10, r8
              if (ext_period > 1000000000) {
    69ec:	21 15       	cp	r18, r1
    69ee:	ba ec       	ldi	r27, 0xCA	; 202
    69f0:	3b 07       	cpc	r19, r27
    69f2:	ba e9       	ldi	r27, 0x9A	; 154
    69f4:	4b 07       	cpc	r20, r27
    69f6:	bb e3       	ldi	r27, 0x3B	; 59
    69f8:	5b 07       	cpc	r21, r27
    69fa:	61 05       	cpc	r22, r1
    69fc:	71 05       	cpc	r23, r1
    69fe:	81 05       	cpc	r24, r1
    6a00:	91 05       	cpc	r25, r1
    6a02:	d1 f0       	breq	.+52     	; 0x6a38 <GetFrequency+0x32e>
    6a04:	c8 f0       	brcs	.+50     	; 0x6a38 <GetFrequency+0x32e>
                 freq_from_per = (unsigned long long)(100000000000000000) / ext_period;
    6a06:	6a 01       	movw	r12, r20
    6a08:	71 01       	movw	r14, r2
    6a0a:	82 01       	movw	r16, r4
    6a0c:	20 e0       	ldi	r18, 0x00	; 0
    6a0e:	30 e0       	ldi	r19, 0x00	; 0
    6a10:	4a e8       	ldi	r20, 0x8A	; 138
    6a12:	5d e5       	ldi	r21, 0x5D	; 93
    6a14:	68 e7       	ldi	r22, 0x78	; 120
    6a16:	75 e4       	ldi	r23, 0x45	; 69
    6a18:	83 e6       	ldi	r24, 0x63	; 99
    6a1a:	91 e0       	ldi	r25, 0x01	; 1
    6a1c:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivdi3>
    6a20:	b9 01       	movw	r22, r18
    6a22:	ca 01       	movw	r24, r20
                 DisplayValue(freq_from_per,-6,'H',7);  // display with  0.000001 Hz resolution
    6a24:	07 e0       	ldi	r16, 0x07	; 7
    6a26:	28 e4       	ldi	r18, 0x48	; 72
    6a28:	4a ef       	ldi	r20, 0xFA	; 250
                 DisplayValue(freq_from_per,-3,'H',7);  // display with  0.001 Hz resolution
    6a2a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DisplayValue>
              lcd_data('z');
    6a2e:	8a e7       	ldi	r24, 0x7A	; 122
    6a30:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
              FREQINP_DDR &= ~(1<<FREQINP_PIN);	// switch frequency pin to input
    6a34:	54 98       	cbi	0x0a, 4	; 10
    6a36:	92 cf       	rjmp	.-220    	; 0x695c <GetFrequency+0x252>
                 freq_from_per = (unsigned long long)(100000000000000) / ext_period;
    6a38:	ca 84       	ldd	r12, Y+10	; 0x0a
    6a3a:	d9 84       	ldd	r13, Y+9	; 0x09
    6a3c:	71 01       	movw	r14, r2
    6a3e:	82 01       	movw	r16, r4
    6a40:	20 e0       	ldi	r18, 0x00	; 0
    6a42:	30 e4       	ldi	r19, 0x40	; 64
    6a44:	4a e7       	ldi	r20, 0x7A	; 122
    6a46:	50 e1       	ldi	r21, 0x10	; 16
    6a48:	63 ef       	ldi	r22, 0xF3	; 243
    6a4a:	7a e5       	ldi	r23, 0x5A	; 90
    6a4c:	80 e0       	ldi	r24, 0x00	; 0
    6a4e:	90 e0       	ldi	r25, 0x00	; 0
    6a50:	0e 94 77 3d 	call	0x7aee	; 0x7aee <__udivdi3>
    6a54:	b9 01       	movw	r22, r18
    6a56:	ca 01       	movw	r24, r20
                 DisplayValue(freq_from_per,-3,'H',7);  // display with  0.001 Hz resolution
    6a58:	07 e0       	ldi	r16, 0x07	; 7
    6a5a:	28 e4       	ldi	r18, 0x48	; 72
    6a5c:	4d ef       	ldi	r20, 0xFD	; 253
    6a5e:	e5 cf       	rjmp	.-54     	; 0x6a2a <GetFrequency+0x320>

00006a60 <__vector_16>:
/* timer 0 Overflow interrupt                                   */
/* timer 0 count up to 0xff, then OV occur. update upper part   */
/* to build the total counts within one second or               */
/* to build the total counts within the specified pin changes.  */
/* ************************************************************ */
ISR(TIMER0_OVF_vect, ISR_BLOCK) {
    6a60:	8f 93       	push	r24
    6a62:	8f b7       	in	r24, 0x3f	; 63
    6a64:	8f 93       	push	r24
    6a66:	9f 93       	push	r25
    6a68:	af 93       	push	r26
    6a6a:	bf 93       	push	r27
  sei();		// set interrupt enable
    6a6c:	78 94       	sei
  ext_freq.dw += 256;	// add 256 clock tics to the total time
    6a6e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <ext_freq>
    6a72:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <ext_freq+0x1>
    6a76:	a0 91 56 01 	lds	r26, 0x0156	; 0x800156 <ext_freq+0x2>
    6a7a:	b0 91 57 01 	lds	r27, 0x0157	; 0x800157 <ext_freq+0x3>
    6a7e:	9f 5f       	subi	r25, 0xFF	; 255
    6a80:	af 4f       	sbci	r26, 0xFF	; 255
    6a82:	bf 4f       	sbci	r27, 0xFF	; 255
    6a84:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <ext_freq>
    6a88:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <ext_freq+0x1>
    6a8c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <ext_freq+0x2>
    6a90:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <ext_freq+0x3>
}
    6a94:	bf 91       	pop	r27
    6a96:	af 91       	pop	r26
    6a98:	9f 91       	pop	r25
    6a9a:	8f 91       	pop	r24
    6a9c:	8f bf       	out	0x3f, r24	; 63
    6a9e:	8f 91       	pop	r24
    6aa0:	18 95       	reti

00006aa2 <__vector_11>:
/* ************************************************************ */
/* Timer 1 Compare A interrupts with count 1 to start counter 0 */
/* This is defined as start of the measurement second.          */
/* ************************************************************ */
// this handler is also used by SamplingADC.S, where simply any dummy interrupt handler is usable; but if timing of this handler changes, need to adapt SamplingADC.S as well
ISR(TIMER1_COMPA_vect, ISR_BLOCK) {
    6aa2:	8f 93       	push	r24
#if PROCESSOR_TYP == 1280
  TCCR3B = (1<<CS32) | (1<<CS31) | (0<<CS30);	// start the counter 3 with external input T3
#else
  TCCR0B = (1<<CS02) | (1<<CS01) | (0<<CS00);	// now start the counter 0 with external input T0
    6aa4:	86 e0       	ldi	r24, 0x06	; 6
    6aa6:	85 bd       	out	0x25, r24	; 37
#endif
}
    6aa8:	8f 91       	pop	r24
    6aaa:	18 95       	reti

00006aac <__vector_12>:

#ifdef WITH_MENU
/* ************************************************************ */
/* Timer 1 Compare B interrupt after 1 second to stop counter 0 */
/* ************************************************************ */
ISR(TIMER1_COMPB_vect, ISR_BLOCK) {
    6aac:	1f 92       	push	r1
    6aae:	1f b6       	in	r1, 0x3f	; 63
    6ab0:	1f 92       	push	r1
    6ab2:	11 24       	eor	r1, r1
  // The TIMER1_COMPB_vect uses one push and one ldi more than this interrupt.
  // Therefore we stop timer 1 first and ajust to same time with wdt_reset();
  wdt_reset();			// for adjusting to same time as TIMER1_COMPB_vect
    6ab4:	a8 95       	wdr
  TCCR1B = 0;			// stop counter 1
    6ab6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
#if PROCESSOR_TYP == 1280
  TCCR3B = 0;			// stop counter 3
#else
  TCCR0B = 0;			// stop counter 0
    6aba:	15 bc       	out	0x25, r1	; 37
#endif
}
    6abc:	1f 90       	pop	r1
    6abe:	1f be       	out	0x3f, r1	; 63
    6ac0:	1f 90       	pop	r1
    6ac2:	18 95       	reti

00006ac4 <__vector_5>:
/* full periods  (no half period)				*/
/* ************************************************************ */


ISR(PCINTx_vect, ISR_BLOCK)
{
    6ac4:	1f 92       	push	r1
    6ac6:	1f b6       	in	r1, 0x3f	; 63
    6ac8:	1f 92       	push	r1
    6aca:	11 24       	eor	r1, r1
    6acc:	2f 93       	push	r18
    6ace:	3f 93       	push	r19
    6ad0:	8f 93       	push	r24
    6ad2:	9f 93       	push	r25
  if (pinchange_count == 0) {
    6ad4:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <pinchange_count>
    6ad8:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <pinchange_count+0x1>
    6adc:	89 2b       	or	r24, r25
    6ade:	11 f4       	brne	.+4      	; 0x6ae4 <__vector_5+0x20>
#if PROCESSOR_TYP == 1280
     TCCR3B = (1<<CS30);	// start the counter 3 with full CPU clock
#else
     TCCR0B = (1<<CS00);	// start the counter 0 with full CPU clock
    6ae0:	81 e0       	ldi	r24, 0x01	; 1
    6ae2:	85 bd       	out	0x25, r24	; 37
#endif
  }
  if (pinchange_count >= pinchange_max) {
    6ae4:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <pinchange_count>
    6ae8:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <pinchange_count+0x1>
    6aec:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <pinchange_max>
    6af0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <pinchange_max+0x1>
    6af4:	28 17       	cp	r18, r24
    6af6:	39 07       	cpc	r19, r25
    6af8:	30 f0       	brcs	.+12     	; 0x6b06 <__vector_5+0x42>
     // stop the counter 3, when maximum value has reached.
     TCCR3B = 0;		// stop counter 3
     PCMSK_FREQ &= ~(1<<PCINT_FREQ);	// disable int6
#else
     // stop the counter 0, when maximum value has reached.
     TCCR0B = 0;		// stop counter 0
    6afa:	15 bc       	out	0x25, r1	; 37
     PCMSK_FREQ &= ~(1<<PCINT_FREQ);	// disable monitoring of PD4 PCINT20 or PB0 PCINT8 pin change
    6afc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
    6b00:	8f 7e       	andi	r24, 0xEF	; 239
    6b02:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7e006d>
#endif
//     PCICR &= ~(1<<PCI_ENABLE_BIT);	// disable the interrupt
  }
  pinchange_count++;
    6b06:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <pinchange_count>
    6b0a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <pinchange_count+0x1>
    6b0e:	01 96       	adiw	r24, 0x01	; 1
    6b10:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <pinchange_count+0x1>
    6b14:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <pinchange_count>
}
    6b18:	9f 91       	pop	r25
    6b1a:	8f 91       	pop	r24
    6b1c:	3f 91       	pop	r19
    6b1e:	2f 91       	pop	r18
    6b20:	1f 90       	pop	r1
    6b22:	1f be       	out	0x3f, r1	; 63
    6b24:	1f 90       	pop	r1
    6b26:	18 95       	reti

00006b28 <ReadBigCap>:
#include "Transistortester.h"


#ifdef WITH_MENU
//=================================================================
void ReadBigCap(uint8_t HighPin, uint8_t LowPin) {
    6b28:	a5 e0       	ldi	r26, 0x05	; 5
    6b2a:	b0 e0       	ldi	r27, 0x00	; 0
    6b2c:	ea e9       	ldi	r30, 0x9A	; 154
    6b2e:	f5 e3       	ldi	r31, 0x35	; 53
    6b30:	0c 94 da 3d 	jmp	0x7bb4	; 0x7bb4 <__prologue_saves__+0xe>
    6b34:	18 2f       	mov	r17, r24
    6b36:	06 2f       	mov	r16, r22
//#endif

#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+LowPin-TP_MIN) | TXD_MSK;
#else
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin-TP_MIN) | TXD_MSK;
    6b38:	26 2f       	mov	r18, r22
    6b3a:	30 e0       	ldi	r19, 0x00	; 0
    6b3c:	f9 01       	movw	r30, r18
    6b3e:	ec 5b       	subi	r30, 0xBC	; 188
    6b40:	fd 4f       	sbci	r31, 0xFD	; 253
    6b42:	f4 90       	lpm	r15, Z
#endif
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin-TP_MIN]);	//R_L mask for HighPin R_L load
    6b44:	e8 2f       	mov	r30, r24
    6b46:	f0 e0       	ldi	r31, 0x00	; 0
    6b48:	ef 5b       	subi	r30, 0xBF	; 191
    6b4a:	fd 4f       	sbci	r31, 0xFD	; 253
    6b4c:	44 91       	lpm	r20, Z
    6b4e:	49 83       	std	Y+1, r20	; 0x01
  LoPinR_L = pgm_read_byte(&PinRLRHADCtab[LowPin-TP_MIN]);	//R_L mask for LowPin R_L load
    6b50:	f9 01       	movw	r30, r18
    6b52:	ef 5b       	subi	r30, 0xBF	; 191
    6b54:	fd 4f       	sbci	r31, 0xFD	; 253
    6b56:	84 91       	lpm	r24, Z
    6b58:	8d 83       	std	Y+5, r24	; 0x05

#if FLASHEND > 0x1fff
  cap.esr = 0;				// set ESR of capacitor to zero
    6b5a:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cap+0xd>
    6b5e:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cap+0xc>
#endif
  cap.cval = 0;				// set capacity value to zero
    6b62:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <cap>
    6b66:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <cap+0x1>
    6b6a:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <cap+0x2>
    6b6e:	10 92 3f 01 	sts	0x013F, r1	; 0x80013f <cap+0x3>
  cap.cpre = -9;			//default unit is nF
    6b72:	87 ef       	ldi	r24, 0xF7	; 247
    6b74:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <cap+0x12>
  EntladePins();			// discharge capacitor
    6b78:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>
  ADC_PORT = TXD_VAL;			// switch ADC-Port to GND
    6b7c:	18 b8       	out	0x08, r1	; 8
// The polarity of residual voltage of the capacitor depends on the measurement
// history.   Because the ADC can not measure a negative Voltage,
// the LowPin voltage is shifted to 139mV with the R_L resistor.
// The voltage of the capacitor is build as difference between HighPin and LowPin voltage.
  ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    6b7e:	f7 b8       	out	0x07, r15	; 7
  R_DDR = LoPinR_L;			// switch R_L Port of LoPin to VCC
    6b80:	9d 81       	ldd	r25, Y+5	; 0x05
    6b82:	94 b9       	out	0x04, r25	; 4
  R_PORT = LoPinR_L;			// switch R_L Port of LoPin to VCC
    6b84:	95 b9       	out	0x05, r25	; 5
  residual_voltage = ReadADC(HighPin) - ReadADC(LowPin);	// capacitor voltage before any load 
    6b86:	81 2f       	mov	r24, r17
    6b88:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    6b8c:	5c 01       	movw	r10, r24
    6b8e:	80 2f       	mov	r24, r16
    6b90:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
  R_DDR = 0;				// switch all R_L Port to input
    6b94:	14 b8       	out	0x04, r1	; 4
  cap_voltage1 = 0;			// preset to prevent compiler warning
  
  ovcnt16 = 0;
    6b96:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <ovcnt16+0x1>
    6b9a:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <ovcnt16>
  cap_voltage1 = 0;			// preset to prevent compiler warning
    6b9e:	30 e0       	ldi	r19, 0x00	; 0
    6ba0:	20 e0       	ldi	r18, 0x00	; 0
#define MAX_LOAD_TIME 12500
#define MIN_VOLTAGE 300
  while (ovcnt16 < MAX_LOAD_TIME) {
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
     if ((ovcnt16 == 0) || ((MIN_VOLTAGE-cap_voltage1) < (cap_voltage1*10/ovcnt16))) {
    6ba2:	5c e2       	ldi	r21, 0x2C	; 44
    6ba4:	c5 2e       	mov	r12, r21
    6ba6:	dd 24       	eor	r13, r13
    6ba8:	d3 94       	inc	r13
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
        wait200us();			// wait exactly 0.2ms, do not sleep
        R_DDR = 0;			// switch back to input
        ovcnt16++;
     } else if ((ovcnt16 > 10) && ((MIN_VOLTAGE-cap_voltage1) > ((cap_voltage1*100)/ovcnt16))){
    6baa:	64 e6       	ldi	r22, 0x64	; 100
    6bac:	96 2e       	mov	r9, r22
     }
     R_PORT = 0;			// no Pull up
     wait50us();			//wait a little time
     wdt_reset();
     // read voltage without current, is already charged enough?
     cap_voltage1 = ReadADC(HighPin) - residual_voltage;	// voltage loaded to capacitor
    6bae:	7c 01       	movw	r14, r24
    6bb0:	ea 18       	sub	r14, r10
    6bb2:	fb 08       	sbc	r15, r11
  while (ovcnt16 < MAX_LOAD_TIME) {
    6bb4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6bb8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6bbc:	84 3d       	cpi	r24, 0xD4	; 212
    6bbe:	90 43       	sbci	r25, 0x30	; 48
    6bc0:	40 f0       	brcs	.+16     	; 0x6bd2 <ReadBigCap+0xaa>
keinC:
  // discharge capacitor again
//  EntladePins();		// discharge capacitors
  //ready
  // switch all ports to input
  ADC_DDR =  TXD_MSK;		// switch all ADC ports to input
    6bc2:	17 b8       	out	0x07, r1	; 7
  ADC_PORT = TXD_VAL;		// switch all ADC outputs to GND, no pull up
    6bc4:	18 b8       	out	0x08, r1	; 8
  R_DDR = 0;			// switch all resistor ports to input
    6bc6:	14 b8       	out	0x04, r1	; 4
  R_PORT = 0; 			// switch all resistor outputs to GND, no pull up
    6bc8:	15 b8       	out	0x05, r1	; 5
  return;
 } // end ReadBigCap()
    6bca:	25 96       	adiw	r28, 0x05	; 5
    6bcc:	eb e0       	ldi	r30, 0x0B	; 11
    6bce:	0c 94 f6 3d 	jmp	0x7bec	; 0x7bec <__epilogue_restores__+0xe>
     R_PORT = HiPinR_L;			//R_L to 1 (VCC) 
    6bd2:	a9 81       	ldd	r26, Y+1	; 0x01
    6bd4:	a5 b9       	out	0x05, r26	; 5
     if ((ovcnt16 == 0) || ((MIN_VOLTAGE-cap_voltage1) < (cap_voltage1*10/ovcnt16))) {
    6bd6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6bda:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6bde:	89 2b       	or	r24, r25
    6be0:	91 f0       	breq	.+36     	; 0x6c06 <ReadBigCap+0xde>
    6be2:	f6 01       	movw	r30, r12
    6be4:	e2 1b       	sub	r30, r18
    6be6:	f3 0b       	sbc	r31, r19
    6be8:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ovcnt16>
    6bec:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ovcnt16+0x1>
    6bf0:	ba e0       	ldi	r27, 0x0A	; 10
    6bf2:	b2 9f       	mul	r27, r18
    6bf4:	c0 01       	movw	r24, r0
    6bf6:	b3 9f       	mul	r27, r19
    6bf8:	90 0d       	add	r25, r0
    6bfa:	11 24       	eor	r1, r1
    6bfc:	c5 d6       	rcall	.+3466   	; 0x7988 <__udivmodhi4>
    6bfe:	e6 17       	cp	r30, r22
    6c00:	f7 07       	cpc	r31, r23
    6c02:	08 f0       	brcs	.+2      	; 0x6c06 <ReadBigCap+0xde>
    6c04:	a1 c0       	rjmp	.+322    	; 0x6d48 <ReadBigCap+0x220>
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
    6c06:	49 81       	ldd	r20, Y+1	; 0x01
    6c08:	44 b9       	out	0x04, r20	; 4
        wait200us();			// wait exactly 0.2ms, do not sleep
    6c0a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <wait200us>
        R_DDR = 0;			// switch back to input
    6c0e:	14 b8       	out	0x04, r1	; 4
        ovcnt16++;
    6c10:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6c14:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6c18:	01 96       	adiw	r24, 0x01	; 1
        ovcnt16 += 10;
    6c1a:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <ovcnt16+0x1>
    6c1e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <ovcnt16>
     R_PORT = 0;			// no Pull up
    6c22:	15 b8       	out	0x05, r1	; 5
     wait50us();			//wait a little time
    6c24:	0e 94 a9 07 	call	0xf52	; 0xf52 <wait50us>
     wdt_reset();
    6c28:	a8 95       	wdr
     cap_voltage1 = ReadADC(HighPin) - residual_voltage;	// voltage loaded to capacitor
    6c2a:	81 2f       	mov	r24, r17
    6c2c:	0e 94 ed 07 	call	0xfda	; 0xfda <ReadADC>
    6c30:	97 01       	movw	r18, r14
    6c32:	28 0f       	add	r18, r24
    6c34:	39 1f       	adc	r19, r25
     if ((ovcnt16 > (MAX_LOAD_TIME/8)) && (cap_voltage1 < (MIN_VOLTAGE/8))) {
    6c36:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6c3a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6c3e:	8b 31       	cpi	r24, 0x1B	; 27
    6c40:	96 40       	sbci	r25, 0x06	; 6
    6c42:	20 f0       	brcs	.+8      	; 0x6c4c <ReadBigCap+0x124>
    6c44:	25 32       	cpi	r18, 0x25	; 37
    6c46:	31 05       	cpc	r19, r1
    6c48:	0c f4       	brge	.+2      	; 0x6c4c <ReadBigCap+0x124>
    6c4a:	bb cf       	rjmp	.-138    	; 0x6bc2 <ReadBigCap+0x9a>
     if (cap_voltage1 > MIN_VOLTAGE) {
    6c4c:	2d 32       	cpi	r18, 0x2D	; 45
    6c4e:	b1 e0       	ldi	r27, 0x01	; 1
    6c50:	3b 07       	cpc	r19, r27
    6c52:	0c f4       	brge	.+2      	; 0x6c56 <ReadBigCap+0x12e>
    6c54:	af cf       	rjmp	.-162    	; 0x6bb4 <ReadBigCap+0x8c>
  if ((ovcnt16 == 1 ) && (cap_voltage1 > 1300)) {
    6c56:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6c5a:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6c5e:	01 97       	sbiw	r24, 0x01	; 1
    6c60:	29 f4       	brne	.+10     	; 0x6c6c <ReadBigCap+0x144>
    6c62:	25 31       	cpi	r18, 0x15	; 21
    6c64:	85 e0       	ldi	r24, 0x05	; 5
    6c66:	38 07       	cpc	r19, r24
    6c68:	0c f0       	brlt	.+2      	; 0x6c6c <ReadBigCap+0x144>
    6c6a:	ab cf       	rjmp	.-170    	; 0x6bc2 <ReadBigCap+0x9a>
  cap.cval_uncorrected.dw = ovcnt16*2;
    6c6c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6c70:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6c74:	88 0f       	add	r24, r24
    6c76:	99 1f       	adc	r25, r25
    6c78:	b0 e0       	ldi	r27, 0x00	; 0
    6c7a:	a0 e0       	ldi	r26, 0x00	; 0
    6c7c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <cap+0x8>
    6c80:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <cap+0x9>
    6c84:	a0 93 46 01 	sts	0x0146, r26	; 0x800146 <cap+0xa>
    6c88:	b0 93 47 01 	sts	0x0147, r27	; 0x800147 <cap+0xb>
  cap.cval_uncorrected.dw *= GetRLmultip(cap_voltage1 + cap_voltage1/40);	// get factor to convert time to capacity from table
    6c8c:	c9 01       	movw	r24, r18
    6c8e:	68 e2       	ldi	r22, 0x28	; 40
    6c90:	70 e0       	ldi	r23, 0x00	; 0
    6c92:	8e d6       	rcall	.+3356   	; 0x79b0 <__divmodhi4>
    6c94:	cb 01       	movw	r24, r22
    6c96:	82 0f       	add	r24, r18
    6c98:	93 1f       	adc	r25, r19
    6c9a:	0e 94 b7 08 	call	0x116e	; 0x116e <GetRLmultip>
    6c9e:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <cap+0x8>
    6ca2:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <cap+0x9>
    6ca6:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <cap+0xa>
    6caa:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <cap+0xb>
    6cae:	dc 01       	movw	r26, r24
    6cb0:	e5 d6       	rcall	.+3530   	; 0x7a7c <__muluhisi3>
    6cb2:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <cap>
    6cb6:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <cap+0x1>
    6cba:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <cap+0x2>
    6cbe:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <cap+0x3>
    6cc2:	60 93 44 01 	sts	0x0144, r22	; 0x800144 <cap+0x8>
    6cc6:	70 93 45 01 	sts	0x0145, r23	; 0x800145 <cap+0x9>
    6cca:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <cap+0xa>
    6cce:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <cap+0xb>
   Scale_C_with_vcc();
    6cd2:	0e 94 99 25 	call	0x4b32	; 0x4b32 <Scale_C_with_vcc>
   cap.cval *= (1000 - (int8_t)eeprom_read_byte((uint8_t *)&big_cap_corr));	// correct with actual big_cap_korr at 0.1% resolution
    6cd6:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <cap>
    6cda:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <cap+0x1>
    6cde:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <cap+0x2>
    6ce2:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <cap+0x3>
    6ce6:	8b e1       	ldi	r24, 0x1B	; 27
    6ce8:	93 e0       	ldi	r25, 0x03	; 3
    6cea:	f0 d7       	rcall	.+4064   	; 0x7ccc <eeprom_read_byte>
    6cec:	a8 ee       	ldi	r26, 0xE8	; 232
    6cee:	b3 e0       	ldi	r27, 0x03	; 3
    6cf0:	a8 1b       	sub	r26, r24
    6cf2:	b1 09       	sbc	r27, r1
    6cf4:	87 fd       	sbrc	r24, 7
    6cf6:	b3 95       	inc	r27
    6cf8:	a7 01       	movw	r20, r14
    6cfa:	96 01       	movw	r18, r12
    6cfc:	c9 d6       	rcall	.+3474   	; 0x7a90 <__mulshisi3>
   cap.cval /= 10000;
    6cfe:	20 e1       	ldi	r18, 0x10	; 16
    6d00:	37 e2       	ldi	r19, 0x27	; 39
    6d02:	40 e0       	ldi	r20, 0x00	; 0
    6d04:	50 e0       	ldi	r21, 0x00	; 0
    6d06:	67 d6       	rcall	.+3278   	; 0x79d6 <__udivmodsi4>
    6d08:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <cap>
    6d0c:	30 93 3d 01 	sts	0x013D, r19	; 0x80013d <cap+0x1>
    6d10:	40 93 3e 01 	sts	0x013E, r20	; 0x80013e <cap+0x2>
    6d14:	50 93 3f 01 	sts	0x013F, r21	; 0x80013f <cap+0x3>
   PartFound = PART_CAPACITOR;	//capacitor is found
    6d18:	88 e0       	ldi	r24, 0x08	; 8
    6d1a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <PartFound>
      cap.cval_max = cap.cval;
    6d1e:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <cap+0x4>
    6d22:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <cap+0x5>
    6d26:	40 93 42 01 	sts	0x0142, r20	; 0x800142 <cap+0x6>
    6d2a:	50 93 43 01 	sts	0x0143, r21	; 0x800143 <cap+0x7>
      cap.cpre_max = cap.cpre;
    6d2e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <cap+0x12>
    6d32:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <cap+0x13>
      cap.v_loss = 0;			// set lost voltage to zero
    6d36:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cap+0xf>
    6d3a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <cap+0xe>
      cap.ca = LowPin;		// save LowPin
    6d3e:	00 93 4c 01 	sts	0x014C, r16	; 0x80014c <cap+0x10>
      cap.cb = HighPin;		// save HighPin
    6d42:	10 93 4d 01 	sts	0x014D, r17	; 0x80014d <cap+0x11>
    6d46:	3d cf       	rjmp	.-390    	; 0x6bc2 <ReadBigCap+0x9a>
     } else if ((ovcnt16 > 10) && ((MIN_VOLTAGE-cap_voltage1) > ((cap_voltage1*100)/ovcnt16))){
    6d48:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6d4c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6d50:	0b 97       	sbiw	r24, 0x0b	; 11
    6d52:	c8 f0       	brcs	.+50     	; 0x6d86 <ReadBigCap+0x25e>
    6d54:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <ovcnt16>
    6d58:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <ovcnt16+0x1>
    6d5c:	92 9e       	mul	r9, r18
    6d5e:	c0 01       	movw	r24, r0
    6d60:	93 9e       	mul	r9, r19
    6d62:	90 0d       	add	r25, r0
    6d64:	11 24       	eor	r1, r1
    6d66:	10 d6       	rcall	.+3104   	; 0x7988 <__udivmodhi4>
    6d68:	6e 17       	cp	r22, r30
    6d6a:	7f 07       	cpc	r23, r31
    6d6c:	60 f4       	brcc	.+24     	; 0x6d86 <ReadBigCap+0x25e>
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
    6d6e:	89 81       	ldd	r24, Y+1	; 0x01
    6d70:	84 b9       	out	0x04, r24	; 4
        wait20ms();			// wait exactly 20ms, do not sleep
    6d72:	0e 94 9c 07 	call	0xf38	; 0xf38 <wait20ms>
        R_DDR = 0;			// switch back to input
    6d76:	14 b8       	out	0x04, r1	; 4
        ovcnt16 += 100;
    6d78:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6d7c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6d80:	8c 59       	subi	r24, 0x9C	; 156
    6d82:	9f 4f       	sbci	r25, 0xFF	; 255
    6d84:	4a cf       	rjmp	.-364    	; 0x6c1a <ReadBigCap+0xf2>
        R_DDR = HiPinR_L;		//switch Pin to output, across R to VCC
    6d86:	99 81       	ldd	r25, Y+1	; 0x01
    6d88:	94 b9       	out	0x04, r25	; 4
        wait2ms();			// wait exactly 2ms, do not sleep
    6d8a:	0e 94 a2 07 	call	0xf44	; 0xf44 <wait2ms>
        R_DDR = 0;			// switch back to input
    6d8e:	14 b8       	out	0x04, r1	; 4
        ovcnt16 += 10;
    6d90:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <ovcnt16>
    6d94:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <ovcnt16+0x1>
    6d98:	0a 96       	adiw	r24, 0x0a	; 10
    6d9a:	3f cf       	rjmp	.-386    	; 0x6c1a <ReadBigCap+0xf2>

00006d9c <ShowData>:
#include "Transistortester.h"
/*  ShowData shows the Software version number and */
/*  the calibration data at the 2-line or 4-line LCD */
#ifdef WITH_MENU
void ShowData(void) {
    6d9c:	b0 e0       	ldi	r27, 0x00	; 0
    6d9e:	a0 e0       	ldi	r26, 0x00	; 0
    6da0:	e3 ed       	ldi	r30, 0xD3	; 211
    6da2:	f6 e3       	ldi	r31, 0x36	; 54
    6da4:	0b c7       	rjmp	.+3606   	; 0x7bbc <__prologue_saves__+0x16>
  uint8_t ii,jj,kk;
#endif
#ifdef WITH_ROTARY_SWITCH
show_page_1:
#endif
  lcd_clear();
    6da6:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
  lcd_MEM_string(VERSION_str);	// "Version x.xxk"
    6daa:	85 ef       	ldi	r24, 0xF5	; 245
    6dac:	90 e0       	ldi	r25, 0x00	; 0
    6dae:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  lcd_line2();
    6db2:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
  lcd_MEM2_string(R0_str);	// "R0="
    6db6:	81 eb       	ldi	r24, 0xB1	; 177
    6db8:	90 e0       	ldi	r25, 0x00	; 0
    6dba:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  DisplayValue16(eeprom_read_byte(&EE_ESR_ZEROtab[2]),-2,' ',3);
    6dbe:	89 e1       	ldi	r24, 0x19	; 25
    6dc0:	93 e0       	ldi	r25, 0x03	; 3
    6dc2:	84 d7       	rcall	.+3848   	; 0x7ccc <eeprom_read_byte>
    6dc4:	23 e0       	ldi	r18, 0x03	; 3
    6dc6:	40 e2       	ldi	r20, 0x20	; 32
    6dc8:	6e ef       	ldi	r22, 0xFE	; 254
    6dca:	90 e0       	ldi	r25, 0x00	; 0
    6dcc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
  DisplayValue16(eeprom_read_byte(&EE_ESR_ZEROtab[3]),-2,' ',3);
    6dd0:	8a e1       	ldi	r24, 0x1A	; 26
    6dd2:	93 e0       	ldi	r25, 0x03	; 3
    6dd4:	7b d7       	rcall	.+3830   	; 0x7ccc <eeprom_read_byte>
    6dd6:	23 e0       	ldi	r18, 0x03	; 3
    6dd8:	40 e2       	ldi	r20, 0x20	; 32
    6dda:	6e ef       	ldi	r22, 0xFE	; 254
    6ddc:	90 e0       	ldi	r25, 0x00	; 0
    6dde:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
  DisplayValue16(eeprom_read_byte(&EE_ESR_ZEROtab[1]),-2,LCD_CHAR_OMEGA,3);
    6de2:	88 e1       	ldi	r24, 0x18	; 24
    6de4:	93 e0       	ldi	r25, 0x03	; 3
    6de6:	72 d7       	rcall	.+3812   	; 0x7ccc <eeprom_read_byte>
    6de8:	23 e0       	ldi	r18, 0x03	; 3
    6dea:	4d e1       	ldi	r20, 0x1D	; 29
    6dec:	6e ef       	ldi	r22, 0xFE	; 254
    6dee:	90 e0       	ldi	r25, 0x00	; 0
    6df0:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
#if (LCD_LINES > 3)
  lcd_line3();
    6df4:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
show_page_2:
 #endif
  lcd_clear();
#endif
  /* output line 3 */
  lcd_MEM_string(RIHI_str); // "RiHi="
    6df8:	8a ea       	ldi	r24, 0xAA	; 170
    6dfa:	90 e0       	ldi	r25, 0x00	; 0
    6dfc:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  DisplayValue16(RRpinPL,-1,LCD_CHAR_OMEGA,3);
    6e00:	23 e0       	ldi	r18, 0x03	; 3
    6e02:	4d e1       	ldi	r20, 0x1D	; 29
    6e04:	6f ef       	ldi	r22, 0xFF	; 255
    6e06:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <pin_rpl>
    6e0a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <pin_rpl+0x1>
    6e0e:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
#if (LCD_LINES > 3)
  lcd_line4();
    6e12:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <lcd_line4>
#else
  lcd_line2();
#endif
  /* output line 4 */
  lcd_MEM_string(RILO_str); // "RiLo="
    6e16:	83 ea       	ldi	r24, 0xA3	; 163
    6e18:	90 e0       	ldi	r25, 0x00	; 0
    6e1a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  DisplayValue16(RRpinMI,-1,LCD_CHAR_OMEGA,3);
    6e1e:	23 e0       	ldi	r18, 0x03	; 3
    6e20:	4d e1       	ldi	r20, 0x1D	; 29
    6e22:	6f ef       	ldi	r22, 0xFF	; 255
    6e24:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pin_rmi>
    6e28:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <pin_rmi+0x1>
    6e2c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>

  wait_for_key_ms(MIDDLE_WAIT_TIME);
    6e30:	88 e9       	ldi	r24, 0x98	; 152
    6e32:	9a e3       	ldi	r25, 0x3A	; 58
    6e34:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
#ifdef WITH_ROTARY_SWITCH
  if (rotary.incre > FAST_ROTATION) return;	// fast rotation ends the function
    6e38:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    6e3c:	8b 30       	cpi	r24, 0x0B	; 11
    6e3e:	08 f0       	brcs	.+2      	; 0x6e42 <ShowData+0xa6>
    6e40:	b9 c0       	rjmp	.+370    	; 0x6fb4 <ShowData+0x218>
 #if (LCD_LINES > 3)
  if (rotary.count < 0) goto show_page_1;
    6e42:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    6e46:	87 fd       	sbrc	r24, 7
    6e48:	ae cf       	rjmp	.-164    	; 0x6da6 <ShowData+0xa>
#endif
#ifdef AUTO_CAL
 #ifdef WITH_ROTARY_SWITCH
show_page_3:
 #endif
  lcd_clear();
    6e4a:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
  lcd_MEM_string(C0_str);                       //output "C0 "
    6e4e:	8f e9       	ldi	r24, 0x9F	; 159
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  u2lcd_space(eeprom_read_byte(&c_zero_tab[5]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 1:3
    6e56:	8d e3       	ldi	r24, 0x3D	; 61
    6e58:	93 e0       	ldi	r25, 0x03	; 3
    6e5a:	38 d7       	rcall	.+3696   	; 0x7ccc <eeprom_read_byte>
    6e5c:	82 51       	subi	r24, 0x12	; 18
    6e5e:	99 0b       	sbc	r25, r25
    6e60:	0e 94 a3 06 	call	0xd46	; 0xd46 <u2lcd_space>
  u2lcd_space(eeprom_read_byte(&c_zero_tab[6]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 2:3
    6e64:	8e e3       	ldi	r24, 0x3E	; 62
    6e66:	93 e0       	ldi	r25, 0x03	; 3
    6e68:	31 d7       	rcall	.+3682   	; 0x7ccc <eeprom_read_byte>
    6e6a:	82 51       	subi	r24, 0x12	; 18
    6e6c:	99 0b       	sbc	r25, r25
    6e6e:	0e 94 a3 06 	call	0xd46	; 0xd46 <u2lcd_space>
  DisplayValue16(eeprom_read_byte(&c_zero_tab[2]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)) ,-12,'F',3);		//output cap0 1:2
    6e72:	8a e3       	ldi	r24, 0x3A	; 58
    6e74:	93 e0       	ldi	r25, 0x03	; 3
    6e76:	2a d7       	rcall	.+3668   	; 0x7ccc <eeprom_read_byte>
    6e78:	23 e0       	ldi	r18, 0x03	; 3
    6e7a:	46 e4       	ldi	r20, 0x46	; 70
    6e7c:	64 ef       	ldi	r22, 0xF4	; 244
    6e7e:	82 51       	subi	r24, 0x12	; 18
    6e80:	99 0b       	sbc	r25, r25
    6e82:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
  lcd_line2();
    6e86:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
  lcd_spaces(3);
    6e8a:	83 e0       	ldi	r24, 0x03	; 3
    6e8c:	0e 94 be 0a 	call	0x157c	; 0x157c <lcd_spaces>
  u2lcd_space(eeprom_read_byte(&c_zero_tab[1]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 3:1
    6e90:	89 e3       	ldi	r24, 0x39	; 57
    6e92:	93 e0       	ldi	r25, 0x03	; 3
    6e94:	1b d7       	rcall	.+3638   	; 0x7ccc <eeprom_read_byte>
    6e96:	82 51       	subi	r24, 0x12	; 18
    6e98:	99 0b       	sbc	r25, r25
    6e9a:	0e 94 a3 06 	call	0xd46	; 0xd46 <u2lcd_space>
  u2lcd_space(eeprom_read_byte(&c_zero_tab[4]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)));		//output cap0 3:2
    6e9e:	8c e3       	ldi	r24, 0x3C	; 60
    6ea0:	93 e0       	ldi	r25, 0x03	; 3
    6ea2:	14 d7       	rcall	.+3624   	; 0x7ccc <eeprom_read_byte>
    6ea4:	82 51       	subi	r24, 0x12	; 18
    6ea6:	99 0b       	sbc	r25, r25
    6ea8:	0e 94 a3 06 	call	0xd46	; 0xd46 <u2lcd_space>
  DisplayValue16(eeprom_read_byte(&c_zero_tab[0]) -(COMP_SLEW1 / (CC0 + CABLE_CAP + COMP_SLEW2)) ,-12,'F',3);		//output cap0 2:1
    6eac:	88 e3       	ldi	r24, 0x38	; 56
    6eae:	93 e0       	ldi	r25, 0x03	; 3
    6eb0:	0d d7       	rcall	.+3610   	; 0x7ccc <eeprom_read_byte>
    6eb2:	23 e0       	ldi	r18, 0x03	; 3
    6eb4:	46 e4       	ldi	r20, 0x46	; 70
    6eb6:	64 ef       	ldi	r22, 0xF4	; 244
    6eb8:	82 51       	subi	r24, 0x12	; 18
    6eba:	99 0b       	sbc	r25, r25
    6ebc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
#if (LCD_LINES > 3)
  lcd_line3();
    6ec0:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <lcd_line3>
show_page_4:
 #endif
  lcd_clear();
#endif
  /* output line 7 */
  lcd_MEM2_string(REF_C_str);	// "REF_C="
    6ec4:	8d e1       	ldi	r24, 0x1D	; 29
    6ec6:	90 e0       	ldi	r25, 0x00	; 0
    6ec8:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  i2lcd((int16_t)eeprom_read_word((uint16_t *)(&ref_offset)));
    6ecc:	8f e3       	ldi	r24, 0x3F	; 63
    6ece:	93 e0       	ldi	r25, 0x03	; 3
    6ed0:	05 d7       	rcall	.+3594   	; 0x7cdc <eeprom_read_word>
    6ed2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
#if (LCD_LINES > 3)
  lcd_line4();
    6ed6:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <lcd_line4>
#else
  lcd_line2();
#endif
  /* output line 8 */
  lcd_MEM2_string(REF_R_str);  // "REF_R="
    6eda:	86 e1       	ldi	r24, 0x16	; 22
    6edc:	90 e0       	ldi	r25, 0x00	; 0
    6ede:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
  i2lcd((int8_t)eeprom_read_byte((uint8_t *)(&RefDiff)));
    6ee2:	81 e4       	ldi	r24, 0x41	; 65
    6ee4:	93 e0       	ldi	r25, 0x03	; 3
    6ee6:	f2 d6       	rcall	.+3556   	; 0x7ccc <eeprom_read_byte>
    6ee8:	08 2e       	mov	r0, r24
    6eea:	00 0c       	add	r0, r0
    6eec:	99 0b       	sbc	r25, r25
    6eee:	0e 94 8e 06 	call	0xd1c	; 0xd1c <i2lcd>
#ifdef SamplingADC
 #ifdef WITH_ROTARY_SWITCH
show_page_5:
 #endif
  /* modified output from sampling_cap_calibrate */
  lcd_set_cursor((LCD_LINES-1)*PAGES_PER_LINE,0);      // set for initial clear screen
    6ef2:	60 e0       	ldi	r22, 0x00	; 0
    6ef4:	8e e0       	ldi	r24, 0x0E	; 14
    6ef6:	0e 94 c7 0a 	call	0x158e	; 0x158e <lcd_set_cursor>
  for (ii=0;ii<=2;ii++)
    6efa:	c0 e0       	ldi	r28, 0x00	; 0
    for (jj=0;jj<=2;jj++)
    6efc:	fc 2e       	mov	r15, r28
    6efe:	ff 0c       	add	r15, r15
    6f00:	fc 0e       	add	r15, r28
    6f02:	d0 e0       	ldi	r29, 0x00	; 0
       if (ii != jj) {
    6f04:	fa 94       	dec	r15
    6f06:	cd 17       	cp	r28, r29
    6f08:	09 f4       	brne	.+2      	; 0x6f0c <ShowData+0x170>
          kk = (ii * 3) + jj - 1;
          cc = eeprom_read_word((void *)(c_zero_tab2_lo+kk));
    6f0a:	46 c0       	rjmp	.+140    	; 0x6f98 <ShowData+0x1fc>
    6f0c:	0f 2d       	mov	r16, r15
    6f0e:	0d 0f       	add	r16, r29
    6f10:	10 e0       	ldi	r17, 0x00	; 0
    6f12:	00 0f       	add	r16, r16
    6f14:	11 1f       	adc	r17, r17
    6f16:	c8 01       	movw	r24, r16
    6f18:	86 5d       	subi	r24, 0xD6	; 214
    6f1a:	9c 4f       	sbci	r25, 0xFC	; 252
    6f1c:	df d6       	rcall	.+3518   	; 0x7cdc <eeprom_read_word>
    6f1e:	d8 2e       	mov	r13, r24
          dd = eeprom_read_word((void *)(c_zero_tab2_hi+kk));
    6f20:	e9 2e       	mov	r14, r25
    6f22:	c8 01       	movw	r24, r16
    6f24:	84 5e       	subi	r24, 0xE4	; 228
    6f26:	9c 4f       	sbci	r25, 0xFC	; 252
    6f28:	d9 d6       	rcall	.+3506   	; 0x7cdc <eeprom_read_word>
    6f2a:	8c 01       	movw	r16, r24
          if (lcd_text_line > (LCD_LINES - 2)) {
    6f2c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd_text_line>
    6f30:	87 30       	cpi	r24, 0x07	; 7
    6f32:	08 f4       	brcc	.+2      	; 0x6f36 <ShowData+0x19a>
    6f34:	43 c0       	rjmp	.+134    	; 0x6fbc <ShowData+0x220>
             wait_for_key_ms(MIDDLE_WAIT_TIME);
    6f36:	88 e9       	ldi	r24, 0x98	; 152
    6f38:	9a e3       	ldi	r25, 0x3A	; 58
    6f3a:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
 #ifdef WITH_ROTARY_SWITCH
             if (rotary.incre > FAST_ROTATION) return;	// fast rotation ends the function
    6f3e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <rotary+0x6>
    6f42:	8b 30       	cpi	r24, 0x0B	; 11
    6f44:	b8 f5       	brcc	.+110    	; 0x6fb4 <ShowData+0x218>
  #if (LCD_LINES > 3)
             if (rotary.count < -2) goto show_page_1;	// page_2 is shown together with _page_1
    6f46:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <rotary+0x5>
    6f4a:	8e 3f       	cpi	r24, 0xFE	; 254
    6f4c:	0c f4       	brge	.+2      	; 0x6f50 <ShowData+0x1b4>
    6f4e:	2b cf       	rjmp	.-426    	; 0x6da6 <ShowData+0xa>
             if (rotary.count < -1) goto show_page_3;	// page_4 is shown together with _page 3
    6f50:	8e 3f       	cpi	r24, 0xFE	; 254
    6f52:	09 f4       	brne	.+2      	; 0x6f56 <ShowData+0x1ba>
    6f54:	7a cf       	rjmp	.-268    	; 0x6e4a <ShowData+0xae>
             if (rotary.count < 0) goto show_page_5;
    6f56:	8f 3f       	cpi	r24, 0xFF	; 255
    6f58:	61 f2       	breq	.-104    	; 0x6ef2 <ShowData+0x156>
             if (rotary.count < -2) goto show_page_3;
             if (rotary.count < -1) goto show_page_4;
             if (rotary.count < 0) goto show_page_5;
  #endif
 #endif  /* WITH_ROTARY_SWITCH */
             lcd_clear();
    6f5a:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
          } else {  
	     lcd_next_line(0);
          }
          lcd_MEM_string(C0samp_str);	// "C0samp "
    6f5e:	87 e9       	ldi	r24, 0x97	; 151
    6f60:	90 e0       	ldi	r25, 0x00	; 0
    6f62:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
	  lcd_testpin(ii);
    6f66:	8c 2f       	mov	r24, r28
    6f68:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
	  lcd_data(':');
    6f6c:	8a e3       	ldi	r24, 0x3A	; 58
    6f6e:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
          lcd_testpin(jj);
    6f72:	8d 2f       	mov	r24, r29
    6f74:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
	  lcd_next_line(0);
    6f78:	80 e0       	ldi	r24, 0x00	; 0
    6f7a:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
	  DisplayValue16(cc,-2,' ',3);
    6f7e:	23 e0       	ldi	r18, 0x03	; 3
    6f80:	40 e2       	ldi	r20, 0x20	; 32
    6f82:	6e ef       	ldi	r22, 0xFE	; 254
    6f84:	8d 2d       	mov	r24, r13
    6f86:	9e 2d       	mov	r25, r14
    6f88:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
	  DisplayValue16(dd,-12-2,'F',3);
    6f8c:	23 e0       	ldi	r18, 0x03	; 3
    6f8e:	46 e4       	ldi	r20, 0x46	; 70
    6f90:	62 ef       	ldi	r22, 0xF2	; 242
    6f92:	c8 01       	movw	r24, r16
    6f94:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
    for (jj=0;jj<=2;jj++)
    6f98:	df 5f       	subi	r29, 0xFF	; 255
    6f9a:	d3 30       	cpi	r29, 0x03	; 3
    6f9c:	09 f0       	breq	.+2      	; 0x6fa0 <ShowData+0x204>
  for (ii=0;ii<=2;ii++)
    6f9e:	b3 cf       	rjmp	.-154    	; 0x6f06 <ShowData+0x16a>
    6fa0:	cf 5f       	subi	r28, 0xFF	; 255
    6fa2:	c3 30       	cpi	r28, 0x03	; 3
    6fa4:	09 f0       	breq	.+2      	; 0x6fa8 <ShowData+0x20c>
 #endif

#endif  /* SamplingADC */
#endif /* defined AUTO_CAL */

  wait_for_key_ms(MIDDLE_WAIT_TIME);
    6fa6:	aa cf       	rjmp	.-172    	; 0x6efc <ShowData+0x160>
    6fa8:	88 e9       	ldi	r24, 0x98	; 152
    6faa:	9a e3       	ldi	r25, 0x3A	; 58
    6fac:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <wait_for_key_ms>
//#if  defined(WITH_GRAPHICS) && !defined(SamplingADC)
#ifdef SHOW_ICONS
 ShowIcons();		// show all Icons
    6fb0:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <ShowIcons>
#endif
}
    6fb4:	cd b7       	in	r28, 0x3d	; 61
    6fb6:	de b7       	in	r29, 0x3e	; 62
    6fb8:	e7 e0       	ldi	r30, 0x07	; 7
    6fba:	1c c6       	rjmp	.+3128   	; 0x7bf4 <__epilogue_restores__+0x16>
	     lcd_next_line(0);
    6fbc:	80 e0       	ldi	r24, 0x00	; 0
    6fbe:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <lcd_next_line>
    6fc2:	cd cf       	rjmp	.-102    	; 0x6f5e <ShowData+0x1c2>

00006fc4 <mylog>:



// calculate -32768*ln(1-y/32768)
static unsigned int mylog(unsigned int y)
{
    6fc4:	cf 92       	push	r12
    6fc6:	df 92       	push	r13
    6fc8:	ef 92       	push	r14
    6fca:	ff 92       	push	r15
    6fcc:	cf 93       	push	r28
    6fce:	df 93       	push	r29
    6fd0:	cd b7       	in	r28, 0x3d	; 61
    6fd2:	de b7       	in	r29, 0x3e	; 62
    6fd4:	28 97       	sbiw	r28, 0x08	; 8
    6fd6:	0f b6       	in	r0, 0x3f	; 63
    6fd8:	f8 94       	cli
    6fda:	de bf       	out	0x3e, r29	; 62
    6fdc:	0f be       	out	0x3f, r0	; 63
    6fde:	cd bf       	out	0x3d, r28	; 61
    6fe0:	ac 01       	movw	r20, r24
   unsigned long int a,b;
   b=y;
    6fe2:	b0 e0       	ldi	r27, 0x00	; 0
    6fe4:	a0 e0       	ldi	r26, 0x00	; 0
    6fe6:	8d 83       	std	Y+5, r24	; 0x05
    6fe8:	9e 83       	std	Y+6, r25	; 0x06
    6fea:	af 83       	std	Y+7, r26	; 0x07
    6fec:	b8 87       	std	Y+8, r27	; 0x08

   // newer version: uses one more term for better accuracy (0.2% instead of 1% in the test mentioned above)
   // only 30 bytes longer than the 1% version
   unsigned short int bb;
   b=y;
   a = (b<<16);
    6fee:	7c 01       	movw	r14, r24
    6ff0:	dd 24       	eor	r13, r13
    6ff2:	cc 24       	eor	r12, r12
   a += b* (y+(y>>4)+(y>>8));
    6ff4:	e9 2f       	mov	r30, r25
    6ff6:	ff 27       	eor	r31, r31
   b = b*y;
    6ff8:	9c 01       	movw	r18, r24
    6ffa:	dc 01       	movw	r26, r24
    6ffc:	2a d5       	rcall	.+2644   	; 0x7a52 <__umulhisi3>
    6ffe:	69 83       	std	Y+1, r22	; 0x01
    7000:	7a 83       	std	Y+2, r23	; 0x02
    7002:	8b 83       	std	Y+3, r24	; 0x03
    7004:	9c 83       	std	Y+4, r25	; 0x04
   bb = b>>16;
   bb>>=2;                                     // not integrated in previous line because then compiler does an 18-position shift of a 32-bit variable :-(
   unsigned short bb2=bb>>2;                   // without this intermediate variable, compiler does some of >> multiple times
   a += y * (unsigned long int) (bb - bb2);
   bb = (bb2>>1)*(y>>8);            
    7006:	9c 01       	movw	r18, r24
    7008:	65 e0       	ldi	r22, 0x05	; 5
    700a:	36 95       	lsr	r19
    700c:	27 95       	ror	r18
    700e:	6a 95       	dec	r22
    7010:	e1 f7       	brne	.-8      	; 0x700a <mylog+0x46>
    7012:	e2 9f       	mul	r30, r18
    7014:	c0 01       	movw	r24, r0
    7016:	e3 9f       	mul	r30, r19
    7018:	90 0d       	add	r25, r0
    701a:	f2 9f       	mul	r31, r18
    701c:	90 0d       	add	r25, r0
    701e:	11 24       	eor	r1, r1
   a += b* (y+(y>>4)+(y>>8));
    7020:	ba 01       	movw	r22, r20
    7022:	a4 e0       	ldi	r26, 0x04	; 4
    7024:	76 95       	lsr	r23
    7026:	67 95       	ror	r22
    7028:	aa 95       	dec	r26
    702a:	e1 f7       	brne	.-8      	; 0x7024 <mylog+0x60>
    702c:	6e 0f       	add	r22, r30
    702e:	7f 1f       	adc	r23, r31
    7030:	64 0f       	add	r22, r20
    7032:	75 1f       	adc	r23, r21
   bb>>=2;                                     // not integrated in previous line because then compiler does an 18-position shift of a 32-bit variable :-(
    7034:	2b 81       	ldd	r18, Y+3	; 0x03
    7036:	3c 81       	ldd	r19, Y+4	; 0x04
    7038:	36 95       	lsr	r19
    703a:	27 95       	ror	r18
    703c:	36 95       	lsr	r19
    703e:	27 95       	ror	r18
   unsigned short bb2=bb>>2;                   // without this intermediate variable, compiler does some of >> multiple times
    7040:	4b 81       	ldd	r20, Y+3	; 0x03
    7042:	5c 81       	ldd	r21, Y+4	; 0x04
    7044:	e4 e0       	ldi	r30, 0x04	; 4
    7046:	56 95       	lsr	r21
    7048:	47 95       	ror	r20
    704a:	ea 95       	dec	r30
    704c:	e1 f7       	brne	.-8      	; 0x7046 <mylog+0x82>
   a += y * (unsigned long int) (bb - bb2);
    704e:	24 1b       	sub	r18, r20
    7050:	35 0b       	sbc	r19, r21
    7052:	50 e0       	ldi	r21, 0x00	; 0
    7054:	40 e0       	ldi	r20, 0x00	; 0
   a += y * (unsigned long int)(bb - (bb>>3));
    7056:	26 0f       	add	r18, r22
    7058:	37 1f       	adc	r19, r23
    705a:	41 1d       	adc	r20, r1
    705c:	51 1d       	adc	r21, r1
    705e:	bc 01       	movw	r22, r24
    7060:	f3 e0       	ldi	r31, 0x03	; 3
    7062:	76 95       	lsr	r23
    7064:	67 95       	ror	r22
    7066:	fa 95       	dec	r31
    7068:	e1 f7       	brne	.-8      	; 0x7062 <mylog+0x9e>
    706a:	86 1b       	sub	r24, r22
    706c:	97 0b       	sbc	r25, r23
    706e:	28 0f       	add	r18, r24
    7070:	39 1f       	adc	r19, r25
    7072:	41 1d       	adc	r20, r1
    7074:	51 1d       	adc	r21, r1
    7076:	6d 81       	ldd	r22, Y+5	; 0x05
    7078:	7e 81       	ldd	r23, Y+6	; 0x06
    707a:	8f 81       	ldd	r24, Y+7	; 0x07
    707c:	98 85       	ldd	r25, Y+8	; 0x08
    707e:	69 d4       	rcall	.+2258   	; 0x7952 <__mulsi3>
    7080:	6c 0d       	add	r22, r12
    7082:	7d 1d       	adc	r23, r13
    7084:	8e 1d       	adc	r24, r14
    7086:	9f 1d       	adc	r25, r15
   return a>>16;
} /* end mylog */
    7088:	28 96       	adiw	r28, 0x08	; 8
    708a:	0f b6       	in	r0, 0x3f	; 63
    708c:	f8 94       	cli
    708e:	de bf       	out	0x3e, r29	; 62
    7090:	0f be       	out	0x3f, r0	; 63
    7092:	cd bf       	out	0x3d, r28	; 61
    7094:	df 91       	pop	r29
    7096:	cf 91       	pop	r28
    7098:	ff 90       	pop	r15
    709a:	ef 90       	pop	r14
    709c:	df 90       	pop	r13
    709e:	cf 90       	pop	r12
    70a0:	08 95       	ret

000070a2 <sampling_cap>:


int32_t sampling_cap(byte HighPin, byte LowPin, byte opts)
{
    70a2:	4f 92       	push	r4
    70a4:	5f 92       	push	r5
    70a6:	6f 92       	push	r6
    70a8:	7f 92       	push	r7
    70aa:	9f 92       	push	r9
    70ac:	af 92       	push	r10
    70ae:	bf 92       	push	r11
    70b0:	cf 92       	push	r12
    70b2:	df 92       	push	r13
    70b4:	ef 92       	push	r14
    70b6:	ff 92       	push	r15
    70b8:	0f 93       	push	r16
    70ba:	1f 93       	push	r17
    70bc:	cf 93       	push	r28
    70be:	df 93       	push	r29
    70c0:	cd b7       	in	r28, 0x3d	; 61
    70c2:	de b7       	in	r29, 0x3e	; 62
    70c4:	c8 50       	subi	r28, 0x08	; 8
    70c6:	d2 40       	sbci	r29, 0x02	; 2
    70c8:	0f b6       	in	r0, 0x3f	; 63
    70ca:	f8 94       	cli
    70cc:	de bf       	out	0x3e, r29	; 62
    70ce:	0f be       	out	0x3f, r0	; 63
    70d0:	cd bf       	out	0x3d, r28	; 61
    70d2:	a8 2e       	mov	r10, r24
    70d4:	16 2f       	mov	r17, r22
    70d6:	94 2e       	mov	r9, r20
  EntladePins();
    70d8:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <EntladePins>

  uint8_t HiPinR_L, HiPinR_H;
  uint8_t LoADC;
  uint16_t samp_opt;
  HiPinR_L = pgm_read_byte(&PinRLRHADCtab[HighPin]);	//R_L mask for HighPin R_L load
    70dc:	ea 2d       	mov	r30, r10
    70de:	f0 e0       	ldi	r31, 0x00	; 0
    70e0:	ef 5b       	subi	r30, 0xBF	; 191
    70e2:	fd 4f       	sbci	r31, 0xFD	; 253
    70e4:	74 90       	lpm	r7, Z
#if (((PIN_RL1 + 1) != PIN_RH1) || ((PIN_RL2 + 1) != PIN_RH2) || ((PIN_RL3 + 1) != PIN_RH3))
  HiPinR_H = pgm_read_byte((&PinRLRHADCtab[3])+HighPin);	//R_H mask for HighPin R_H load
  LoADC = pgm_read_byte((&PinRLRHADCtab[6])+LowPin) | TXD_MSK;
#else
  HiPinR_H = HiPinR_L + HiPinR_L;	//double for HighPin R_H load
    70e6:	67 2c       	mov	r6, r7
    70e8:	66 0c       	add	r6, r6
  LoADC = pgm_read_byte((&PinRLRHADCtab[3])+LowPin) | TXD_MSK;
    70ea:	e1 2f       	mov	r30, r17
    70ec:	f0 e0       	ldi	r31, 0x00	; 0
    70ee:	ec 5b       	subi	r30, 0xBC	; 188
    70f0:	fd 4f       	sbci	r31, 0xFD	; 253
    70f2:	e4 91       	lpm	r30, Z
#endif

   byte i=0;

   unsigned int uu[256];
   ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    70f4:	e7 b9       	out	0x07, r30	; 7
   R_PORT = 0;			//R_L to 0 (GND) 
    70f6:	15 b8       	out	0x05, r1	; 5
   R_DDR = HiPinR_L;			
    70f8:	74 b8       	out	0x04, r7	; 4
//   wait200us();			// let the last ADC cycle finish

   ADMUX = HighPin|(1<<REFS0);	// switch Multiplexer to Highpin and use 5V reference voltage
    70fa:	8a 2d       	mov	r24, r10
    70fc:	80 64       	ori	r24, 0x40	; 64
    70fe:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
#ifdef NO_AREF_CAP
    wait100us(); /* time for voltage stabilization */
    7102:	0e 94 a8 07 	call	0xf50	; 0xf50 <wait100us>
#ifdef SamplingADC_CNT
   samp_opt = 1;		// sample distance 1
#else
   samp_opt = 0;
#endif
   byte d=( (opts&1) ? HiPinR_L : HiPinR_H );
    7106:	29 2d       	mov	r18, r9
    7108:	21 70       	andi	r18, 0x01	; 1
    710a:	b2 2e       	mov	r11, r18
    710c:	d6 2c       	mov	r13, r6
    710e:	90 fc       	sbrc	r9, 0
    7110:	d7 2c       	mov	r13, r7
    7112:	f0 e2       	ldi	r31, 0x20	; 32
    7114:	ff 2e       	mov	r15, r31
   samp_opt = 0;
    7116:	80 e0       	ldi	r24, 0x00	; 0
    7118:	90 e0       	ldi	r25, 0x00	; 0

   for (i=0;i<32;i++) {
      samplingADC(samp_opt, uu, N2+1, d, HiPinR_H, d, HiPinR_L);
    711a:	c7 2c       	mov	r12, r7
    711c:	ed 2c       	mov	r14, r13
    711e:	06 2d       	mov	r16, r6
    7120:	2d 2d       	mov	r18, r13
    7122:	47 ee       	ldi	r20, 0xE7	; 231
    7124:	be 01       	movw	r22, r28
    7126:	6f 5f       	subi	r22, 0xFF	; 255
    7128:	7f 4f       	sbci	r23, 0xFF	; 255
    712a:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>
   for (i=0;i<32;i++) {
    712e:	fa 94       	dec	r15
      samp_opt |= samplingADC_cumul;
    7130:	80 e4       	ldi	r24, 0x40	; 64
    7132:	90 e0       	ldi	r25, 0x00	; 0
   for (i=0;i<32;i++) {
    7134:	f1 10       	cpse	r15, r1
    7136:	f1 cf       	rjmp	.-30     	; 0x711a <sampling_cap+0x78>
   }
//   uart_newline(); for (i=0;i<N2;i++) { myuart_putc('a'); myuart_putc(' '); uart_int(uu[i]); uart_newline(); wdt_reset(); }

   R_DDR = 0;			
    7138:	14 b8       	out	0x04, r1	; 4
#endif

   // we use the least-squares algorithm to find the slope
   // cf. e.g. https://en.wikipedia.org/wiki/Ordinary_least_squares
   unsigned long sumy, sumxy;
   sumy=sumxy=0;
    713a:	41 2c       	mov	r4, r1
    713c:	51 2c       	mov	r5, r1
    713e:	32 01       	movw	r6, r4
    7140:	cf 5f       	subi	r28, 0xFF	; 255
    7142:	dd 4f       	sbci	r29, 0xFD	; 253
    7144:	18 82       	st	Y, r1
    7146:	19 82       	std	Y+1, r1	; 0x01
    7148:	1a 82       	std	Y+2, r1	; 0x02
    714a:	1b 82       	std	Y+3, r1	; 0x03
    714c:	c1 50       	subi	r28, 0x01	; 1
    714e:	d2 40       	sbci	r29, 0x02	; 2
   for (i=N1;i<=N2;i++) {	/* 70-230 @16MHz, 35-115 @8MHz */
    7150:	06 e4       	ldi	r16, 0x46	; 70
      if (i==N3) i=N4;		// skip from N3 to (N4-1), 182-192 @16MHz, 200-200 @8MHz
      unsigned int z;
      if (opts&1) z=mylog(32768-uu[i]);
    7152:	c1 2c       	mov	r12, r1
    7154:	e0 e8       	ldi	r30, 0x80	; 128
    7156:	de 2e       	mov	r13, r30
    7158:	e0 2e       	mov	r14, r16
    715a:	f1 2c       	mov	r15, r1
    715c:	f7 01       	movw	r30, r14
    715e:	ee 0f       	add	r30, r30
    7160:	ff 1f       	adc	r31, r31
    7162:	41 e0       	ldi	r20, 0x01	; 1
    7164:	50 e0       	ldi	r21, 0x00	; 0
    7166:	4c 0f       	add	r20, r28
    7168:	5d 1f       	adc	r21, r29
    716a:	e4 0f       	add	r30, r20
    716c:	f5 1f       	adc	r31, r21
    716e:	80 81       	ld	r24, Z
    7170:	91 81       	ldd	r25, Z+1	; 0x01
    7172:	bb 20       	and	r11, r11
    7174:	21 f0       	breq	.+8      	; 0x717e <sampling_cap+0xdc>
    7176:	d6 01       	movw	r26, r12
    7178:	a8 1b       	sub	r26, r24
    717a:	b9 0b       	sbc	r27, r25
    717c:	cd 01       	movw	r24, r26
      else z=mylog(uu[i]);
    717e:	22 df       	rcall	.-444    	; 0x6fc4 <mylog>
    7180:	dc 01       	movw	r26, r24
      sumy+=z;
    7182:	cf 5f       	subi	r28, 0xFF	; 255
    7184:	dd 4f       	sbci	r29, 0xFD	; 253
    7186:	28 81       	ld	r18, Y
    7188:	39 81       	ldd	r19, Y+1	; 0x01
    718a:	4a 81       	ldd	r20, Y+2	; 0x02
    718c:	5b 81       	ldd	r21, Y+3	; 0x03
    718e:	c1 50       	subi	r28, 0x01	; 1
    7190:	d2 40       	sbci	r29, 0x02	; 2
    7192:	28 0f       	add	r18, r24
    7194:	39 1f       	adc	r19, r25
    7196:	41 1d       	adc	r20, r1
    7198:	51 1d       	adc	r21, r1
    719a:	cf 5f       	subi	r28, 0xFF	; 255
    719c:	dd 4f       	sbci	r29, 0xFD	; 253
    719e:	28 83       	st	Y, r18
    71a0:	39 83       	std	Y+1, r19	; 0x01
    71a2:	4a 83       	std	Y+2, r20	; 0x02
    71a4:	5b 83       	std	Y+3, r21	; 0x03
    71a6:	c1 50       	subi	r28, 0x01	; 1
    71a8:	d2 40       	sbci	r29, 0x02	; 2
      sumxy+=(unsigned long int)i*z;
    71aa:	97 01       	movw	r18, r14
    71ac:	52 d4       	rcall	.+2212   	; 0x7a52 <__umulhisi3>
    71ae:	cb 5f       	subi	r28, 0xFB	; 251
    71b0:	dd 4f       	sbci	r29, 0xFD	; 253
    71b2:	68 83       	st	Y, r22
    71b4:	79 83       	std	Y+1, r23	; 0x01
    71b6:	8a 83       	std	Y+2, r24	; 0x02
    71b8:	9b 83       	std	Y+3, r25	; 0x03
    71ba:	c5 50       	subi	r28, 0x05	; 5
    71bc:	d2 40       	sbci	r29, 0x02	; 2
    71be:	46 0e       	add	r4, r22
    71c0:	57 1e       	adc	r5, r23
    71c2:	68 1e       	adc	r6, r24
    71c4:	79 1e       	adc	r7, r25
   for (i=N1;i<=N2;i++) {	/* 70-230 @16MHz, 35-115 @8MHz */
    71c6:	0f 5f       	subi	r16, 0xFF	; 255
    71c8:	07 3e       	cpi	r16, 0xE7	; 231
    71ca:	09 f0       	breq	.+2      	; 0x71ce <sampling_cap+0x12c>
    71cc:	50 c0       	rjmp	.+160    	; 0x726e <sampling_cap+0x1cc>
   // sumy ~ 2^22
   // sumxy ~ 2^30
   // at 8 MHz, we sum roughly half as many sample samples, and x will get only half as big, so sumxy will be about 1/4, and sumxx 1/8
   sumxx -= sumx*sumx/N;
   // now sumxx ~ <2^19 , as it turns out; note that sumxx is a constant, depending only on N and N1..4; it was a variable previously, hence this code
   sumxy -= sumx*(sumy/N);
    71ce:	cf 5f       	subi	r28, 0xFF	; 255
    71d0:	dd 4f       	sbci	r29, 0xFD	; 253
    71d2:	68 81       	ld	r22, Y
    71d4:	79 81       	ldd	r23, Y+1	; 0x01
    71d6:	8a 81       	ldd	r24, Y+2	; 0x02
    71d8:	9b 81       	ldd	r25, Y+3	; 0x03
    71da:	c1 50       	subi	r28, 0x01	; 1
    71dc:	d2 40       	sbci	r29, 0x02	; 2
    71de:	26 e9       	ldi	r18, 0x96	; 150
    71e0:	30 e0       	ldi	r19, 0x00	; 0
    71e2:	40 e0       	ldi	r20, 0x00	; 0
    71e4:	50 e0       	ldi	r21, 0x00	; 0
    71e6:	f7 d3       	rcall	.+2030   	; 0x79d6 <__udivmodsi4>
    71e8:	ad e4       	ldi	r26, 0x4D	; 77
    71ea:	b6 e5       	ldi	r27, 0x56	; 86
    71ec:	47 d4       	rcall	.+2190   	; 0x7a7c <__muluhisi3>
    71ee:	46 1a       	sub	r4, r22
    71f0:	57 0a       	sbc	r5, r23
    71f2:	68 0a       	sbc	r6, r24
    71f4:	79 0a       	sbc	r7, r25
    71f6:	a3 01       	movw	r20, r6
   // at 16 MHz, and aiming for units of 10^{-14} Farad, the constant becomes 32768e14/16e6/R = 2048e8/R
   // for R=470000, this is 435744.68
   // if 8 MHz, we correct for the extra factor 2 in the bitshift of sumxx, so as to not lose bits
#if MHZ_CPU>=16
   sumxx>>=3;   // bitshift such that sumxx fits in 16 bits
   sumxy>>=6;   // we shift sumxy by 3 bits more than sumxx because a few lines down we have an extra /8 to make things fit 
    71f8:	92 01       	movw	r18, r4
    71fa:	66 e0       	ldi	r22, 0x06	; 6
    71fc:	56 95       	lsr	r21
    71fe:	47 95       	ror	r20
    7200:	37 95       	ror	r19
    7202:	27 95       	ror	r18
    7204:	6a 95       	dec	r22
    7206:	d1 f7       	brne	.-12     	; 0x71fc <sampling_cap+0x15a>
    7208:	6c ea       	ldi	r22, 0xAC	; 172
   unsigned long int c3;
#if MHZ_CPU == 20
   // at 20 MHz, and aiming for units of 10^{-14} Farad, the constant becomes 32768e14/20e6/R = 16384e7/R
   c3 = sumxx*((uint32_t)(((16384000000./R_H_VAL)+4)/8))/sumxy;  // units of 0.01 pF
#else
   c3 = sumxx*((uint32_t)(((20480000000./R_H_VAL)+4)/8))/sumxy;  // units of 0.01 pF
    720a:	77 e4       	ldi	r23, 0x47	; 71
    720c:	85 e8       	ldi	r24, 0x85	; 133
    720e:	96 e8       	ldi	r25, 0x86	; 134
    7210:	e2 d3       	rcall	.+1988   	; 0x79d6 <__udivmodsi4>
    7212:	69 01       	movw	r12, r18
    7214:	7a 01       	movw	r14, r20
    7216:	91 fc       	sbrc	r9, 1
#endif
   // the /8 is to make the (...) factor (about 435745) fit in 16 bits
   // note that the /8 is compensated for by the different bitshifts of sumxx and sumxy, and the +4 rounds this number properly
   if (!(opts&2)) 
    7218:	11 c0       	rjmp	.+34     	; 0x723c <sampling_cap+0x19a>
    721a:	8a 2d       	mov	r24, r10
   {
      byte k = ((HighPin - TP_MIN)*3) + LowPin - TP_MIN -1;
    721c:	88 0f       	add	r24, r24
    721e:	8a 0d       	add	r24, r10
    7220:	11 50       	subi	r17, 0x01	; 1
    7222:	81 0f       	add	r24, r17
    7224:	90 e0       	ldi	r25, 0x00	; 0
      if (opts&1) c3-= eeprom_read_word(c_zero_tab2_hi+k);
    7226:	88 0f       	add	r24, r24
    7228:	99 1f       	adc	r25, r25
    722a:	bb 20       	and	r11, r11
    722c:	29 f1       	breq	.+74     	; 0x7278 <sampling_cap+0x1d6>
    722e:	84 5e       	subi	r24, 0xE4	; 228
    7230:	9c 4f       	sbci	r25, 0xFC	; 252
      else c3-= eeprom_read_word(c_zero_tab2_lo+k);
    7232:	54 d5       	rcall	.+2728   	; 0x7cdc <eeprom_read_word>
    7234:	c8 1a       	sub	r12, r24
    7236:	d9 0a       	sbc	r13, r25
    7238:	e1 08       	sbc	r14, r1
    723a:	f1 08       	sbc	r15, r1
    723c:	c7 01       	movw	r24, r14
   }
   return c3;
}  /* end sampling_cap */
    723e:	b6 01       	movw	r22, r12
    7240:	c8 5f       	subi	r28, 0xF8	; 248
    7242:	dd 4f       	sbci	r29, 0xFD	; 253
    7244:	0f b6       	in	r0, 0x3f	; 63
    7246:	f8 94       	cli
    7248:	de bf       	out	0x3e, r29	; 62
    724a:	0f be       	out	0x3f, r0	; 63
    724c:	cd bf       	out	0x3d, r28	; 61
    724e:	df 91       	pop	r29
    7250:	cf 91       	pop	r28
    7252:	1f 91       	pop	r17
    7254:	0f 91       	pop	r16
    7256:	ff 90       	pop	r15
    7258:	ef 90       	pop	r14
    725a:	df 90       	pop	r13
    725c:	cf 90       	pop	r12
    725e:	bf 90       	pop	r11
    7260:	af 90       	pop	r10
    7262:	9f 90       	pop	r9
    7264:	7f 90       	pop	r7
    7266:	6f 90       	pop	r6
    7268:	5f 90       	pop	r5
    726a:	4f 90       	pop	r4
    726c:	08 95       	ret
    726e:	06 3b       	cpi	r16, 0xB6	; 182
      if (i==N3) i=N4;		// skip from N3 to (N4-1), 182-192 @16MHz, 200-200 @8MHz
    7270:	09 f0       	breq	.+2      	; 0x7274 <sampling_cap+0x1d2>
    7272:	72 cf       	rjmp	.-284    	; 0x7158 <sampling_cap+0xb6>
    7274:	01 ec       	ldi	r16, 0xC1	; 193
    7276:	70 cf       	rjmp	.-288    	; 0x7158 <sampling_cap+0xb6>
    7278:	86 5d       	subi	r24, 0xD6	; 214
      else c3-= eeprom_read_word(c_zero_tab2_lo+k);
    727a:	9c 4f       	sbci	r25, 0xFC	; 252
    727c:	da cf       	rjmp	.-76     	; 0x7232 <sampling_cap+0x190>

0000727e <sampling_cap_calibrate>:
    727e:	b0 e0       	ldi	r27, 0x00	; 0




void sampling_cap_calibrate()
{
    7280:	a0 e0       	ldi	r26, 0x00	; 0
    7282:	e4 e4       	ldi	r30, 0x44	; 68
    7284:	f9 e3       	ldi	r31, 0x39	; 57
    7286:	98 c4       	rjmp	.+2352   	; 0x7bb8 <__prologue_saves__+0x12>
   // measure capacitance of all combinations without anything connected
   byte i,j;
   for (i=0;i<=2;i++)
    7288:	c0 e0       	ldi	r28, 0x00	; 0
      for (j=0;j<=2;j++)
    728a:	fc 2e       	mov	r15, r28
    728c:	ff 0c       	add	r15, r15
    728e:	fc 0e       	add	r15, r28
    7290:	d0 e0       	ldi	r29, 0x00	; 0
    7292:	fa 94       	dec	r15
         if (i!=j) {
    7294:	cd 17       	cp	r28, r29
    7296:	09 f4       	brne	.+2      	; 0x729a <sampling_cap_calibrate+0x1c>
    7298:	42 c0       	rjmp	.+132    	; 0x731e <sampling_cap_calibrate+0xa0>
            unsigned int c;
            c=sampling_cap(i,j,2);
    729a:	42 e0       	ldi	r20, 0x02	; 2
    729c:	6d 2f       	mov	r22, r29
    729e:	8c 2f       	mov	r24, r28
    72a0:	00 df       	rcall	.-512    	; 0x70a2 <sampling_cap>
    72a2:	b6 2e       	mov	r11, r22
    72a4:	c7 2e       	mov	r12, r23
#ifdef PULLUP_DISABLE
            unsigned int d;
            d=sampling_cap(i,j,3);
    72a6:	43 e0       	ldi	r20, 0x03	; 3
    72a8:	6d 2f       	mov	r22, r29
    72aa:	8c 2f       	mov	r24, r28
    72ac:	fa de       	rcall	.-524    	; 0x70a2 <sampling_cap>
    72ae:	d6 2e       	mov	r13, r22
    72b0:	e7 2e       	mov	r14, r23
#endif
            lcd_clear();
    72b2:	0e 94 0d 0b 	call	0x161a	; 0x161a <lcd_clear>
            lcd_MEM2_string(C0samp_str);			//output "C0samp "
    72b6:	87 e9       	ldi	r24, 0x97	; 151
    72b8:	90 e0       	ldi	r25, 0x00	; 0
    72ba:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
            lcd_space();				// lcd_data(' ');
    72be:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
            lcd_testpin(i);
    72c2:	8c 2f       	mov	r24, r28
    72c4:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
            lcd_data(':');
    72c8:	8a e3       	ldi	r24, 0x3A	; 58
    72ca:	0e 94 94 0c 	call	0x1928	; 0x1928 <lcd_data>
            lcd_testpin(j);
    72ce:	8d 2f       	mov	r24, r29
    72d0:	0e 94 de 0c 	call	0x19bc	; 0x19bc <lcd_testpin>
            lcd_space();				//lcd_data(' ');
    72d4:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
            lcd_line2();
    72d8:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
            byte k=3*i+j-1;
#ifdef PULLUP_DISABLE
            DisplayValue16(c,-2,' ',4);
    72dc:	24 e0       	ldi	r18, 0x04	; 4
    72de:	40 e2       	ldi	r20, 0x20	; 32
    72e0:	6e ef       	ldi	r22, 0xFE	; 254
    72e2:	8b 2d       	mov	r24, r11
    72e4:	9c 2d       	mov	r25, r12
    72e6:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
            DisplayValue16(d,-14,'F',4);
    72ea:	24 e0       	ldi	r18, 0x04	; 4
    72ec:	46 e4       	ldi	r20, 0x46	; 70
    72ee:	62 ef       	ldi	r22, 0xF2	; 242
    72f0:	8d 2d       	mov	r24, r13
    72f2:	9e 2d       	mov	r25, r14
    72f4:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
            eeprom_write_word((void*)(c_zero_tab2_lo+k),c); /* C0 from 0 to 1 */
    72f8:	0f 2d       	mov	r16, r15
    72fa:	0d 0f       	add	r16, r29
    72fc:	10 e0       	ldi	r17, 0x00	; 0
    72fe:	00 0f       	add	r16, r16
    7300:	11 1f       	adc	r17, r17
    7302:	6b 2d       	mov	r22, r11
    7304:	7c 2d       	mov	r23, r12
    7306:	c8 01       	movw	r24, r16
    7308:	86 5d       	subi	r24, 0xD6	; 214
    730a:	9c 4f       	sbci	r25, 0xFC	; 252
    730c:	fa d4       	rcall	.+2548   	; 0x7d02 <eeprom_write_word>
            eeprom_write_word((void*)(c_zero_tab2_hi+k),d); /* C0 from 1 to 0 */
    730e:	6d 2d       	mov	r22, r13
    7310:	7e 2d       	mov	r23, r14
    7312:	c8 01       	movw	r24, r16
    7314:	84 5e       	subi	r24, 0xE4	; 228
    7316:	9c 4f       	sbci	r25, 0xFC	; 252
    7318:	f4 d4       	rcall	.+2536   	; 0x7d02 <eeprom_write_word>
#else
            DisplayValue16(c,-14,' ',4);
            eeprom_write_word((void*)(c_zero_tab2_lo+k),c); /* C0 from 0 to 1 */
            eeprom_write_word((void*)(c_zero_tab2_hi+k),c); /* set 1to0 same as 0to1 */
#endif
            lcd_clear_line();
    731a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
      for (j=0;j<=2;j++)
    731e:	df 5f       	subi	r29, 0xFF	; 255
    7320:	d3 30       	cpi	r29, 0x03	; 3
    7322:	09 f0       	breq	.+2      	; 0x7326 <sampling_cap_calibrate+0xa8>
    7324:	b7 cf       	rjmp	.-146    	; 0x7294 <sampling_cap_calibrate+0x16>
   for (i=0;i<=2;i++)
    7326:	cf 5f       	subi	r28, 0xFF	; 255
    7328:	c3 30       	cpi	r28, 0x03	; 3
    732a:	09 f0       	breq	.+2      	; 0x732e <sampling_cap_calibrate+0xb0>
    732c:	ae cf       	rjmp	.-164    	; 0x728a <sampling_cap_calibrate+0xc>
            lcd_refresh();
         }
   lcd_line1();
    732e:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
   lcd_MEM_string(OK_str);	// "OK"
    7332:	8b ea       	ldi	r24, 0xAB	; 171
    7334:	91 e0       	ldi	r25, 0x01	; 1
    7336:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
   lcd_clear_line();
    733a:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
   lcd_refresh();
   wait_about200ms();
    733e:	88 e2       	ldi	r24, 0x28	; 40
    7340:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
} /* end sampling_cap_calibrate */
    7344:	cd b7       	in	r28, 0x3d	; 61
    7346:	de b7       	in	r29, 0x3e	; 62
    7348:	e9 e0       	ldi	r30, 0x09	; 9
    734a:	52 c4       	rjmp	.+2212   	; 0x7bf0 <__epilogue_restores__+0x12>

0000734c <peaksearch>:

static unsigned int peaksearch(unsigned int uu[], unsigned int *qptr)
// searches uu[256] for peaks, using averaging over dist samples 
// writes measured Q *10 into *qptr if non-NULL
// returns measured period, with 6 bits of fraction, or 256*64 if no resonance found
{  
    734c:	a4 e1       	ldi	r26, 0x14	; 20
    734e:	b0 e0       	ldi	r27, 0x00	; 0
    7350:	eb ea       	ldi	r30, 0xAB	; 171
    7352:	f9 e3       	ldi	r31, 0x39	; 57
    7354:	28 c4       	rjmp	.+2128   	; 0x7ba6 <__prologue_saves__>
    7356:	89 83       	std	Y+1, r24	; 0x01
    7358:	9a 83       	std	Y+2, r25	; 0x02
    735a:	2b 01       	movw	r4, r22
   unsigned int mean_per;		// average period; the (ipk>>2) provides for rounding
   unsigned int last_per;		// length of last period with 6 bits of fraction
   unsigned int sum_ab;
   unsigned int rr;
   
   dist = 1;		// begin peak search with dist=1
    735c:	dd 24       	eor	r13, r13
    735e:	d3 94       	inc	r13
 #define MinPK 1
   sawzero = 0;		// flag: did we allready encounter a growing signal?
#endif
   prevdelta=1;
   mean_per = 256<<6;	// set period illegal
   for (ii=0;ii<255-dist;ii++) 
    7360:	ed 2c       	mov	r14, r13
    7362:	f1 2c       	mov	r15, r1
    7364:	fa 86       	std	Y+10, r15	; 0x0a
    7366:	e9 86       	std	Y+9, r14	; 0x09

#if PeakSearchMethod == 1
         if (ipk != 0)
#endif
         {
            if (sum_ab < (3*dist)) break;  // stop if peak not significantly high
    7368:	f3 e0       	ldi	r31, 0x03	; 3
    736a:	df 9e       	mul	r13, r31
    736c:	f0 01       	movw	r30, r0
    736e:	11 24       	eor	r1, r1
    7370:	f8 8b       	std	Y+16, r31	; 0x10
    7372:	ef 87       	std	Y+15, r30	; 0x0f
#if PeakSearchMethod == 1
            if (ipk==1)
#else
            if (ii < (dist*4)) goto illegal_peak;
    7374:	24 e0       	ldi	r18, 0x04	; 4
    7376:	d2 9e       	mul	r13, r18
    7378:	70 01       	movw	r14, r0
    737a:	11 24       	eor	r1, r1
    737c:	fe 86       	std	Y+14, r15	; 0x0e
    737e:	ed 86       	std	Y+13, r14	; 0x0d
   mean_per = 256<<6;	// set period illegal
    7380:	81 2c       	mov	r8, r1
    7382:	20 e4       	ldi	r18, 0x40	; 64
    7384:	92 2e       	mov	r9, r18
   sawzero = 0;		// flag: did we allready encounter a growing signal?
    7386:	50 e0       	ldi	r21, 0x00	; 0
   prevpeak_x=0;      // time of previous peak, with 6 bits of fraction
    7388:	61 2c       	mov	r6, r1
    738a:	71 2c       	mov	r7, r1
   firstpeak_x=0;     // time of first peak, with 6 bits of fraction
    738c:	1f 82       	std	Y+7, r1	; 0x07
    738e:	18 86       	std	Y+8, r1	; 0x08
   sumpeak=0;        // sum of peaks
    7390:	b1 2c       	mov	r11, r1
    7392:	a1 2c       	mov	r10, r1
   prevpeak_sum=0;       // height of previous peak
    7394:	21 2c       	mov	r2, r1
    7396:	31 2c       	mov	r3, r1
   firstpeak_sum=0;      // height of first peak
    7398:	1d 82       	std	Y+5, r1	; 0x05
    739a:	1e 82       	std	Y+6, r1	; 0x06
   ipk=0;    // peak counter
    739c:	40 e0       	ldi	r20, 0x00	; 0
   for (ii=0;ii<255-dist;ii++) 
    739e:	c1 2c       	mov	r12, r1
   bb = 0;
    73a0:	e0 e0       	ldi	r30, 0x00	; 0
    73a2:	f0 e0       	ldi	r31, 0x00	; 0
   aa = 0;
    73a4:	30 e0       	ldi	r19, 0x00	; 0
    73a6:	20 e0       	ldi	r18, 0x00	; 0
   prevdelta=1;
    73a8:	61 e0       	ldi	r22, 0x01	; 1
    73aa:	70 e0       	ldi	r23, 0x00	; 0
   for (ii=0;ii<255-dist;ii++) 
    73ac:	ee 24       	eor	r14, r14
    73ae:	ea 94       	dec	r14
    73b0:	f1 2c       	mov	r15, r1
    73b2:	89 85       	ldd	r24, Y+9	; 0x09
    73b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    73b6:	e8 1a       	sub	r14, r24
    73b8:	f9 0a       	sbc	r15, r25
    73ba:	fa 8a       	std	Y+18, r15	; 0x12
    73bc:	e9 8a       	std	Y+17, r14	; 0x11
    73be:	0c 2d       	mov	r16, r12
    73c0:	10 e0       	ldi	r17, 0x00	; 0
    73c2:	e9 88       	ldd	r14, Y+17	; 0x11
    73c4:	fa 88       	ldd	r15, Y+18	; 0x12
    73c6:	0e 15       	cp	r16, r14
    73c8:	1f 05       	cpc	r17, r15
    73ca:	3c f1       	brlt	.+78     	; 0x741a <peaksearch+0xce>
      prevdelta = delta;
   } /* end for ii */

   /* total data are analysed, ipk is now the count of peaks + 1 */
//   if (firstzero>(per>>6)) return 0;     // sanity check: first zero should be within first period
   if (qptr) {
    73cc:	41 14       	cp	r4, r1
    73ce:	51 04       	cpc	r5, r1
    73d0:	01 f1       	breq	.+64     	; 0x7412 <peaksearch+0xc6>
      // calculate r = ratio of amplitude between two consecutive peaks (*1000 for scaling)
      // but we use all peaks seen in this calculation for better accuracy
      // r is weighted average of peak2/peak1, peak3/peak2 and so on, weighed by respectively peak1, peak2 and so on
      // this can be calculated as r = (peak2+peak3+...+peak_m)/(peak1+peak2+peak_{m-1})
      rr = 0;
    73d2:	60 e0       	ldi	r22, 0x00	; 0
    73d4:	70 e0       	ldi	r23, 0x00	; 0
      if (ipk > MinPK) {
    73d6:	42 30       	cpi	r20, 0x02	; 2
    73d8:	c0 f0       	brcs	.+48     	; 0x740a <peaksearch+0xbe>
         unsigned int sumdiff = sumpeak - prevpeak_sum;
         rr = ((unsigned long)(sumpeak-firstpeak_sum)*1000)/sumdiff;
    73da:	95 01       	movw	r18, r10
    73dc:	ed 81       	ldd	r30, Y+5	; 0x05
    73de:	fe 81       	ldd	r31, Y+6	; 0x06
    73e0:	2e 1b       	sub	r18, r30
    73e2:	3f 0b       	sbc	r19, r31
    73e4:	a8 ee       	ldi	r26, 0xE8	; 232
    73e6:	b3 e0       	ldi	r27, 0x03	; 3
    73e8:	34 d3       	rcall	.+1640   	; 0x7a52 <__umulhisi3>
         unsigned int sumdiff = sumpeak - prevpeak_sum;
    73ea:	a2 18       	sub	r10, r2
    73ec:	b3 08       	sbc	r11, r3
         rr = ((unsigned long)(sumpeak-firstpeak_sum)*1000)/sumdiff;
    73ee:	95 01       	movw	r18, r10
    73f0:	50 e0       	ldi	r21, 0x00	; 0
    73f2:	40 e0       	ldi	r20, 0x00	; 0
    73f4:	f0 d2       	rcall	.+1504   	; 0x79d6 <__udivmodsi4>
         // rr = exp(-pi/Q)  so Q = -pi/(ln(rr))
         // for r almost 1 (i.e., high Q), this is approx. pi/(1-rr)
         rr = 31416u/get_log(1000-rr);
    73f6:	88 ee       	ldi	r24, 0xE8	; 232
    73f8:	93 e0       	ldi	r25, 0x03	; 3
    73fa:	82 1b       	sub	r24, r18
    73fc:	93 0b       	sbc	r25, r19
    73fe:	0e 94 f6 08 	call	0x11ec	; 0x11ec <get_log>
    7402:	bc 01       	movw	r22, r24
    7404:	88 eb       	ldi	r24, 0xB8	; 184
    7406:	9a e7       	ldi	r25, 0x7A	; 122
    7408:	bf d2       	rcall	.+1406   	; 0x7988 <__udivmodhi4>
         // note scaling: the get_log is *1000, and we now compute Q in multiples of .1, hence the numerator being 10000*pi
      }
      *qptr = (unsigned int)rr;
    740a:	d2 01       	movw	r26, r4
    740c:	6c 93       	st	X, r22
    740e:	11 96       	adiw	r26, 0x01	; 1
   DisplayValue(ipk,0,' ',3);
   DisplayValue(((unsigned long)mean_per*25)/16,-2,' ',6);
   DisplayValue(dist,0,' ',5);
#endif
   return mean_per;
}  /* end of peaksearch */
    7410:	7c 93       	st	X, r23
    7412:	c4 01       	movw	r24, r8
    7414:	64 96       	adiw	r28, 0x14	; 20
    7416:	e2 e1       	ldi	r30, 0x12	; 18
    7418:	e2 c3       	rjmp	.+1988   	; 0x7bde <__epilogue_restores__>
      bb += uu[ii+dist];
    741a:	a9 85       	ldd	r26, Y+9	; 0x09
    741c:	ba 85       	ldd	r27, Y+10	; 0x0a
    741e:	a0 0f       	add	r26, r16
    7420:	b1 1f       	adc	r27, r17
    7422:	aa 0f       	add	r26, r26
    7424:	bb 1f       	adc	r27, r27
    7426:	e9 80       	ldd	r14, Y+1	; 0x01
    7428:	fa 80       	ldd	r15, Y+2	; 0x02
    742a:	ae 0d       	add	r26, r14
    742c:	bf 1d       	adc	r27, r15
    742e:	0d 90       	ld	r0, X+
    7430:	bc 91       	ld	r27, X
    7432:	a0 2d       	mov	r26, r0
    7434:	ae 0f       	add	r26, r30
    7436:	bf 1f       	adc	r27, r31
      aa += uu[ii];
    7438:	f8 01       	movw	r30, r16
    743a:	ee 0f       	add	r30, r30
    743c:	ff 1f       	adc	r31, r31
    743e:	ee 0d       	add	r30, r14
    7440:	ff 1d       	adc	r31, r15
    7442:	80 81       	ld	r24, Z
    7444:	91 81       	ldd	r25, Z+1	; 0x01
    7446:	28 0f       	add	r18, r24
    7448:	39 1f       	adc	r19, r25
      if (ii < dist) continue;
    744a:	cd 14       	cp	r12, r13
    744c:	08 f4       	brcc	.+2      	; 0x7450 <peaksearch+0x104>
    744e:	8e c0       	rjmp	.+284    	; 0x756c <peaksearch+0x220>
      aa -= uu[ii-dist];
    7450:	f8 01       	movw	r30, r16
    7452:	e9 84       	ldd	r14, Y+9	; 0x09
    7454:	fa 84       	ldd	r15, Y+10	; 0x0a
    7456:	ee 19       	sub	r30, r14
    7458:	ff 09       	sbc	r31, r15
    745a:	ee 0f       	add	r30, r30
    745c:	ff 1f       	adc	r31, r31
    745e:	e9 80       	ldd	r14, Y+1	; 0x01
    7460:	fa 80       	ldd	r15, Y+2	; 0x02
    7462:	ee 0d       	add	r30, r14
    7464:	ff 1d       	adc	r31, r15
    7466:	01 90       	ld	r0, Z+
    7468:	f0 81       	ld	r31, Z
    746a:	e0 2d       	mov	r30, r0
    746c:	2e 1b       	sub	r18, r30
    746e:	3f 0b       	sbc	r19, r31
      bb -= uu[ii];
    7470:	fd 01       	movw	r30, r26
    7472:	e8 1b       	sub	r30, r24
    7474:	f9 0b       	sbc	r31, r25
        sum_ab = aa + bb;
    7476:	79 01       	movw	r14, r18
    7478:	ee 0e       	add	r14, r30
    747a:	ff 1e       	adc	r15, r31
        delta = aa - bb;
    747c:	82 0f       	add	r24, r18
    747e:	93 1f       	adc	r25, r19
    7480:	8a 1b       	sub	r24, r26
    7482:	9b 0b       	sbc	r25, r27
    7484:	8b 87       	std	Y+11, r24	; 0x0b
    7486:	9c 87       	std	Y+12, r25	; 0x0c
        if (((int)(sum_ab/4)+delta) < 0)
    7488:	d7 01       	movw	r26, r14
    748a:	b6 95       	lsr	r27
    748c:	a7 95       	ror	r26
    748e:	b6 95       	lsr	r27
    7490:	a7 95       	ror	r26
    7492:	a8 0f       	add	r26, r24
    7494:	b9 1f       	adc	r27, r25
    7496:	b7 fd       	sbrc	r27, 7
    7498:	74 c0       	rjmp	.+232    	; 0x7582 <peaksearch+0x236>
      if ((bb < aa) && (sawzero == 1)) {
    749a:	e2 17       	cp	r30, r18
    749c:	f3 07       	cpc	r31, r19
    749e:	08 f0       	brcs	.+2      	; 0x74a2 <peaksearch+0x156>
    74a0:	68 c0       	rjmp	.+208    	; 0x7572 <peaksearch+0x226>
    74a2:	51 30       	cpi	r21, 0x01	; 1
    74a4:	09 f0       	breq	.+2      	; 0x74a8 <peaksearch+0x15c>
    74a6:	65 c0       	rjmp	.+202    	; 0x7572 <peaksearch+0x226>
         xx = (ii<<6);
    74a8:	d8 01       	movw	r26, r16
    74aa:	56 e0       	ldi	r21, 0x06	; 6
    74ac:	aa 0f       	add	r26, r26
    74ae:	bb 1f       	adc	r27, r27
    74b0:	5a 95       	dec	r21
    74b2:	e1 f7       	brne	.-8      	; 0x74ac <peaksearch+0x160>
    74b4:	bc 8b       	std	Y+20, r27	; 0x14
    74b6:	ab 8b       	std	Y+19, r26	; 0x13
         kdiv = delta - prevdelta;
    74b8:	dc 01       	movw	r26, r24
    74ba:	a6 1b       	sub	r26, r22
    74bc:	b7 0b       	sbc	r27, r23
    74be:	bd 01       	movw	r22, r26
         if (kdiv >= delta) xx -= ((delta * 64)+ 32) / kdiv;
    74c0:	a8 17       	cp	r26, r24
    74c2:	b9 07       	cpc	r27, r25
    74c4:	68 f0       	brcs	.+26     	; 0x74e0 <peaksearch+0x194>
    74c6:	a6 e0       	ldi	r26, 0x06	; 6
    74c8:	88 0f       	add	r24, r24
    74ca:	99 1f       	adc	r25, r25
    74cc:	aa 95       	dec	r26
    74ce:	e1 f7       	brne	.-8      	; 0x74c8 <peaksearch+0x17c>
    74d0:	80 96       	adiw	r24, 0x20	; 32
    74d2:	5a d2       	rcall	.+1204   	; 0x7988 <__udivmodhi4>
    74d4:	8b 89       	ldd	r24, Y+19	; 0x13
    74d6:	9c 89       	ldd	r25, Y+20	; 0x14
    74d8:	86 1b       	sub	r24, r22
    74da:	97 0b       	sbc	r25, r23
    74dc:	9c 8b       	std	Y+20, r25	; 0x14
    74de:	8b 8b       	std	Y+19, r24	; 0x13
            if (sum_ab < (3*dist)) break;  // stop if peak not significantly high
    74e0:	af 85       	ldd	r26, Y+15	; 0x0f
    74e2:	b8 89       	ldd	r27, Y+16	; 0x10
    74e4:	ea 16       	cp	r14, r26
    74e6:	fb 06       	cpc	r15, r27
    74e8:	08 f4       	brcc	.+2      	; 0x74ec <peaksearch+0x1a0>
    74ea:	70 cf       	rjmp	.-288    	; 0x73cc <peaksearch+0x80>
            if (ii < (dist*4)) goto illegal_peak;
    74ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    74ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    74f0:	08 17       	cp	r16, r24
    74f2:	19 07       	cpc	r17, r25
    74f4:	b4 f1       	brlt	.+108    	; 0x7562 <peaksearch+0x216>
            if (ipk==0)
    74f6:	44 23       	and	r20, r20
    74f8:	b1 f0       	breq	.+44     	; 0x7526 <peaksearch+0x1da>
               last_per = xx - prevpeak_x;	// length of last period
    74fa:	6b 89       	ldd	r22, Y+19	; 0x13
    74fc:	7c 89       	ldd	r23, Y+20	; 0x14
    74fe:	66 19       	sub	r22, r6
    7500:	77 09       	sbc	r23, r7
               if ((ipk > (MinPK+1)) && (last_per > (mean_per + mean_per/2 + 32))) break;  // gap between peaks
    7502:	43 30       	cpi	r20, 0x03	; 3
    7504:	50 f0       	brcs	.+20     	; 0x751a <peaksearch+0x1ce>
    7506:	d4 01       	movw	r26, r8
    7508:	90 96       	adiw	r26, 0x20	; 32
    750a:	c4 01       	movw	r24, r8
    750c:	96 95       	lsr	r25
    750e:	87 95       	ror	r24
    7510:	8a 0f       	add	r24, r26
    7512:	9b 1f       	adc	r25, r27
    7514:	86 17       	cp	r24, r22
    7516:	97 07       	cpc	r25, r23
    7518:	c8 f1       	brcs	.+114    	; 0x758c <peaksearch+0x240>
               if (smp_per > dist) {		// dist is lower than 1/4 period without rounding
    751a:	d7 16       	cp	r13, r23
    751c:	50 f4       	brcc	.+20     	; 0x7532 <peaksearch+0x1e6>
                  dist = smp_per+1;		// set dist to the found period / 4, rounded up
    751e:	dd 24       	eor	r13, r13
    7520:	d3 94       	inc	r13
    7522:	d7 0e       	add	r13, r23
                  goto repeat;
    7524:	1d cf       	rjmp	.-454    	; 0x7360 <peaksearch+0x14>
               firstpeak_x = xx;		// position of first peak
    7526:	ab 89       	ldd	r26, Y+19	; 0x13
    7528:	bc 89       	ldd	r27, Y+20	; 0x14
    752a:	b8 87       	std	Y+8, r27	; 0x08
    752c:	af 83       	std	Y+7, r26	; 0x07
    752e:	fe 82       	std	Y+6, r15	; 0x06
    7530:	ed 82       	std	Y+5, r14	; 0x05
            sumpeak += sum_ab;		// build sum of amplitude
    7532:	ae 0c       	add	r10, r14
    7534:	bf 1c       	adc	r11, r15
         ipk++;			// one more peak found
    7536:	4f 5f       	subi	r20, 0xFF	; 255
         if (ipk > MinPK) {
    7538:	41 30       	cpi	r20, 0x01	; 1
    753a:	f9 f0       	breq	.+62     	; 0x757a <peaksearch+0x22e>
            mean_per = (prevpeak_x - firstpeak_x + ((ipk-MinPK)>>1)) / (ipk-MinPK);  // average period with rounding
    753c:	84 2f       	mov	r24, r20
    753e:	81 50       	subi	r24, 0x01	; 1
    7540:	99 0b       	sbc	r25, r25
    7542:	bc 01       	movw	r22, r24
    7544:	95 95       	asr	r25
    7546:	87 95       	ror	r24
    7548:	ab 89       	ldd	r26, Y+19	; 0x13
    754a:	bc 89       	ldd	r27, Y+20	; 0x14
    754c:	8a 0f       	add	r24, r26
    754e:	9b 1f       	adc	r25, r27
    7550:	af 81       	ldd	r26, Y+7	; 0x07
    7552:	b8 85       	ldd	r27, Y+8	; 0x08
    7554:	8a 1b       	sub	r24, r26
    7556:	9b 0b       	sbc	r25, r27
    7558:	17 d2       	rcall	.+1070   	; 0x7988 <__udivmodhi4>
    755a:	4b 01       	movw	r8, r22
         prevpeak_x = xx;		// save position of last peak
    755c:	6b 88       	ldd	r6, Y+19	; 0x13
    755e:	7c 88       	ldd	r7, Y+20	; 0x14
            mean_per = (prevpeak_x - firstpeak_x + ((ipk-MinPK)>>1)) / (ipk-MinPK);  // average period with rounding
    7560:	17 01       	movw	r2, r14
         if (ipk > Maxpk) break;	// count of requested peaks is found
    7562:	45 31       	cpi	r20, 0x15	; 21
    7564:	08 f0       	brcs	.+2      	; 0x7568 <peaksearch+0x21c>
    7566:	32 cf       	rjmp	.-412    	; 0x73cc <peaksearch+0x80>
         sawzero=0;
    7568:	50 e0       	ldi	r21, 0x00	; 0
    756a:	03 c0       	rjmp	.+6      	; 0x7572 <peaksearch+0x226>
      bb += uu[ii+dist];
    756c:	fd 01       	movw	r30, r26
    756e:	6b 87       	std	Y+11, r22	; 0x0b
    7570:	7c 87       	std	Y+12, r23	; 0x0c
   for (ii=0;ii<255-dist;ii++) 
    7572:	c3 94       	inc	r12
    7574:	6b 85       	ldd	r22, Y+11	; 0x0b
    7576:	7c 85       	ldd	r23, Y+12	; 0x0c
    7578:	22 cf       	rjmp	.-444    	; 0x73be <peaksearch+0x72>
         prevpeak_x = xx;		// save position of last peak
    757a:	6b 88       	ldd	r6, Y+19	; 0x13
    757c:	7c 88       	ldd	r7, Y+20	; 0x14
illegal_peak:
    757e:	17 01       	movw	r2, r14
    7580:	f3 cf       	rjmp	.-26     	; 0x7568 <peaksearch+0x21c>
           sawzero=1;
    7582:	51 e0       	ldi	r21, 0x01	; 1
      if ((bb < aa) && (sawzero == 1)) {
    7584:	e2 17       	cp	r30, r18
    7586:	f3 07       	cpc	r31, r19
    7588:	a0 f7       	brcc	.-24     	; 0x7572 <peaksearch+0x226>
    758a:	8e cf       	rjmp	.-228    	; 0x74a8 <peaksearch+0x15c>
   if (qptr) {
    758c:	41 14       	cp	r4, r1
    758e:	51 04       	cpc	r5, r1
    7590:	09 f0       	breq	.+2      	; 0x7594 <peaksearch+0x248>
    7592:	23 cf       	rjmp	.-442    	; 0x73da <peaksearch+0x8e>
    7594:	3e cf       	rjmp	.-388    	; 0x7412 <peaksearch+0xc6>

00007596 <sampling_lc>:




void sampling_lc(byte LowPin, byte HighPin)
{
    7596:	aa e2       	ldi	r26, 0x2A	; 42
    7598:	b2 e0       	ldi	r27, 0x02	; 2
    759a:	e0 ed       	ldi	r30, 0xD0	; 208
    759c:	fa e3       	ldi	r31, 0x3A	; 58
    759e:	07 c3       	rjmp	.+1550   	; 0x7bae <__prologue_saves__+0x8>
    75a0:	f8 2e       	mov	r15, r24
    75a2:	b6 2e       	mov	r11, r22
   uint16_t lc_cpar;    // value of parallel capacitor used for calculating inductance, in pF
   uint16_t period;
   lc_cpar=eeprom_read_word((uint16_t *)&lc_cpar_ee);
    75a4:	81 e5       	ldi	r24, 0x51	; 81
    75a6:	93 e0       	ldi	r25, 0x03	; 3
    75a8:	99 d3       	rcall	.+1842   	; 0x7cdc <eeprom_read_word>
    75aa:	4c 01       	movw	r8, r24

//###################################################################################################
 // new version of the code, with pulses via the ADC port, i.e., without 680 ohm series resistor

   byte HiPinR_L, LoADC;
   HiPinR_L = pinmaskRL(HighPin);
    75ac:	eb 2d       	mov	r30, r11
    75ae:	f0 e0       	ldi	r31, 0x00	; 0
    75b0:	ef 5b       	subi	r30, 0xBF	; 191
    75b2:	fd 4f       	sbci	r31, 0xFD	; 253
    75b4:	14 91       	lpm	r17, Z
   LoADC = pinmaskADC(LowPin);
    75b6:	ef 2d       	mov	r30, r15
    75b8:	f0 e0       	ldi	r31, 0x00	; 0
    75ba:	ec 5b       	subi	r30, 0xBC	; 188
    75bc:	fd 4f       	sbci	r31, 0xFD	; 253
    75be:	e4 91       	lpm	r30, Z

   lc_fx=0;
    75c0:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <lc_fx>
    75c4:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <lc_fx+0x1>
    75c8:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <lc_fx+0x2>
    75cc:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <lc_fx+0x3>
   lc_qx=0;
    75d0:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <lc_qx+0x1>
    75d4:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <lc_qx>
   lc_lx=0;
    75d8:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lc_lx>
    75dc:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lc_lx+0x1>
    75e0:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <lc_lx+0x2>
    75e4:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <lc_lx+0x3>
   if ((PartFound != PART_RESISTOR) || (inductor_lpre > 0)) {
    75e8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <PartFound>
    75ec:	81 30       	cpi	r24, 0x01	; 1
    75ee:	09 f0       	breq	.+2      	; 0x75f2 <sampling_lc+0x5c>
    75f0:	cd c0       	rjmp	.+410    	; 0x778c <sampling_lc+0x1f6>
    75f2:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    75f6:	18 16       	cp	r1, r24
    75f8:	0c f4       	brge	.+2      	; 0x75fc <sampling_lc+0x66>
    75fa:	c8 c0       	rjmp	.+400    	; 0x778c <sampling_lc+0x1f6>
   byte i=0;

   unsigned int uu[255];


   ADC_PORT = TXD_VAL;
    75fc:	18 b8       	out	0x08, r1	; 8
   ADC_DDR = LoADC;			// switch Low-Pin to output (GND)
    75fe:	e7 b9       	out	0x07, r30	; 7
   wait100us();
    7600:	0e 94 a8 07 	call	0xf50	; 0xf50 <wait100us>

   // first, acquire data at maximum speed:
   ADMUX=HighPin|ADref1V1;   // use built-in reference, about 1.1 V;
    7604:	0b 2d       	mov	r16, r11
    7606:	00 6c       	ori	r16, 0xC0	; 192
    7608:	b0 2e       	mov	r11, r16
    760a:	00 93 7c 00 	sts	0x007C, r16	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
                             // that's enough, because peaks more than about 0.6 V are not of interest
                             // (because the negative peak would be chopped by the protection diodes)
   wait_aref_stabilize();                               
    760e:	0e 94 a8 07 	call	0xf50	; 0xf50 <wait100us>

   // run a first measurement, using the narrow full-current impulse
   samplingADC((1<<smplADC_span)|(1<<smplADC_direct), uu, 255, HiPinR_L, 0, 0, HiPinR_L);
    7612:	c1 2e       	mov	r12, r17
    7614:	e1 2c       	mov	r14, r1
    7616:	00 e0       	ldi	r16, 0x00	; 0
    7618:	21 2f       	mov	r18, r17
    761a:	4f ef       	ldi	r20, 0xFF	; 255
    761c:	be 01       	movw	r22, r28
    761e:	6f 5f       	subi	r22, 0xFF	; 255
    7620:	7f 4f       	sbci	r23, 0xFF	; 255
    7622:	80 e1       	ldi	r24, 0x10	; 16
    7624:	91 e0       	ldi	r25, 0x01	; 1
    7626:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>

   // also measure some 20 samples at the "cold side" of the coil, and subtract
   // at highest frequencies, this is useful because the on-chip ADC has an RC lowpass which gives an exponentially decaying "DC" offset
   unsigned int uu0[20];
   ADMUX=LowPin|ADref1V1;   // switch to "cold" side for reference measurement
    762a:	2f 2d       	mov	r18, r15
    762c:	20 6c       	ori	r18, 0xC0	; 192
    762e:	f2 2e       	mov	r15, r18
    7630:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
   samplingADC((1<<smplADC_span)|(1<<smplADC_direct), uu0, 20, HiPinR_L, 0, 0, HiPinR_L);
    7634:	21 2f       	mov	r18, r17
    7636:	44 e1       	ldi	r20, 0x14	; 20
    7638:	be 01       	movw	r22, r28
    763a:	61 50       	subi	r22, 0x01	; 1
    763c:	7e 4f       	sbci	r23, 0xFE	; 254
    763e:	80 e1       	ldi	r24, 0x10	; 16
    7640:	91 e0       	ldi	r25, 0x01	; 1
    7642:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>
   for (i=0;i<20;i++)
    7646:	fe 01       	movw	r30, r28
    7648:	31 96       	adiw	r30, 0x01	; 1
    764a:	be 01       	movw	r22, r28
    764c:	61 50       	subi	r22, 0x01	; 1
    764e:	7e 4f       	sbci	r23, 0xFE	; 254
    7650:	6b 01       	movw	r12, r22
    7652:	ae 01       	movw	r20, r28
    7654:	47 5d       	subi	r20, 0xD7	; 215
    7656:	5f 4f       	sbci	r21, 0xFF	; 255
   {
      if (uu[i]>=uu0[i]) uu[i]-=uu0[i];
    7658:	81 91       	ld	r24, Z+
    765a:	91 91       	ld	r25, Z+
    765c:	d6 01       	movw	r26, r12
    765e:	6d 91       	ld	r22, X+
    7660:	7d 91       	ld	r23, X+
    7662:	6d 01       	movw	r12, r26
    7664:	9f 01       	movw	r18, r30
    7666:	22 50       	subi	r18, 0x02	; 2
    7668:	31 09       	sbc	r19, r1
    766a:	86 17       	cp	r24, r22
    766c:	97 07       	cpc	r25, r23
    766e:	08 f4       	brcc	.+2      	; 0x7672 <sampling_lc+0xdc>
    7670:	91 c0       	rjmp	.+290    	; 0x7794 <sampling_lc+0x1fe>
    7672:	86 1b       	sub	r24, r22
    7674:	97 0b       	sbc	r25, r23
    7676:	d9 01       	movw	r26, r18
    7678:	8d 93       	st	X+, r24
    767a:	9c 93       	st	X, r25
   for (i=0;i<20;i++)
    767c:	4e 17       	cp	r20, r30
    767e:	5f 07       	cpc	r21, r31
    7680:	59 f7       	brne	.-42     	; 0x7658 <sampling_lc+0xc2>
      else uu[i]=0;
   }
   ADMUX=HighPin|ADref1V1;   // back to "hot" side
    7682:	b0 92 7c 00 	sts	0x007C, r11	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>

   byte dist0;         // estimate of duration of 1/4 of a period, used to set averaging interval in peaksearch()
   unsigned shift=0;   // by how many bit positions measured period needs to be shifted due to measuring with span>1

   // check how long until signal reaches 0: that gives us a first guess of 1/4 of the resonance period (because we apply an impulse, so we start at the maximum of the sinewave)
   period = peaksearch(uu,NULL);
    7686:	70 e0       	ldi	r23, 0x00	; 0
    7688:	60 e0       	ldi	r22, 0x00	; 0
    768a:	ce 01       	movw	r24, r28
    768c:	01 96       	adiw	r24, 0x01	; 1
    768e:	5e de       	rcall	.-836    	; 0x734c <peaksearch>
   dist0 = 1+(period>>8);    // >>6 because of fraction bits, plus >>2 because dist0 should be about a quarter period, plus +1 to round up
    7690:	9f 5f       	subi	r25, 0xFF	; 255
	 DisplayValue(((unsigned long)period*10)/64,-1,' ',5);
         report_buf(uu,6);
 #endif
	
#define samplingADC_direct (1<<smplADC_direct)
     par = (1<<smplADC_span) | samplingADC_direct;
    7692:	30 e1       	ldi	r19, 0x10	; 16
    7694:	a3 2e       	mov	r10, r19
    7696:	bb 24       	eor	r11, r11
    7698:	b3 94       	inc	r11
   unsigned shift=0;   // by how many bit positions measured period needs to be shifted due to measuring with span>1
    769a:	71 2c       	mov	r7, r1
    769c:	61 2c       	mov	r6, r1
     if (dist0>16) {
    769e:	91 31       	cpi	r25, 0x11	; 17
    76a0:	78 f0       	brcs	.+30     	; 0x76c0 <sampling_lc+0x12a>
        if (dist0<64) {
           shift = 2;
           par = (4<<smplADC_span) | samplingADC_direct;
        } else {
           shift = 4;
           par = (16<<smplADC_span) | samplingADC_direct;
    76a2:	40 e1       	ldi	r20, 0x10	; 16
    76a4:	a4 2e       	mov	r10, r20
    76a6:	ba 2c       	mov	r11, r10
           shift = 4;
    76a8:	54 e0       	ldi	r21, 0x04	; 4
    76aa:	65 2e       	mov	r6, r21
    76ac:	71 2c       	mov	r7, r1
        if (dist0<64) {
    76ae:	90 34       	cpi	r25, 0x40	; 64
    76b0:	38 f4       	brcc	.+14     	; 0x76c0 <sampling_lc+0x12a>
           par = (4<<smplADC_span) | samplingADC_direct;
    76b2:	90 e1       	ldi	r25, 0x10	; 16
    76b4:	a9 2e       	mov	r10, r25
    76b6:	94 e0       	ldi	r25, 0x04	; 4
    76b8:	b9 2e       	mov	r11, r25
           shift = 2;
    76ba:	22 e0       	ldi	r18, 0x02	; 2
    76bc:	62 2e       	mov	r6, r18
    76be:	71 2c       	mov	r7, r1
           shift = 4;
    76c0:	88 e0       	ldi	r24, 0x08	; 8
    76c2:	d8 2e       	mov	r13, r24
        }
     }

   // we take the average of 8 measurements, to increase S/N, except when using span>1, since then the sampling takes annoyingly long and S/N usually is better anyway at these lower frequencies
     for (i=0;i<8;i++) {
        wdt_reset();
    76c4:	a8 95       	wdr
        samplingADC(par, uu, 255, HiPinR_L, 0, 0, HiPinR_L);
    76c6:	c1 2e       	mov	r12, r17
    76c8:	e1 2c       	mov	r14, r1
    76ca:	00 e0       	ldi	r16, 0x00	; 0
    76cc:	21 2f       	mov	r18, r17
    76ce:	4f ef       	ldi	r20, 0xFF	; 255
    76d0:	be 01       	movw	r22, r28
    76d2:	6f 5f       	subi	r22, 0xFF	; 255
    76d4:	7f 4f       	sbci	r23, 0xFF	; 255
    76d6:	c5 01       	movw	r24, r10
    76d8:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>
//        if (par > (2<<smplADC_span)) goto noavg;
        if (shift > 0) goto noavg;
    76dc:	61 14       	cp	r6, r1
    76de:	71 04       	cpc	r7, r1
    76e0:	09 f4       	brne	.+2      	; 0x76e4 <sampling_lc+0x14e>
    76e2:	5e c0       	rjmp	.+188    	; 0x77a0 <sampling_lc+0x20a>
    while (i--) uu[i]>>=3;   // divide all samples by 8
//   }


noavg:;
   period = peaksearch(uu,&lc_qx);
    76e4:	6c eb       	ldi	r22, 0xBC	; 188
    76e6:	71 e0       	ldi	r23, 0x01	; 1
    76e8:	ce 01       	movw	r24, r28
    76ea:	01 96       	adiw	r24, 0x01	; 1
    76ec:	2f de       	rcall	.-930    	; 0x734c <peaksearch>
    76ee:	5c 01       	movw	r10, r24
   if (period > (255<<6)) period = 0;		// set implausible period to zero
    76f0:	81 3c       	cpi	r24, 0xC1	; 193
    76f2:	9f 43       	sbci	r25, 0x3F	; 63
    76f4:	08 f0       	brcs	.+2      	; 0x76f8 <sampling_lc+0x162>
    76f6:	ac c0       	rjmp	.+344    	; 0x7850 <sampling_lc+0x2ba>
	 lcd_data('p');
         DisplayValue16((period*10)/64,-1,' ',4);
 #endif

   unsigned long vv;
   vv = (unsigned long)period;         // measured period with 6 fraction bits, before applying shift, is < 256*64 = 2^14
    76f8:	65 01       	movw	r12, r10
    76fa:	f1 2c       	mov	r15, r1
   vv = vv*vv;                            // vv < 2^28   ; this is (except for shift)  d<<12
    76fc:	e1 2c       	mov	r14, r1
    76fe:	95 01       	movw	r18, r10
    7700:	d5 01       	movw	r26, r10
//   vv=(vv>>10)*12368;		// vv < 2^32   ; is (d<<2)/(2*pi*fclock)^2 * 1e21 >>3
				// that 12368 is calculated as 1/(2*pi*16e6)**2*1e21 /8, for 16 MHz CPU clock
				// 1e21 / (2*pi*16e6)**2 / (8 * 1024)      = 12.07842632, which can be computed
				// with a divide by 51 and a mul with 616 (= 12.07843137) .
				// whith better accuracy than   12368/1024 = 12.07812500
   vv = (vv/51)*616;
    7702:	a7 d1       	rcall	.+846    	; 0x7a52 <__umulhisi3>
    7704:	23 e3       	ldi	r18, 0x33	; 51
    7706:	30 e0       	ldi	r19, 0x00	; 0
    7708:	40 e0       	ldi	r20, 0x00	; 0
    770a:	50 e0       	ldi	r21, 0x00	; 0
    770c:	64 d1       	rcall	.+712    	; 0x79d6 <__udivmodsi4>
    770e:	a8 e6       	ldi	r26, 0x68	; 104
    7710:	b2 e0       	ldi	r27, 0x02	; 2
#else
   #error "CPU clocks other than 8, 16  and 20 MHz not yet supported for SamplingADC"
   vv = 0;
#endif
//   vv/=lc_cpar;                          //          ; is (d<<2)/(2*pi*fclock)^2/c * 1e9 >>3
   vv /= (lc_cpar>>1);                          //          ; is (d<<2)/(2*pi*fclock)^2/c * 1e9 >>2
    7712:	b4 d1       	rcall	.+872    	; 0x7a7c <__muluhisi3>
    7714:	96 94       	lsr	r9
    7716:	87 94       	ror	r8
    7718:	94 01       	movw	r18, r8
    771a:	50 e0       	ldi	r21, 0x00	; 0
    771c:	40 e0       	ldi	r20, 0x00	; 0
    771e:	5b d1       	rcall	.+694    	; 0x79d6 <__udivmodsi4>
	// shift for 16 MHz 0, 2,  4; for 8 MHz 1, 3,  5
        // resulting factor 2,32,512            8,128,2048 
//   vv<<=1+2*shift;                      //          ; is L in 1e-9 H  
   vv <<= 2*shift;                      //          ; is L in 1e-9 H  
    7720:	c3 01       	movw	r24, r6
    7722:	88 0f       	add	r24, r24
    7724:	99 1f       	adc	r25, r25
    7726:	04 c0       	rjmp	.+8      	; 0x7730 <sampling_lc+0x19a>
    7728:	22 0f       	add	r18, r18
    772a:	33 1f       	adc	r19, r19
    772c:	44 1f       	adc	r20, r20
    772e:	55 1f       	adc	r21, r21
    7730:	8a 95       	dec	r24
    7732:	d2 f7       	brpl	.-12     	; 0x7728 <sampling_lc+0x192>
                        // not nice: the nH number will always be even; then again, do we really measure that precisely?
   lc_lx = vv;
    7734:	20 93 b8 01 	sts	0x01B8, r18	; 0x8001b8 <lc_lx>
    7738:	30 93 b9 01 	sts	0x01B9, r19	; 0x8001b9 <lc_lx+0x1>
    773c:	40 93 ba 01 	sts	0x01BA, r20	; 0x8001ba <lc_lx+0x2>
    7740:	50 93 bb 01 	sts	0x01BB, r21	; 0x8001bb <lc_lx+0x3>
   // inductor_lpre = 0, no Inductor found 
   // unductor_lpre = 1,  rx is above 2100 Ohm
   // inductor_lpre = -5, Inductance searched without 680 Ohm, rx is below 24 Ohm
   // inductor_lpre = -4,  Inductance is searched with 680i Ohm, 24 < rx < 2100
   // probably search of 
   if (inductor_lx>2) {
    7744:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <inductor_lx>
    7748:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <inductor_lx+0x1>
    774c:	a0 91 a1 01 	lds	r26, 0x01A1	; 0x8001a1 <inductor_lx+0x2>
    7750:	b0 91 a2 01 	lds	r27, 0x01A2	; 0x8001a2 <inductor_lx+0x3>
    7754:	03 97       	sbiw	r24, 0x03	; 3
    7756:	a1 05       	cpc	r26, r1
    7758:	b1 05       	cpc	r27, r1
    775a:	40 f0       	brcs	.+16     	; 0x776c <sampling_lc+0x1d6>
      // if traditional measurement gave some meaningful-looking value ( > 20 uH, but that's rather arbitrary)
      // discard the new one, it's probably self-resonance
      // note that if a sizeable cap is in parallel, the normal measurement doesn't come up with an answer
      lc_lx=0;
    775c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lc_lx>
    7760:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lc_lx+0x1>
    7764:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <lc_lx+0x2>
    7768:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <lc_lx+0x3>
   }

   // freq/Hz = F_CPU/d
   if (period==0) {
    776c:	a1 14       	cp	r10, r1
    776e:	b1 04       	cpc	r11, r1
    7770:	09 f0       	breq	.+2      	; 0x7774 <sampling_lc+0x1de>
    7772:	71 c0       	rjmp	.+226    	; 0x7856 <sampling_lc+0x2c0>
      lc_qx = 0;
    7774:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <lc_qx+0x1>
    7778:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <lc_qx>
      lc_lx = 0;
    777c:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <lc_lx>
    7780:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <lc_lx+0x1>
    7784:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <lc_lx+0x2>
    7788:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <lc_lx+0x3>
#endif
   lc_fx = ((F_CPU<<(7-shift))/vv);

   if (inductor_lpre >= 0) inductor_lpre = -1; 	/* no ESR measurement! */
   return;
} /* end of sampling_lc() */
    778c:	c6 5d       	subi	r28, 0xD6	; 214
    778e:	dd 4f       	sbci	r29, 0xFD	; 253
    7790:	ee e0       	ldi	r30, 0x0E	; 14
    7792:	29 c2       	rjmp	.+1106   	; 0x7be6 <__epilogue_restores__+0x8>
      else uu[i]=0;
    7794:	d9 01       	movw	r26, r18
    7796:	1d 92       	st	X+, r1
    7798:	1c 92       	st	X, r1
    779a:	70 cf       	rjmp	.-288    	; 0x767c <sampling_lc+0xe6>
        par |= samplingADC_cumul;
    779c:	5c 01       	movw	r10, r24
    779e:	92 cf       	rjmp	.-220    	; 0x76c4 <sampling_lc+0x12e>
    77a0:	c5 01       	movw	r24, r10
    77a2:	80 64       	ori	r24, 0x40	; 64
     for (i=0;i<8;i++) {
    77a4:	da 94       	dec	r13
    77a6:	d1 10       	cpse	r13, r1
    77a8:	f9 cf       	rjmp	.-14     	; 0x779c <sampling_lc+0x206>
   if ((par >> smplADC_span) < 4) {
    77aa:	81 15       	cp	r24, r1
    77ac:	94 40       	sbci	r25, 0x04	; 4
    77ae:	b8 f0       	brcs	.+46     	; 0x77de <sampling_lc+0x248>
      i=20; while (i--)         // equivalent to for (i=0;i<20;i++) but saves 48 bytes of flash????
    77b0:	8e ef       	ldi	r24, 0xFE	; 254
    while (i--) uu[i]>>=3;   // divide all samples by 8
    77b2:	e8 2f       	mov	r30, r24
    77b4:	f0 e0       	ldi	r31, 0x00	; 0
    77b6:	ee 0f       	add	r30, r30
    77b8:	ff 1f       	adc	r31, r31
    77ba:	01 e0       	ldi	r16, 0x01	; 1
    77bc:	10 e0       	ldi	r17, 0x00	; 0
    77be:	0c 0f       	add	r16, r28
    77c0:	1d 1f       	adc	r17, r29
    77c2:	e0 0f       	add	r30, r16
    77c4:	f1 1f       	adc	r31, r17
    77c6:	20 81       	ld	r18, Z
    77c8:	31 81       	ldd	r19, Z+1	; 0x01
    77ca:	a3 e0       	ldi	r26, 0x03	; 3
    77cc:	36 95       	lsr	r19
    77ce:	27 95       	ror	r18
    77d0:	aa 95       	dec	r26
    77d2:	e1 f7       	brne	.-8      	; 0x77cc <sampling_lc+0x236>
    77d4:	31 83       	std	Z+1, r19	; 0x01
    77d6:	20 83       	st	Z, r18
    77d8:	81 50       	subi	r24, 0x01	; 1
    77da:	58 f7       	brcc	.-42     	; 0x77b2 <sampling_lc+0x21c>
    77dc:	83 cf       	rjmp	.-250    	; 0x76e4 <sampling_lc+0x14e>
      ADMUX=LowPin|ADref1V1;   // switch to "cold" side for reference measurement
    77de:	f0 92 7c 00 	sts	0x007C, r15	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
      par &= ~samplingADC_cumul;
    77e2:	e8 94       	clt
    77e4:	a6 f8       	bld	r10, 6
      ADMUX=LowPin|ADref1V1;   // switch to "cold" side for reference measurement
    77e6:	08 e0       	ldi	r16, 0x08	; 8
    77e8:	f0 2e       	mov	r15, r16
         samplingADC(par, uu0, 20, HiPinR_L, 0, 0, HiPinR_L);
    77ea:	c1 2e       	mov	r12, r17
    77ec:	e1 2c       	mov	r14, r1
    77ee:	00 e0       	ldi	r16, 0x00	; 0
    77f0:	21 2f       	mov	r18, r17
    77f2:	44 e1       	ldi	r20, 0x14	; 20
    77f4:	be 01       	movw	r22, r28
    77f6:	61 50       	subi	r22, 0x01	; 1
    77f8:	7e 4f       	sbci	r23, 0xFE	; 254
    77fa:	c5 01       	movw	r24, r10
    77fc:	0e 94 34 00 	call	0x68	; 0x68 <samplingADC>
         par |= samplingADC_cumul;
    7800:	68 94       	set
    7802:	a6 f8       	bld	r10, 6
      for (i=0;i<8;i++) {
    7804:	fa 94       	dec	r15
    7806:	f1 10       	cpse	r15, r1
    7808:	f0 cf       	rjmp	.-32     	; 0x77ea <sampling_lc+0x254>
      i=20; while (i--)         // equivalent to for (i=0;i<20;i++) but saves 48 bytes of flash????
    780a:	24 e1       	ldi	r18, 0x14	; 20
    780c:	21 50       	subi	r18, 0x01	; 1
    780e:	80 f2       	brcs	.-96     	; 0x77b0 <sampling_lc+0x21a>
         if (uu[i]>=uu0[i]) uu[i]-=uu0[i];
    7810:	82 2f       	mov	r24, r18
    7812:	90 e0       	ldi	r25, 0x00	; 0
    7814:	88 0f       	add	r24, r24
    7816:	99 1f       	adc	r25, r25
    7818:	e1 e0       	ldi	r30, 0x01	; 1
    781a:	f0 e0       	ldi	r31, 0x00	; 0
    781c:	ec 0f       	add	r30, r28
    781e:	fd 1f       	adc	r31, r29
    7820:	e8 0f       	add	r30, r24
    7822:	f9 1f       	adc	r31, r25
    7824:	40 81       	ld	r20, Z
    7826:	51 81       	ldd	r21, Z+1	; 0x01
    7828:	6f ef       	ldi	r22, 0xFF	; 255
    782a:	71 e0       	ldi	r23, 0x01	; 1
    782c:	6c 0f       	add	r22, r28
    782e:	7d 1f       	adc	r23, r29
    7830:	86 0f       	add	r24, r22
    7832:	97 1f       	adc	r25, r23
    7834:	dc 01       	movw	r26, r24
    7836:	8d 91       	ld	r24, X+
    7838:	9c 91       	ld	r25, X
    783a:	48 17       	cp	r20, r24
    783c:	59 07       	cpc	r21, r25
    783e:	28 f0       	brcs	.+10     	; 0x784a <sampling_lc+0x2b4>
    7840:	48 1b       	sub	r20, r24
    7842:	59 0b       	sbc	r21, r25
    7844:	51 83       	std	Z+1, r21	; 0x01
    7846:	40 83       	st	Z, r20
    7848:	e1 cf       	rjmp	.-62     	; 0x780c <sampling_lc+0x276>
         else uu[i]=0;
    784a:	11 82       	std	Z+1, r1	; 0x01
    784c:	10 82       	st	Z, r1
    784e:	de cf       	rjmp	.-68     	; 0x780c <sampling_lc+0x276>
   if (period > (255<<6)) period = 0;		// set implausible period to zero
    7850:	b1 2c       	mov	r11, r1
    7852:	a1 2c       	mov	r10, r1
    7854:	51 cf       	rjmp	.-350    	; 0x76f8 <sampling_lc+0x162>
   lc_fx = ((F_CPU<<(7-shift))/vv);
    7856:	87 e0       	ldi	r24, 0x07	; 7
    7858:	90 e0       	ldi	r25, 0x00	; 0
    785a:	86 19       	sub	r24, r6
    785c:	97 09       	sbc	r25, r7
    785e:	40 e0       	ldi	r20, 0x00	; 0
    7860:	54 e2       	ldi	r21, 0x24	; 36
    7862:	64 ef       	ldi	r22, 0xF4	; 244
    7864:	70 e0       	ldi	r23, 0x00	; 0
    7866:	8a 01       	movw	r16, r20
    7868:	9b 01       	movw	r18, r22
    786a:	04 c0       	rjmp	.+8      	; 0x7874 <sampling_lc+0x2de>
    786c:	00 0f       	add	r16, r16
    786e:	11 1f       	adc	r17, r17
    7870:	22 1f       	adc	r18, r18
    7872:	33 1f       	adc	r19, r19
    7874:	8a 95       	dec	r24
    7876:	d2 f7       	brpl	.-12     	; 0x786c <sampling_lc+0x2d6>
    7878:	c9 5d       	subi	r28, 0xD9	; 217
    787a:	dd 4f       	sbci	r29, 0xFD	; 253
    787c:	08 83       	st	Y, r16
    787e:	19 83       	std	Y+1, r17	; 0x01
    7880:	2a 83       	std	Y+2, r18	; 0x02
    7882:	3b 83       	std	Y+3, r19	; 0x03
    7884:	c7 52       	subi	r28, 0x27	; 39
    7886:	d2 40       	sbci	r29, 0x02	; 2
   vv = (unsigned long)period<<1;
    7888:	a7 01       	movw	r20, r14
    788a:	96 01       	movw	r18, r12
    788c:	22 0f       	add	r18, r18
    788e:	33 1f       	adc	r19, r19
    7890:	44 1f       	adc	r20, r20
   lc_fx = ((F_CPU<<(7-shift))/vv);
    7892:	55 1f       	adc	r21, r21
    7894:	c9 5d       	subi	r28, 0xD9	; 217
    7896:	dd 4f       	sbci	r29, 0xFD	; 253
    7898:	68 81       	ld	r22, Y
    789a:	79 81       	ldd	r23, Y+1	; 0x01
    789c:	8a 81       	ldd	r24, Y+2	; 0x02
    789e:	9b 81       	ldd	r25, Y+3	; 0x03
    78a0:	c7 52       	subi	r28, 0x27	; 39
    78a2:	d2 40       	sbci	r29, 0x02	; 2
    78a4:	98 d0       	rcall	.+304    	; 0x79d6 <__udivmodsi4>
    78a6:	20 93 be 01 	sts	0x01BE, r18	; 0x8001be <lc_fx>
    78aa:	30 93 bf 01 	sts	0x01BF, r19	; 0x8001bf <lc_fx+0x1>
    78ae:	40 93 c0 01 	sts	0x01C0, r20	; 0x8001c0 <lc_fx+0x2>
    78b2:	50 93 c1 01 	sts	0x01C1, r21	; 0x8001c1 <lc_fx+0x3>
   if (inductor_lpre >= 0) inductor_lpre = -1; 	/* no ESR measurement! */
    78b6:	80 91 9e 01 	lds	r24, 0x019E	; 0x80019e <inductor_lpre>
    78ba:	87 fd       	sbrc	r24, 7
    78bc:	67 cf       	rjmp	.-306    	; 0x778c <sampling_lc+0x1f6>
    78be:	8f ef       	ldi	r24, 0xFF	; 255
    78c0:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <inductor_lpre>
    78c4:	63 cf       	rjmp	.-314    	; 0x778c <sampling_lc+0x1f6>

000078c6 <sampling_lc_calibrate>:




void sampling_lc_calibrate(byte ww)
{
    78c6:	cf 93       	push	r28
    78c8:	df 93       	push	r29
    78ca:	c8 2f       	mov	r28, r24
 #define C_DIFF_LIMIT 200   /* Tolerance of capacity to rewrite eeprom */
//   lcd_clear();
   lcd_line1();
    78cc:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
   lcd_MEM2_string(cap_for_l_meas_str);		// "Cap for L meas?"
    78d0:	86 e0       	ldi	r24, 0x06	; 6
    78d2:	90 e0       	ldi	r25, 0x00	; 0
    78d4:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
   lcd_clear_line();
    78d8:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
   byte i = 0;		// no legal capacity value found
    78dc:	d0 e0       	ldi	r29, 0x00	; 0
   do { 
      lc_cpartmp = 0;
    78de:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <lc_cpartmp+0x1>
    78e2:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <lc_cpartmp>
      wait_about100ms();
    78e6:	84 e1       	ldi	r24, 0x14	; 20
    78e8:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
      ReadCapacity(TP1,TP3);
    78ec:	62 e0       	ldi	r22, 0x02	; 2
    78ee:	80 e0       	ldi	r24, 0x00	; 0
    78f0:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <ReadCapacity>
      lcd_line2();
    78f4:	0e 94 da 0a 	call	0x15b4	; 0x15b4 <lcd_line2>
      DisplayValue16(lc_cpartmp,-12,'F',4);
    78f8:	24 e0       	ldi	r18, 0x04	; 4
    78fa:	46 e4       	ldi	r20, 0x46	; 70
    78fc:	64 ef       	ldi	r22, 0xF4	; 244
    78fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <lc_cpartmp>
    7902:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <lc_cpartmp+0x1>
    7906:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <DisplayValue16>
      i++;
//      if ((lc_cpartmp<9500) || (lc_cpartmp>33000)) i=0;		// unstable or not connected
      if ((lc_cpartmp<3900) || (lc_cpartmp>34000)) i=0;		// unstable or not connected
    790a:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <lc_cpartmp>
    790e:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <lc_cpartmp+0x1>
    7912:	cb 01       	movw	r24, r22
    7914:	8c 53       	subi	r24, 0x3C	; 60
    7916:	9f 40       	sbci	r25, 0x0F	; 15
    7918:	85 39       	cpi	r24, 0x95	; 149
    791a:	95 47       	sbci	r25, 0x75	; 117
    791c:	a0 f4       	brcc	.+40     	; 0x7946 <sampling_lc_calibrate+0x80>
      i++;
    791e:	df 5f       	subi	r29, 0xFF	; 255
 #ifdef AUTO_LC_CAP
      if ((lc_cpartmp == 0) && (ww > 249)) break;	// a coil is connected in the AUTO_LC_CAP mode
 #endif
      if (i > 4) {	// Cx measurement was stable
    7920:	d5 30       	cpi	r29, 0x05	; 5
    7922:	90 f0       	brcs	.+36     	; 0x7948 <sampling_lc_calibrate+0x82>
           /* new cap value is out of tolerance */
 #else
        if (1)
 #endif
         {  /* rewrite new capacity value to eeprom and report OK */
            eeprom_write_word((uint16_t *)&lc_cpar_ee,lc_cpartmp);
    7924:	81 e5       	ldi	r24, 0x51	; 81
    7926:	93 e0       	ldi	r25, 0x03	; 3
    7928:	ec d1       	rcall	.+984    	; 0x7d02 <eeprom_write_word>
	    lcd_space();
    792a:	0e 94 a4 06 	call	0xd48	; 0xd48 <lcd_space>
            lcd_MEM_string(OK_str);	// Output "OK"
    792e:	8b ea       	ldi	r24, 0xAB	; 171
    7930:	91 e0       	ldi	r25, 0x01	; 1
    7932:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <lcd_fix_string>
            lcd_refresh();
            wait_about500ms();
    7936:	84 e6       	ldi	r24, 0x64	; 100
    7938:	0e 94 b5 07 	call	0xf6a	; 0xf6a <sleep_5ms>
         break;
      }  /* end (i > 4) */
      lcd_clear_line();
      lcd_refresh();
   } while (++ww != 0);
   lcd_line1();
    793c:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <lcd_line1>
}
    7940:	df 91       	pop	r29
    7942:	cf 91       	pop	r28
    7944:	08 95       	ret
      if ((lc_cpartmp<3900) || (lc_cpartmp>34000)) i=0;		// unstable or not connected
    7946:	d0 e0       	ldi	r29, 0x00	; 0
      lcd_clear_line();
    7948:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <lcd_clear_line>
   } while (++ww != 0);
    794c:	cf 5f       	subi	r28, 0xFF	; 255
    794e:	39 f6       	brne	.-114    	; 0x78de <sampling_lc_calibrate+0x18>
    7950:	f5 cf       	rjmp	.-22     	; 0x793c <sampling_lc_calibrate+0x76>

00007952 <__mulsi3>:
    7952:	db 01       	movw	r26, r22
    7954:	8f 93       	push	r24
    7956:	9f 93       	push	r25
    7958:	91 d0       	rcall	.+290    	; 0x7a7c <__muluhisi3>
    795a:	bf 91       	pop	r27
    795c:	af 91       	pop	r26
    795e:	a2 9f       	mul	r26, r18
    7960:	80 0d       	add	r24, r0
    7962:	91 1d       	adc	r25, r1
    7964:	a3 9f       	mul	r26, r19
    7966:	90 0d       	add	r25, r0
    7968:	b2 9f       	mul	r27, r18
    796a:	90 0d       	add	r25, r0
    796c:	11 24       	eor	r1, r1
    796e:	08 95       	ret

00007970 <__udivmodqi4>:
    7970:	99 1b       	sub	r25, r25
    7972:	79 e0       	ldi	r23, 0x09	; 9
    7974:	04 c0       	rjmp	.+8      	; 0x797e <__udivmodqi4_ep>

00007976 <__udivmodqi4_loop>:
    7976:	99 1f       	adc	r25, r25
    7978:	96 17       	cp	r25, r22
    797a:	08 f0       	brcs	.+2      	; 0x797e <__udivmodqi4_ep>
    797c:	96 1b       	sub	r25, r22

0000797e <__udivmodqi4_ep>:
    797e:	88 1f       	adc	r24, r24
    7980:	7a 95       	dec	r23
    7982:	c9 f7       	brne	.-14     	; 0x7976 <__udivmodqi4_loop>
    7984:	80 95       	com	r24
    7986:	08 95       	ret

00007988 <__udivmodhi4>:
    7988:	aa 1b       	sub	r26, r26
    798a:	bb 1b       	sub	r27, r27
    798c:	51 e1       	ldi	r21, 0x11	; 17
    798e:	07 c0       	rjmp	.+14     	; 0x799e <__udivmodhi4_ep>

00007990 <__udivmodhi4_loop>:
    7990:	aa 1f       	adc	r26, r26
    7992:	bb 1f       	adc	r27, r27
    7994:	a6 17       	cp	r26, r22
    7996:	b7 07       	cpc	r27, r23
    7998:	10 f0       	brcs	.+4      	; 0x799e <__udivmodhi4_ep>
    799a:	a6 1b       	sub	r26, r22
    799c:	b7 0b       	sbc	r27, r23

0000799e <__udivmodhi4_ep>:
    799e:	88 1f       	adc	r24, r24
    79a0:	99 1f       	adc	r25, r25
    79a2:	5a 95       	dec	r21
    79a4:	a9 f7       	brne	.-22     	; 0x7990 <__udivmodhi4_loop>
    79a6:	80 95       	com	r24
    79a8:	90 95       	com	r25
    79aa:	bc 01       	movw	r22, r24
    79ac:	cd 01       	movw	r24, r26
    79ae:	08 95       	ret

000079b0 <__divmodhi4>:
    79b0:	97 fb       	bst	r25, 7
    79b2:	07 2e       	mov	r0, r23
    79b4:	16 f4       	brtc	.+4      	; 0x79ba <__divmodhi4+0xa>
    79b6:	00 94       	com	r0
    79b8:	06 d0       	rcall	.+12     	; 0x79c6 <__divmodhi4_neg1>
    79ba:	77 fd       	sbrc	r23, 7
    79bc:	08 d0       	rcall	.+16     	; 0x79ce <__divmodhi4_neg2>
    79be:	e4 df       	rcall	.-56     	; 0x7988 <__udivmodhi4>
    79c0:	07 fc       	sbrc	r0, 7
    79c2:	05 d0       	rcall	.+10     	; 0x79ce <__divmodhi4_neg2>
    79c4:	3e f4       	brtc	.+14     	; 0x79d4 <__divmodhi4_exit>

000079c6 <__divmodhi4_neg1>:
    79c6:	90 95       	com	r25
    79c8:	81 95       	neg	r24
    79ca:	9f 4f       	sbci	r25, 0xFF	; 255
    79cc:	08 95       	ret

000079ce <__divmodhi4_neg2>:
    79ce:	70 95       	com	r23
    79d0:	61 95       	neg	r22
    79d2:	7f 4f       	sbci	r23, 0xFF	; 255

000079d4 <__divmodhi4_exit>:
    79d4:	08 95       	ret

000079d6 <__udivmodsi4>:
    79d6:	a1 e2       	ldi	r26, 0x21	; 33
    79d8:	1a 2e       	mov	r1, r26
    79da:	aa 1b       	sub	r26, r26
    79dc:	bb 1b       	sub	r27, r27
    79de:	fd 01       	movw	r30, r26
    79e0:	0d c0       	rjmp	.+26     	; 0x79fc <__udivmodsi4_ep>

000079e2 <__udivmodsi4_loop>:
    79e2:	aa 1f       	adc	r26, r26
    79e4:	bb 1f       	adc	r27, r27
    79e6:	ee 1f       	adc	r30, r30
    79e8:	ff 1f       	adc	r31, r31
    79ea:	a2 17       	cp	r26, r18
    79ec:	b3 07       	cpc	r27, r19
    79ee:	e4 07       	cpc	r30, r20
    79f0:	f5 07       	cpc	r31, r21
    79f2:	20 f0       	brcs	.+8      	; 0x79fc <__udivmodsi4_ep>
    79f4:	a2 1b       	sub	r26, r18
    79f6:	b3 0b       	sbc	r27, r19
    79f8:	e4 0b       	sbc	r30, r20
    79fa:	f5 0b       	sbc	r31, r21

000079fc <__udivmodsi4_ep>:
    79fc:	66 1f       	adc	r22, r22
    79fe:	77 1f       	adc	r23, r23
    7a00:	88 1f       	adc	r24, r24
    7a02:	99 1f       	adc	r25, r25
    7a04:	1a 94       	dec	r1
    7a06:	69 f7       	brne	.-38     	; 0x79e2 <__udivmodsi4_loop>
    7a08:	60 95       	com	r22
    7a0a:	70 95       	com	r23
    7a0c:	80 95       	com	r24
    7a0e:	90 95       	com	r25
    7a10:	9b 01       	movw	r18, r22
    7a12:	ac 01       	movw	r20, r24
    7a14:	bd 01       	movw	r22, r26
    7a16:	cf 01       	movw	r24, r30
    7a18:	08 95       	ret

00007a1a <__divmodsi4>:
    7a1a:	05 2e       	mov	r0, r21
    7a1c:	97 fb       	bst	r25, 7
    7a1e:	16 f4       	brtc	.+4      	; 0x7a24 <__divmodsi4+0xa>
    7a20:	00 94       	com	r0
    7a22:	0f d0       	rcall	.+30     	; 0x7a42 <__negsi2>
    7a24:	57 fd       	sbrc	r21, 7
    7a26:	05 d0       	rcall	.+10     	; 0x7a32 <__divmodsi4_neg2>
    7a28:	d6 df       	rcall	.-84     	; 0x79d6 <__udivmodsi4>
    7a2a:	07 fc       	sbrc	r0, 7
    7a2c:	02 d0       	rcall	.+4      	; 0x7a32 <__divmodsi4_neg2>
    7a2e:	46 f4       	brtc	.+16     	; 0x7a40 <__divmodsi4_exit>
    7a30:	08 c0       	rjmp	.+16     	; 0x7a42 <__negsi2>

00007a32 <__divmodsi4_neg2>:
    7a32:	50 95       	com	r21
    7a34:	40 95       	com	r20
    7a36:	30 95       	com	r19
    7a38:	21 95       	neg	r18
    7a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a3c:	4f 4f       	sbci	r20, 0xFF	; 255
    7a3e:	5f 4f       	sbci	r21, 0xFF	; 255

00007a40 <__divmodsi4_exit>:
    7a40:	08 95       	ret

00007a42 <__negsi2>:
    7a42:	90 95       	com	r25
    7a44:	80 95       	com	r24
    7a46:	70 95       	com	r23
    7a48:	61 95       	neg	r22
    7a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    7a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    7a50:	08 95       	ret

00007a52 <__umulhisi3>:
    7a52:	a2 9f       	mul	r26, r18
    7a54:	b0 01       	movw	r22, r0
    7a56:	b3 9f       	mul	r27, r19
    7a58:	c0 01       	movw	r24, r0
    7a5a:	a3 9f       	mul	r26, r19
    7a5c:	70 0d       	add	r23, r0
    7a5e:	81 1d       	adc	r24, r1
    7a60:	11 24       	eor	r1, r1
    7a62:	91 1d       	adc	r25, r1
    7a64:	b2 9f       	mul	r27, r18
    7a66:	70 0d       	add	r23, r0
    7a68:	81 1d       	adc	r24, r1
    7a6a:	11 24       	eor	r1, r1
    7a6c:	91 1d       	adc	r25, r1
    7a6e:	08 95       	ret

00007a70 <__usmulhisi3>:
    7a70:	f0 df       	rcall	.-32     	; 0x7a52 <__umulhisi3>

00007a72 <__usmulhisi3_tail>:
    7a72:	b7 ff       	sbrs	r27, 7
    7a74:	08 95       	ret
    7a76:	82 1b       	sub	r24, r18
    7a78:	93 0b       	sbc	r25, r19
    7a7a:	08 95       	ret

00007a7c <__muluhisi3>:
    7a7c:	ea df       	rcall	.-44     	; 0x7a52 <__umulhisi3>
    7a7e:	a5 9f       	mul	r26, r21
    7a80:	90 0d       	add	r25, r0
    7a82:	b4 9f       	mul	r27, r20
    7a84:	90 0d       	add	r25, r0
    7a86:	a4 9f       	mul	r26, r20
    7a88:	80 0d       	add	r24, r0
    7a8a:	91 1d       	adc	r25, r1
    7a8c:	11 24       	eor	r1, r1
    7a8e:	08 95       	ret

00007a90 <__mulshisi3>:
    7a90:	b7 ff       	sbrs	r27, 7
    7a92:	f4 cf       	rjmp	.-24     	; 0x7a7c <__muluhisi3>

00007a94 <__mulohisi3>:
    7a94:	f3 df       	rcall	.-26     	; 0x7a7c <__muluhisi3>
    7a96:	82 1b       	sub	r24, r18
    7a98:	93 0b       	sbc	r25, r19
    7a9a:	08 95       	ret

00007a9c <__umulsidi3>:
    7a9c:	e8 94       	clt

00007a9e <__umulsidi3_helper>:
    7a9e:	df 93       	push	r29
    7aa0:	cf 93       	push	r28
    7aa2:	fc 01       	movw	r30, r24
    7aa4:	db 01       	movw	r26, r22
    7aa6:	d5 df       	rcall	.-86     	; 0x7a52 <__umulhisi3>
    7aa8:	7f 93       	push	r23
    7aaa:	6f 93       	push	r22
    7aac:	e9 01       	movw	r28, r18
    7aae:	9a 01       	movw	r18, r20
    7ab0:	ac 01       	movw	r20, r24
    7ab2:	bf 93       	push	r27
    7ab4:	af 93       	push	r26
    7ab6:	3f 93       	push	r19
    7ab8:	2f 93       	push	r18
    7aba:	df 01       	movw	r26, r30
    7abc:	ca df       	rcall	.-108    	; 0x7a52 <__umulhisi3>
    7abe:	26 f4       	brtc	.+8      	; 0x7ac8 <__umulsidi3_helper+0x2a>
    7ac0:	6c 1b       	sub	r22, r28
    7ac2:	7d 0b       	sbc	r23, r29
    7ac4:	82 0b       	sbc	r24, r18
    7ac6:	93 0b       	sbc	r25, r19
    7ac8:	9e 01       	movw	r18, r28
    7aca:	eb 01       	movw	r28, r22
    7acc:	fc 01       	movw	r30, r24
    7ace:	a2 d0       	rcall	.+324    	; 0x7c14 <__muldi3_6>
    7ad0:	af 91       	pop	r26
    7ad2:	bf 91       	pop	r27
    7ad4:	2f 91       	pop	r18
    7ad6:	3f 91       	pop	r19
    7ad8:	9d d0       	rcall	.+314    	; 0x7c14 <__muldi3_6>
    7ada:	be 01       	movw	r22, r28
    7adc:	cf 01       	movw	r24, r30
    7ade:	f9 01       	movw	r30, r18
    7ae0:	2f 91       	pop	r18
    7ae2:	3f 91       	pop	r19
    7ae4:	cf 91       	pop	r28
    7ae6:	df 91       	pop	r29
    7ae8:	08 95       	ret

00007aea <__umoddi3>:
    7aea:	68 94       	set
    7aec:	01 c0       	rjmp	.+2      	; 0x7af0 <__udivdi3_umoddi3>

00007aee <__udivdi3>:
    7aee:	e8 94       	clt

00007af0 <__udivdi3_umoddi3>:
    7af0:	8f 92       	push	r8
    7af2:	9f 92       	push	r9
    7af4:	cf 93       	push	r28
    7af6:	df 93       	push	r29
    7af8:	05 d0       	rcall	.+10     	; 0x7b04 <__udivmod64>
    7afa:	df 91       	pop	r29
    7afc:	cf 91       	pop	r28
    7afe:	9f 90       	pop	r9
    7b00:	8f 90       	pop	r8
    7b02:	08 95       	ret

00007b04 <__udivmod64>:
    7b04:	88 24       	eor	r8, r8
    7b06:	99 24       	eor	r9, r9
    7b08:	f4 01       	movw	r30, r8
    7b0a:	e4 01       	movw	r28, r8
    7b0c:	b0 e4       	ldi	r27, 0x40	; 64
    7b0e:	9f 93       	push	r25
    7b10:	aa 27       	eor	r26, r26
    7b12:	9a 15       	cp	r25, r10
    7b14:	8b 04       	cpc	r8, r11
    7b16:	9c 04       	cpc	r9, r12
    7b18:	ed 05       	cpc	r30, r13
    7b1a:	fe 05       	cpc	r31, r14
    7b1c:	cf 05       	cpc	r28, r15
    7b1e:	d0 07       	cpc	r29, r16
    7b20:	a1 07       	cpc	r26, r17
    7b22:	98 f4       	brcc	.+38     	; 0x7b4a <__udivmod64+0x46>
    7b24:	ad 2f       	mov	r26, r29
    7b26:	dc 2f       	mov	r29, r28
    7b28:	cf 2f       	mov	r28, r31
    7b2a:	fe 2f       	mov	r31, r30
    7b2c:	e9 2d       	mov	r30, r9
    7b2e:	98 2c       	mov	r9, r8
    7b30:	89 2e       	mov	r8, r25
    7b32:	98 2f       	mov	r25, r24
    7b34:	87 2f       	mov	r24, r23
    7b36:	76 2f       	mov	r23, r22
    7b38:	65 2f       	mov	r22, r21
    7b3a:	54 2f       	mov	r21, r20
    7b3c:	43 2f       	mov	r20, r19
    7b3e:	32 2f       	mov	r19, r18
    7b40:	22 27       	eor	r18, r18
    7b42:	b8 50       	subi	r27, 0x08	; 8
    7b44:	31 f7       	brne	.-52     	; 0x7b12 <__udivmod64+0xe>
    7b46:	bf 91       	pop	r27
    7b48:	27 c0       	rjmp	.+78     	; 0x7b98 <__udivmod64+0x94>
    7b4a:	1b 2e       	mov	r1, r27
    7b4c:	bf 91       	pop	r27
    7b4e:	bb 27       	eor	r27, r27
    7b50:	22 0f       	add	r18, r18
    7b52:	33 1f       	adc	r19, r19
    7b54:	44 1f       	adc	r20, r20
    7b56:	55 1f       	adc	r21, r21
    7b58:	66 1f       	adc	r22, r22
    7b5a:	77 1f       	adc	r23, r23
    7b5c:	88 1f       	adc	r24, r24
    7b5e:	99 1f       	adc	r25, r25
    7b60:	88 1c       	adc	r8, r8
    7b62:	99 1c       	adc	r9, r9
    7b64:	ee 1f       	adc	r30, r30
    7b66:	ff 1f       	adc	r31, r31
    7b68:	cc 1f       	adc	r28, r28
    7b6a:	dd 1f       	adc	r29, r29
    7b6c:	aa 1f       	adc	r26, r26
    7b6e:	bb 1f       	adc	r27, r27
    7b70:	8a 14       	cp	r8, r10
    7b72:	9b 04       	cpc	r9, r11
    7b74:	ec 05       	cpc	r30, r12
    7b76:	fd 05       	cpc	r31, r13
    7b78:	ce 05       	cpc	r28, r14
    7b7a:	df 05       	cpc	r29, r15
    7b7c:	a0 07       	cpc	r26, r16
    7b7e:	b1 07       	cpc	r27, r17
    7b80:	48 f0       	brcs	.+18     	; 0x7b94 <__udivmod64+0x90>
    7b82:	8a 18       	sub	r8, r10
    7b84:	9b 08       	sbc	r9, r11
    7b86:	ec 09       	sbc	r30, r12
    7b88:	fd 09       	sbc	r31, r13
    7b8a:	ce 09       	sbc	r28, r14
    7b8c:	df 09       	sbc	r29, r15
    7b8e:	a0 0b       	sbc	r26, r16
    7b90:	b1 0b       	sbc	r27, r17
    7b92:	21 60       	ori	r18, 0x01	; 1
    7b94:	1a 94       	dec	r1
    7b96:	e1 f6       	brne	.-72     	; 0x7b50 <__udivmod64+0x4c>
    7b98:	2e f4       	brtc	.+10     	; 0x7ba4 <__udivmod64+0xa0>
    7b9a:	94 01       	movw	r18, r8
    7b9c:	af 01       	movw	r20, r30
    7b9e:	be 01       	movw	r22, r28
    7ba0:	cd 01       	movw	r24, r26
    7ba2:	00 0c       	add	r0, r0
    7ba4:	08 95       	ret

00007ba6 <__prologue_saves__>:
    7ba6:	2f 92       	push	r2
    7ba8:	3f 92       	push	r3
    7baa:	4f 92       	push	r4
    7bac:	5f 92       	push	r5
    7bae:	6f 92       	push	r6
    7bb0:	7f 92       	push	r7
    7bb2:	8f 92       	push	r8
    7bb4:	9f 92       	push	r9
    7bb6:	af 92       	push	r10
    7bb8:	bf 92       	push	r11
    7bba:	cf 92       	push	r12
    7bbc:	df 92       	push	r13
    7bbe:	ef 92       	push	r14
    7bc0:	ff 92       	push	r15
    7bc2:	0f 93       	push	r16
    7bc4:	1f 93       	push	r17
    7bc6:	cf 93       	push	r28
    7bc8:	df 93       	push	r29
    7bca:	cd b7       	in	r28, 0x3d	; 61
    7bcc:	de b7       	in	r29, 0x3e	; 62
    7bce:	ca 1b       	sub	r28, r26
    7bd0:	db 0b       	sbc	r29, r27
    7bd2:	0f b6       	in	r0, 0x3f	; 63
    7bd4:	f8 94       	cli
    7bd6:	de bf       	out	0x3e, r29	; 62
    7bd8:	0f be       	out	0x3f, r0	; 63
    7bda:	cd bf       	out	0x3d, r28	; 61
    7bdc:	09 94       	ijmp

00007bde <__epilogue_restores__>:
    7bde:	2a 88       	ldd	r2, Y+18	; 0x12
    7be0:	39 88       	ldd	r3, Y+17	; 0x11
    7be2:	48 88       	ldd	r4, Y+16	; 0x10
    7be4:	5f 84       	ldd	r5, Y+15	; 0x0f
    7be6:	6e 84       	ldd	r6, Y+14	; 0x0e
    7be8:	7d 84       	ldd	r7, Y+13	; 0x0d
    7bea:	8c 84       	ldd	r8, Y+12	; 0x0c
    7bec:	9b 84       	ldd	r9, Y+11	; 0x0b
    7bee:	aa 84       	ldd	r10, Y+10	; 0x0a
    7bf0:	b9 84       	ldd	r11, Y+9	; 0x09
    7bf2:	c8 84       	ldd	r12, Y+8	; 0x08
    7bf4:	df 80       	ldd	r13, Y+7	; 0x07
    7bf6:	ee 80       	ldd	r14, Y+6	; 0x06
    7bf8:	fd 80       	ldd	r15, Y+5	; 0x05
    7bfa:	0c 81       	ldd	r16, Y+4	; 0x04
    7bfc:	1b 81       	ldd	r17, Y+3	; 0x03
    7bfe:	aa 81       	ldd	r26, Y+2	; 0x02
    7c00:	b9 81       	ldd	r27, Y+1	; 0x01
    7c02:	ce 0f       	add	r28, r30
    7c04:	d1 1d       	adc	r29, r1
    7c06:	0f b6       	in	r0, 0x3f	; 63
    7c08:	f8 94       	cli
    7c0a:	de bf       	out	0x3e, r29	; 62
    7c0c:	0f be       	out	0x3f, r0	; 63
    7c0e:	cd bf       	out	0x3d, r28	; 61
    7c10:	ed 01       	movw	r28, r26
    7c12:	08 95       	ret

00007c14 <__muldi3_6>:
    7c14:	1e df       	rcall	.-452    	; 0x7a52 <__umulhisi3>
    7c16:	46 0f       	add	r20, r22
    7c18:	57 1f       	adc	r21, r23
    7c1a:	c8 1f       	adc	r28, r24
    7c1c:	d9 1f       	adc	r29, r25
    7c1e:	08 f4       	brcc	.+2      	; 0x7c22 <__muldi3_6+0xe>
    7c20:	31 96       	adiw	r30, 0x01	; 1
    7c22:	08 95       	ret

00007c24 <__ultoa_ncheck>:
    7c24:	bb 27       	eor	r27, r27

00007c26 <__ultoa_common>:
    7c26:	fa 01       	movw	r30, r20
    7c28:	a6 2f       	mov	r26, r22
    7c2a:	62 17       	cp	r22, r18
    7c2c:	71 05       	cpc	r23, r1
    7c2e:	81 05       	cpc	r24, r1
    7c30:	91 05       	cpc	r25, r1
    7c32:	33 0b       	sbc	r19, r19
    7c34:	30 fb       	bst	r19, 0
    7c36:	66 f0       	brts	.+24     	; 0x7c50 <__ultoa_common+0x2a>
    7c38:	aa 27       	eor	r26, r26
    7c3a:	66 0f       	add	r22, r22
    7c3c:	77 1f       	adc	r23, r23
    7c3e:	88 1f       	adc	r24, r24
    7c40:	99 1f       	adc	r25, r25
    7c42:	aa 1f       	adc	r26, r26
    7c44:	a2 17       	cp	r26, r18
    7c46:	10 f0       	brcs	.+4      	; 0x7c4c <__ultoa_common+0x26>
    7c48:	a2 1b       	sub	r26, r18
    7c4a:	63 95       	inc	r22
    7c4c:	38 50       	subi	r19, 0x08	; 8
    7c4e:	a9 f7       	brne	.-22     	; 0x7c3a <__ultoa_common+0x14>
    7c50:	a0 5d       	subi	r26, 0xD0	; 208
    7c52:	aa 33       	cpi	r26, 0x3A	; 58
    7c54:	08 f0       	brcs	.+2      	; 0x7c58 <__ultoa_common+0x32>
    7c56:	a9 5d       	subi	r26, 0xD9	; 217
    7c58:	a1 93       	st	Z+, r26
    7c5a:	36 f7       	brtc	.-52     	; 0x7c28 <__ultoa_common+0x2>
    7c5c:	b1 11       	cpse	r27, r1
    7c5e:	b1 93       	st	Z+, r27
    7c60:	10 82       	st	Z, r1
    7c62:	ca 01       	movw	r24, r20
    7c64:	23 c0       	rjmp	.+70     	; 0x7cac <strrev>

00007c66 <utoa>:
    7c66:	45 32       	cpi	r20, 0x25	; 37
    7c68:	51 05       	cpc	r21, r1
    7c6a:	18 f4       	brcc	.+6      	; 0x7c72 <utoa+0xc>
    7c6c:	42 30       	cpi	r20, 0x02	; 2
    7c6e:	08 f0       	brcs	.+2      	; 0x7c72 <utoa+0xc>
    7c70:	04 c0       	rjmp	.+8      	; 0x7c7a <__utoa_ncheck>
    7c72:	fb 01       	movw	r30, r22
    7c74:	10 82       	st	Z, r1
    7c76:	cb 01       	movw	r24, r22
    7c78:	08 95       	ret

00007c7a <__utoa_ncheck>:
    7c7a:	bb 27       	eor	r27, r27

00007c7c <__utoa_common>:
    7c7c:	fb 01       	movw	r30, r22
    7c7e:	55 27       	eor	r21, r21
    7c80:	aa 27       	eor	r26, r26
    7c82:	88 0f       	add	r24, r24
    7c84:	99 1f       	adc	r25, r25
    7c86:	aa 1f       	adc	r26, r26
    7c88:	a4 17       	cp	r26, r20
    7c8a:	10 f0       	brcs	.+4      	; 0x7c90 <__utoa_common+0x14>
    7c8c:	a4 1b       	sub	r26, r20
    7c8e:	83 95       	inc	r24
    7c90:	50 51       	subi	r21, 0x10	; 16
    7c92:	b9 f7       	brne	.-18     	; 0x7c82 <__utoa_common+0x6>
    7c94:	a0 5d       	subi	r26, 0xD0	; 208
    7c96:	aa 33       	cpi	r26, 0x3A	; 58
    7c98:	08 f0       	brcs	.+2      	; 0x7c9c <__utoa_common+0x20>
    7c9a:	a9 5d       	subi	r26, 0xD9	; 217
    7c9c:	a1 93       	st	Z+, r26
    7c9e:	00 97       	sbiw	r24, 0x00	; 0
    7ca0:	79 f7       	brne	.-34     	; 0x7c80 <__utoa_common+0x4>
    7ca2:	b1 11       	cpse	r27, r1
    7ca4:	b1 93       	st	Z+, r27
    7ca6:	11 92       	st	Z+, r1
    7ca8:	cb 01       	movw	r24, r22
    7caa:	00 c0       	rjmp	.+0      	; 0x7cac <strrev>

00007cac <strrev>:
    7cac:	dc 01       	movw	r26, r24
    7cae:	fc 01       	movw	r30, r24
    7cb0:	67 2f       	mov	r22, r23
    7cb2:	71 91       	ld	r23, Z+
    7cb4:	77 23       	and	r23, r23
    7cb6:	e1 f7       	brne	.-8      	; 0x7cb0 <strrev+0x4>
    7cb8:	32 97       	sbiw	r30, 0x02	; 2
    7cba:	04 c0       	rjmp	.+8      	; 0x7cc4 <strrev+0x18>
    7cbc:	7c 91       	ld	r23, X
    7cbe:	6d 93       	st	X+, r22
    7cc0:	70 83       	st	Z, r23
    7cc2:	62 91       	ld	r22, -Z
    7cc4:	ae 17       	cp	r26, r30
    7cc6:	bf 07       	cpc	r27, r31
    7cc8:	c8 f3       	brcs	.-14     	; 0x7cbc <strrev+0x10>
    7cca:	08 95       	ret

00007ccc <eeprom_read_byte>:
    7ccc:	f9 99       	sbic	0x1f, 1	; 31
    7cce:	fe cf       	rjmp	.-4      	; 0x7ccc <eeprom_read_byte>
    7cd0:	92 bd       	out	0x22, r25	; 34
    7cd2:	81 bd       	out	0x21, r24	; 33
    7cd4:	f8 9a       	sbi	0x1f, 0	; 31
    7cd6:	99 27       	eor	r25, r25
    7cd8:	80 b5       	in	r24, 0x20	; 32
    7cda:	08 95       	ret

00007cdc <eeprom_read_word>:
    7cdc:	a8 e1       	ldi	r26, 0x18	; 24
    7cde:	b0 e0       	ldi	r27, 0x00	; 0
    7ce0:	42 e0       	ldi	r20, 0x02	; 2
    7ce2:	50 e0       	ldi	r21, 0x00	; 0
    7ce4:	13 c0       	rjmp	.+38     	; 0x7d0c <eeprom_read_blraw>

00007ce6 <eeprom_write_byte>:
    7ce6:	26 2f       	mov	r18, r22

00007ce8 <eeprom_write_r18>:
    7ce8:	f9 99       	sbic	0x1f, 1	; 31
    7cea:	fe cf       	rjmp	.-4      	; 0x7ce8 <eeprom_write_r18>
    7cec:	1f ba       	out	0x1f, r1	; 31
    7cee:	92 bd       	out	0x22, r25	; 34
    7cf0:	81 bd       	out	0x21, r24	; 33
    7cf2:	20 bd       	out	0x20, r18	; 32
    7cf4:	0f b6       	in	r0, 0x3f	; 63
    7cf6:	f8 94       	cli
    7cf8:	fa 9a       	sbi	0x1f, 2	; 31
    7cfa:	f9 9a       	sbi	0x1f, 1	; 31
    7cfc:	0f be       	out	0x3f, r0	; 63
    7cfe:	01 96       	adiw	r24, 0x01	; 1
    7d00:	08 95       	ret

00007d02 <eeprom_write_word>:
    7d02:	f1 df       	rcall	.-30     	; 0x7ce6 <eeprom_write_byte>
    7d04:	27 2f       	mov	r18, r23
    7d06:	f0 cf       	rjmp	.-32     	; 0x7ce8 <eeprom_write_r18>

00007d08 <eeprom_read_block>:
    7d08:	dc 01       	movw	r26, r24
    7d0a:	cb 01       	movw	r24, r22

00007d0c <eeprom_read_blraw>:
    7d0c:	fc 01       	movw	r30, r24
    7d0e:	f9 99       	sbic	0x1f, 1	; 31
    7d10:	fe cf       	rjmp	.-4      	; 0x7d0e <eeprom_read_blraw+0x2>
    7d12:	06 c0       	rjmp	.+12     	; 0x7d20 <eeprom_read_blraw+0x14>
    7d14:	f2 bd       	out	0x22, r31	; 34
    7d16:	e1 bd       	out	0x21, r30	; 33
    7d18:	f8 9a       	sbi	0x1f, 0	; 31
    7d1a:	31 96       	adiw	r30, 0x01	; 1
    7d1c:	00 b4       	in	r0, 0x20	; 32
    7d1e:	0d 92       	st	X+, r0
    7d20:	41 50       	subi	r20, 0x01	; 1
    7d22:	50 40       	sbci	r21, 0x00	; 0
    7d24:	b8 f7       	brcc	.-18     	; 0x7d14 <eeprom_read_blraw+0x8>
    7d26:	08 95       	ret

00007d28 <_exit>:
    7d28:	f8 94       	cli

00007d2a <__stop_program>:
    7d2a:	ff cf       	rjmp	.-2      	; 0x7d2a <__stop_program>
